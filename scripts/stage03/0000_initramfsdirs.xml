<?xml version="1.0" encoding="UTF-8"?>
<llpackages>
	<dirs>
		<!-- <dir mode="0755">/bin</dir>
		<dir mode="0755">/sbin</dir>
		<dir mode="0755">/lib</dir> -->
		<dir mode="0755">/usr</dir>
		<dir mode="0755">/var</dir>
		<dir mode="0755">/var/lib</dir>
		<dir mode="0755">/var/lib/dpkg</dir>
		<dir mode="0755">/var/lib/dpkg/info</dir>
		<dir mode="0755">/var/log</dir>
		<dir mode="0755">/var/run</dir>
		<dir mode="0755">/var/run/lesslinux</dir>
		<dir mode="1777">/var/lock</dir>
		<dir mode="0755">/proc</dir>
		<dir mode="0755">/sys</dir>
		<dir mode="0700">/root</dir>
		<dir mode="1777">/tmp</dir>
		<dir mode="0755">/home</dir>
		<dir mode="0755">/static</dir>
		<dir mode="0755">/static/bin</dir>
		<dir mode="0755">/static/share</dir>
		<dir mode="0755">/static/share/udhcpc</dir>
		<dir mode="0755">/etc</dir>
		<dir mode="0755">/etc/modprobe.d</dir>
		<dir mode="0755">/etc/smack</dir>
		<dir mode="0755">/etc/lesslinux</dir>
		<dir mode="0755">/etc/lesslinux/skel</dir>
		<dir mode="0755">/etc/lesslinux/updater</dir>
		<dir mode="0755">/etc/lesslinux/branding</dir>
		<dir mode="0755">/etc/lesslinux/branding/overlays</dir>
		<dir mode="0755">/etc/lesslinux/branding/postisoconvert.d</dir>
		<dir mode="0755">/etc/lesslinux/kexec</dir>
		<dir mode="0755">/etc/lesslinux/installer.d</dir>
		<dir mode="0755">/etc/rc.lang</dir>
		<dir mode="0755">/etc/rc.lang/de</dir>
		<dir mode="0755">/etc/rc.lang/en</dir>
		<dir mode="0755">/etc/rc.lang/ru</dir>
		<dir mode="0755">/etc/rc.lang/es</dir>
		<dir mode="0755">/etc/rc.lang/pl</dir>
		<dir mode="0755">/etc/rc.confd</dir>
		<dir mode="0755">/etc/rc.subr</dir>
		<dir mode="0755">/etc/rc.templates</dir>
		<dir mode="0755">/etc/rc.d</dir>
		<dir mode="0755">/etc/samba</dir>
		<dir mode="0755">/etc/xinitrc.d</dir>
		<dir mode="0755">/lesslinux</dir>
		<dir mode="0755">/lesslinux/boot</dir>
	</dirs>
	<files>
		<file mode="0664" owner="0" group="43">/var/log/wtmp</file>
		<file mode="0664" owner="0" group="43">/var/log/lastlog</file>
		<file mode="0640" owner="0" group="0">/var/log/messages</file>
		<file mode="0644" owner="0" group="0">/var/lib/dpkg/status</file>
		<file mode="0644" owner="0" group="0">/etc/samba/smb.conf</file>
		<file mode="0644" owner="0" group="0">/etc/lesslinux/cmdline</file>
		<file mode="0644" owner="0" group="0">/lesslinux/boot/cmdline</file>
	</files>
	<links>
		<softlink target="/static/bin/busybox">/linuxrc</softlink>
		<softlink target="/static/bin/busybox">/init</softlink>
		<!-- <softlink target="/usr/share/themes/Xfce/gtk-2.0/gtkrc">/root/.gtkrc</softlink>
		<softlink target="/usr/share/themes/Xfce/gtk-2.0/gtkrc">/root/.gtkrc-2.0</softlink> -->
	</links>
	<scripts>
		<scriptdata location="/etc/mdev.conf" mode="0644" group="0" owner="0">
		<![CDATA[
null 0:0 666
zero 0:0 664
urandom 0:0 664
random 0:0 0664
tty 0:0 0666
pty.* 0:0 0666
ptmx 0:5 0666
srX 0:60008 0660
sr[0-9] 0:60008 0660
]]>
		</scriptdata>
		<scriptdata location="/etc/shells" mode="0644" group="0" owner="0">
		<![CDATA[
/bin/sh
/static/bin/ash
/bin/bash
		]]>
		</scriptdata>
		<scriptdata location="/etc/lesslinux/overlay_save" mode="0644" group="0" owner="0">
		<![CDATA[# files to save in the container in the folder .overlay
# to change the defaults here, add this file to the list before shutting down
/etc/passwd
/etc/shadow
/etc/wicd/wired-settings.conf
/etc/wicd/wireless-settings.conf
/etc/wicd/manager-settings.conf
/etc/rc.local
/etc/lesslinux/banking/allowedservers.xml
/etc/lesslinux/flashplugin
]]>
		</scriptdata>
		<scriptdata location="/etc/lesslinux/updater/updater.sh" mode="0700" group="0" owner="0">
		<![CDATA[#!/static/bin/ash

PATH=/usr/bin:/usr/sbin:/bin:/sbin:/static/bin:/static/sbin

# FIXME: Remove dependency on zenity!
# FIXME: Localize!

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors
. /etc/rc.lang/en/messages.sh
[ -f "/etc/rc.lang/$lang/messages.sh" ] && . /etc/rc.lang/$lang/messages.sh
. /etc/lesslinux/branding/branding.en.sh
[ -f "/etc/lesslinux/branding/branding.${lang}.sh" ] && . /etc/lesslinux/branding/branding.${lang}.sh

this_version=` cat /etc/lesslinux/updater/version.txt `
base_url=` cat /etc/lesslinux/updater/baseurl.txt ` 
WGET='/static/bin/wget'
[ -x /usr/bin/wget ] && WGET='/usr/bin/wget'

if [ "$1" = "--quiet" ] ; then
	echo "Skipping question, start searching..."
else
	/usr/bin/zenity --question --text "$updater_ready_question" || exit 1
fi

# Importiere the key
/usr/bin/gpg --import /etc/lesslinux/updater/updatekey.asc

# Create update folder
mkdir -m 0755 /tmp/lesslinux.update

# Download the update script - needs setting the SMACK context
echo internet > /proc/self/attr/current

for fname in updater.tbz updater.tbz.asc ; do
    # Since we validate afterwards, do not check certificates for now
    $WGET -T 3 --no-check-certificate -U LessLinuxUpdater -O /tmp/lesslinux.update/${fname} "${base_url}/${this_version}/${fname}"
    retval=$?
    if [ "$retval" -gt 0 ] ; then
	[ "$1" = "--quiet" ] || /usr/bin/zenity --error --text "$updater_download_failed"
	exit 1
    fi
done
echo _ > /proc/self/attr/current

# PrÃ¼fung der Signatur
if /usr/bin/gpg --verify /tmp/lesslinux.update/updater.tbz.asc ; then
    echo "===> Signatur OK, fahre fort"
    # Signatur war gut? Na dann starten wir das Script...
    cd /tmp/lesslinux.update
    tar xjf updater.tbz
    if [ "$1" = "--quiet" ] ; then
	/static/bin/ash RUNME.sh --quiet
    else
	/static/bin/ash RUNME.sh
    fi
else
    [ "$1" = "--quiet" ] || /usr/bin/zenity --error --text "$updater_signature_failed"
    exit 1
fi

		]]>
		</scriptdata>
		<scriptdata location="/etc/xinitrc.d/0500-updater.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash
		
#lesslinux provides updater
#lesslinux license BSD

PATH=/usr/bin:/usr/sbin:/bin:/sbin:/static/bin:/static/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors 

case $1 in 
    start)
	check_lax_sudo || exit 1 
	uid=` id -u ` 
	[ "$uid" -gt 0 ] || exit 1 
	matchbox-window-manager -force-dialogs Update &
	sudo /etc/lesslinux/updater/updater.sh --quiet 
	killall -9 matchbox-window-manager
	if [ -f /tmp/lesslinux/updater.tbz.asc ] ; then
		echo '===> Previous check for update successful'
	else
		( sleep 600 ; sudo /etc/lesslinux/updater/updater.sh --quiet ) & 
	fi
    ;;
esac

		]]>
		</scriptdata>
		<scriptdata location="/etc/lesslinux/updater/update_wrapper.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash
		
if check_lax_sudo ; then
	sudo /etc/lesslinux/updater/updater.sh $1
else
	sudo /etc/lesslinux/updater/updater.sh $1
	# /usr/bin/llaskpass-mount.rb | sudo -S /etc/lesslinux/updater/updater.sh $1
fi

		]]>
		</scriptdata>
		<scriptdata location="/static/bin/x_user_start" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash		
		PATH=/bin:/sbin:/usr/bin:/usr/sbin:/static/bin:/static/sbin
		
. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors

if echo "$skipservices" | grep '|x|' ; then
	sleep 60
	exit
fi
		
if [ -d /home/surfer ] ; then
	echo "/home/surfer exists"
	chown -R 1000:1000 /home/surfer
else
	mkdir /home/surfer
	chown -R 1000:1000 /home/surfer
fi
cd /home/surfer
/static/bin/su surfer -c /static/bin/xstart
		
# The end	]]>
		</scriptdata>
		<scriptdata location="/static/bin/xstart" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash	
		
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/static/bin:/static/sbin

## xorgscreen="default_screen"
## xorgconf="/etc/X11/xorg.conf.xorg"

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors
		
DBUS_LAUNCH=/usr/bin/dbus-launch
## VESA_MODE=0x0117
## driver="xvesa"
## vesapref=""
## dpi=75

if [ -f /var/run/lesslinux/xorg_vars ] ; then
    . /var/run/lesslinux/xorg_vars
fi

# Remove an old indicator
rm /home/surfer/.lesslinux/xsetroot_successful

if [ -n "$xorgconf" ] && [ -f "$xorgconf" ] ; then
    cp -f  "$xorgconf" /etc/X11/xorg.conf
fi

# Find our xinitrc
if [ -x /home/surfer/.xinitrc ] ; then
    XINITRC="/home/surfer/.xinitrc"
else
    if [ -f "$xinitrc" ] && [ -n "$xinitrc" ] ; then
        XINITRC="$xinitrc"
    else
	XINITRC="/etc/lesslinux/xinitrc"
    fi
fi

# Determine if we have to use dbus-launch
if which "$DBUS_LAUNCH" ; then
    if ps waux | grep 'dbus-daemon --config' ; then
        true
    else
        XINITRC="$DBUS_LAUNCH $XINITRC"
    fi
fi

if [ -n "$xvfb" ] ; then
    # xvfb=WIDTHxHEIGHTxDEPTH
    /usr/bin/xinit "$XINITRC" -- /usr/bin/Xvfb :0 -retro -nolisten tcp -dpi "$dpi" -screen :0 "$xvfb"
else
    # Determine if we have to use a screen section or not - do not use a screen section when KMS is detected
    if [ -c /dev/fb0 ] && cat /proc/cmdline /etc/lesslinux/cmdline /lesslinux/boot/cmdline | grep -qv ' vga=' ; then
        /usr/bin/xinit "$XINITRC" -- /usr/bin/Xorg -nolisten tcp -br -dpi "$dpi"
    elif [ -n "$xorgscreen" -a -f /etc/X11/xorg.conf ] ; then
	/usr/bin/xinit "$XINITRC" -- /usr/bin/Xorg -nolisten tcp -screen "$xorgscreen" -br -dpi "$dpi"
    else
        /usr/bin/xinit "$XINITRC" -- /usr/bin/Xorg -nolisten tcp -br -dpi "$dpi"
    fi
    if [ '!' -f /home/surfer/.lesslinux/xsetroot_successful -a -f /etc/xinitrc.d/0000-xsetroot.sh ] ; then
	if [ -c /dev/fb0 ] ; then
	    /usr/bin/xinit "$XINITRC" -- /usr/bin/Xorg -config xorg.conf.fbdev -nolisten tcp -br -dpi "$dpi"
	else
	    /usr/bin/xinit "$XINITRC" -- /usr/bin/Xorg -config xorg.conf.vesa -nolisten tcp -br -dpi "$dpi"
	fi
    fi
fi

# sleep for debugging reasons:
echo '===> Shutdown of X-Server, sleeping '"$guisleep"' seconds'
sleep $guisleep 
		
# The end	]]>
		</scriptdata>
		<scriptdata location="/static/bin/Xwrapper" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash	
		
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/static/bin:/static/sbin

## xorgscreen="default_screen"
## xorgconf="/etc/X11/xorg.conf.xorg"

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors

if [ -f /var/run/lesslinux/xorg_vars ] ; then
    . /var/run/lesslinux/xorg_vars
fi

if [ -n "$xorgconf" ] && [ -f "$xorgconf" ] ; then
    cp -f  "$xorgconf" /etc/X11/xorg.conf
fi

if [ -n "$xvfb" ] ; then
    # xvfb=WIDTHxHEIGHTxDEPTH
    exec /usr/bin/Xvfb :0 -retro -nolisten tcp -dpi "$dpi" -screen :0 "$xvfb"
else
    # Determine if we have to use a screen section or not - do not use a screen section when KMS is detected
    if [ -c /dev/fb0 ] && cat /proc/cmdline /etc/lesslinux/cmdline /lesslinux/boot/cmdline | grep -qv ' vga=' ; then
        exec /usr/bin/Xorg -nolisten tcp -br -dpi "$dpi"
    elif [ -n "$xorgscreen" -a -f /etc/X11/xorg.conf ] ; then
	exec /usr/bin/Xorg -nolisten tcp -screen "$xorgscreen" -br -dpi "$dpi"
    else
        exec /usr/bin/Xorg -nolisten tcp -br -dpi "$dpi"
    fi
    if [ '!' -f /home/surfer/.lesslinux/xsetroot_successful -a -f /etc/xinitrc.d/0000-xsetroot.sh ] ; then
	if [ -c /dev/fb0 ] ; then
	    exec /usr/bin/Xorg -config xorg.conf.fbdev -nolisten tcp -br -dpi "$dpi"
	else
	    exec /usr/bin/Xorg -config xorg.conf.vesa -nolisten tcp -br -dpi "$dpi"
	fi
    fi
fi
		
# The end	]]>
		</scriptdata>
		<scriptdata location="/static/bin/lesslinux-session" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash	
		
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/static/bin:/static/sbin

## xorgscreen="default_screen"
## xorgconf="/etc/X11/xorg.conf.xorg"

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors
		
DBUS_LAUNCH=/usr/bin/dbus-launch
## VESA_MODE=0x0117
## driver="xvesa"
## vesapref=""
## dpi=75

if [ -f /var/run/lesslinux/xorg_vars ] ; then
    . /var/run/lesslinux/xorg_vars
fi

# Remove an old indicator
rm /home/surfer/.lesslinux/xsetroot_successful
 
# Find our xinitrc
if [ -x /home/surfer/.xinitrc ] ; then
    XINITRC="/home/surfer/.xinitrc"
else
    if [ -f "$xinitrc" ] && [ -n "$xinitrc" ] ; then
        XINITRC="$xinitrc"
    else
	XINITRC="/etc/lesslinux/xinitrc"
    fi
fi

# Determine if we have to use dbus-launch
if which "$DBUS_LAUNCH" ; then
    if ps waux | grep 'dbus-daemon --config' ; then
        true
    else
        XINITRC="$DBUS_LAUNCH $XINITRC"
    fi
fi

exec $XINITRC 
		
# The end	]]>
		</scriptdata>
		<scriptdata location="/static/bin/show_placeholder" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash
		
PATH=/static/bin:/static/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams

for i in ` seq 100 ` ; do echo "" ; done
sleep 15

if mountpoint -q /usr ; then
	if [ -n "$xvnc" ] ; then
		cat /etc/lesslinux/placeholder_xvnc
	elif [ -n "$xvfb" ] ; then
		cat /etc/lesslinux/placeholder_xvnc
		echo ` ip addr show | grep inet | awk '{print $2}' | awk -F '/' '{print $1}' | grep -v '127\.0' ` 
	else
		placeholder=/etc/lesslinux/placeholder_monitor
		[ -f /etc/lesslinux/placeholder_monitor.${lang} ] && placeholder=/etc/lesslinux/placeholder_monitor.${lang}
		cat $placeholder
	fi
else
	placeholder=/etc/lesslinux/placeholder_container
	[ -f /etc/lesslinux/placeholder_container.${lang} ] && placeholder=/etc/lesslinux/placeholder_container.${lang}
	cat $placeholder
fi
echo ''
echo -n "Build ID: "
cat /etc/lesslinux/updater/version.txt
		
sleep 3600
		
		]]>
		</scriptdata>
		<scriptdata location="/etc/lesslinux/placeholder_monitor" mode="0644" group="0" owner="0">
		<![CDATA[
Screen initialization failed

If this message does not disappear in the next seconds the startup of the
graphical user interface failed. The most likely reasons for this are either
wrong manual settings or a new and unsupported chipset. You may force use
of the VESA driver. Please try the following:

 * If the testscreen appears, confirm that the settings match perfectly. You
   may alter the resolution afterwards when the desktop is fully loaded.
   
 * If no testscreen (and no configuration tool) appears, you might force 
   usage of the VESA driver with the boot menu. Please read the supplied 
   documentation on the topic "safe startup".
   
You can help enhancing LessLinux by providing information on your hardware to
hardware@lesslinux.org. Please also provide the build ID and the settings that
may have lead to a usable startup.
		]]>
		</scriptdata>
		<scriptdata location="/etc/lesslinux/placeholder_container" mode="0644" group="0" owner="0">
		<![CDATA[
System not found

An error occured: The media containing the system was not found. The most
likely reason for this are either a damaged media or an unsupported chipset.
Please try the following:

 * Burn the CD with slower speeds
 
 * Try installing on a different USB stick
 
 * On slow USB chips add the boot parameter usbwait=10 (or higher)
 
 * If this message appears when starting from CD, prepare a bootable USB stick
   on a different computer and try booting this computer from the USB stick

You can help enhancing LessLinux by providing information on your hardware to
hardware@lesslinux.org. Please also provide the build ID and the settings that
may have lead to a usable startup.
		]]>
		</scriptdata>
		<scriptdata location="/etc/lesslinux/placeholder_xvnc" mode="0644" group="0" owner="0">
		<![CDATA[
VNC access requested

It seems VNC access to this system was requested by specifying the appropriate
parameters via boot command line. Depending on the configuration you can

 * either access this system directly with VNC viewer and without specifying
   a password on port 5900
   
 * or use a SSH client to connect to this system and tunnel port 5900 to the
   machine from which you intend to connect
   
If you need to find out about the current network configuration or if you want
to start the SSHD or set the root password, please press Ctrl+Alt+F4/5 to get
access to a console.

Have fun!

Try one the following IP addresses:

]]>
		</scriptdata>
		
		<scriptdata location="/etc/lesslinux/xinitrc" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash	
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/static/bin:/static/sbin
		
. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors		
		
for i in /etc/xinitrc.d/[0-9][0-9][0-9][0-9]-*.?? ; do
	provides="` cat $i | grep '#lesslinux provides' | awk '{print $3}' `"
	if echo "$skipservices" | grep -q '|'$provides'|' ; then
		echo "Skipping $provides"
	else
		$i start
	fi
done
		
# /usr/bin/xterm &
# cp /etc/lesslinux/branding/misc/Trolltech.conf /home/surfer/.config/
# setxkbmap -rules xorg -model pc105 -layout "$xkbmap"
setxkbmap -layout "$xkbmap"

if  [ -n "$xrandr" ] ; then
	/usr/bin/xrandr --size "$xrandr"
fi
/usr/bin/xfce4-session
		
		]]>
		</scriptdata>
		<scriptdata location="/etc/lesslinux/xinitrc_remote" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash	
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/static/bin:/static/sbin
		
. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors		
	
chooser=''
rdesktop=''
remotehost=''
remoteuser=''
remotedom=''
remotequal=''
tmphost=''

for i in /etc/xinitrc.d/[0-9][0-9][0-9][0-9]-*.?? ; do
	provides="` cat $i | grep '#lesslinux provides' | awk '{print $3}' `"
	if echo "$skipservices" | grep -q '|'$provides'|' ; then
		echo "Skipping $provides"
	else
		$i start
	fi
done
	
xfsettingsd --replace

# Read boot command line for rdesktop
# Read boot command line for the chooser
# FIXME: Do proper replacement of Umlauts 
	
for i in ` cat /proc/cmdline /etc/lesslinux/cmdline /lesslinux/boot/cmdline ` ; do
      case "$i" in
	rdesktop=*)
	    rdesktop=` echo "$i" | awk -F '=' '{print $2}' `
	    remotehost=` echo $rdesktop | awk -F '|' '{print $2}' `
	    remoteuser=` echo $rdesktop | awk -F '|' '{print $3}' `
	    remotedom=` echo $rdesktop | awk -F '|' '{print $4}' `
	    remotequal=` echo $rdesktop | awk -F '|' '{print $5}' `
	    [ -z "$remotequal" ] && remotequal=2
	;;
	chooser=*)
	    chooser=` echo "$i" | awk -F '=' '{print $2}' ` 
	;;
      esac
done	

xsetroot -solid darkgray
setxkbmap -layout "$xkbmap"
esetroot -scale /etc/lesslinux/branding/desktop.jpg

# Try to download/copy the chooser configuration
if echo "$chooser" | grep -q '^file://' ; then
	file=` echo "$chooser" | sed 's%^file://%%g' `
	cp "$file" /home/surfer/.chooser.xml
elif echo "$chooser" | grep -q '^tftp://' ; then
	hostpath=` echo "$chooser" | sed 's%^tftp://%%g' | sed 's%/% %' `
	tftphost=` echo $hostpath | awk '{print $1}' `
	tftppath=` echo $hostpath | awk '{print $2}' `
	tftp -g -l /home/surfer/.chooser.xml -r "$tftppath" "$tftphost" 
elif echo "$chooser" | grep -q -E '^http://|^https://|^ftp://' ; then
	wget -T 5 --no-check-certificate -O /home/surfer/.chooser.xml "$chooser"
fi

openbox &
while true ; do
	xfsettingsd --replace
	if [ -f /home/surfer/.chooser.xml ] ; then
		ruby /usr/share/lesslinux/thinclient/chooser.rb /home/surfer/.chooser.xml
	elif [ -n "$remotehost" ] ; then
		ruby /usr/share/lesslinux/thinclient/mask.rb "$remotehost" "$remoteuser" "$remotedom" "$remotequal" 
	elif [ -x /usr/bin/remmina ] ; then
		remmina
	else
		ruby /usr/share/lesslinux/thinclient/mask.rb "" "" "" 2 
	fi
	if [ -f /home/surfer/.chooser.xml ] || zenity --question --text "Connection failed or finished. Try again?" ; then
		sleep 2
	else 
		/usr/bin/shutdown-wrapper.sh 
	fi
done
		
		]]>
		</scriptdata>
		<scriptdata location="/etc/lesslinux/xinitrc_minimal" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash	
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/static/bin:/static/sbin
		
. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors		

for i in /etc/xinitrc.d/[0-9][0-9][0-9][0-9]-*.?? ; do
	provides="` cat $i | grep '#lesslinux provides' | awk '{print $3}' `"
	if echo "$skipservices" | grep -q '|'$provides'|' ; then
		echo "Skipping $provides"
	else
		$i start
	fi
done

xsetroot -solid darkgray
setxkbmap -layout "$xkbmap"
killall -9 compton
killall -9 xcompmgr

wm2 &
terminal=/usr/bin/xterm
[ -x "$terminal" ] || terminal=/usr/bin/Terminal
"$terminal"
		
		]]>
		</scriptdata>
		<scriptdata location="/etc/lesslinux/xinitrc_xterm" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash	
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/static/bin:/static/sbin
		
. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors		

for i in /etc/xinitrc.d/[0-9][0-9][0-9][0-9]-*.?? ; do
	provides="` cat $i | grep '#lesslinux provides' | awk '{print $3}' `"
	if echo "$skipservices" | grep -q '|'$provides'|' ; then
		echo "Skipping $provides"
	else
		$i start
	fi
done

xsetroot -solid darkgray
setxkbmap -layout "$xkbmap"
killall -9 compton
killall -9 xcompmgr

terminal=/usr/bin/xterm
[ -x "$terminal" ] || terminal=/usr/bin/Terminal
"$terminal"
		
		]]>
		</scriptdata>
		<scriptdata location="/static/share/udhcpc/default.script" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash

# udhcpc script edited by Tim Riker <Tim@Rikers.org>
# modifications by Mattias Schlenker <ms@mattiasschlenker.de>

PATH=/static/bin:/static/sbin:/bin:/sbin:/usr/bin:/usr/sbin
export PATH

[ -z "$1" ] && echo "Error: should be called from udhcpc" && exit 1

RESOLV_CONF="/etc/resolv.conf"
[ -n "$broadcast" ] && BROADCAST="broadcast $broadcast"
[ -n "$subnet" ] && NETMASK="netmask $subnet"

case "$1" in
        deconfig)
                ifconfig $interface 0.0.0.0
                ;;

        renew|bound)
                ifconfig $interface $ip $BROADCAST $NETMASK

                if [ -n "$router" ] ; then
                        echo "deleting routers"
                        while route del default gw 0.0.0.0 dev $interface ; do
                                :
                        done

                        for i in $router ; do
                                route add default gw $i dev $interface
                        done
                fi

                echo -n > $RESOLV_CONF
                [ -n "$domain" ] && echo search $domain >> $RESOLV_CONF
                for i in $dns ; do
                        echo adding dns $i
                        echo nameserver $i >> $RESOLV_CONF
                done
                ;;
esac

exit 0

		]]>
		</scriptdata>
		<scriptdata location="/etc/passwd" mode="0644" group="0" owner="0">
		<![CDATA[root:x:0:0:root:/root:/bin/bash
toro:x:0:0:root:/root:/static/bin/ash
daemon:x:1:1:daemon:/usr/sbin:/bin/sh
bin:x:2:2:bin:/bin:/bin/sh
sys:x:3:3:sys:/dev:/bin/sh
surfer:x:1000:1000:Anonymous:/home/surfer:/bin/bash
messagebus:x:60000:60000:messagebus:/dev/null:/bin/false
clamav:x:60002:60002:ClamAV:/dev/null:/bin/false
haldaemon:x:60005:60005:Hal Daemon:/dev/null:/bin/false
sshd:x:60026:60026:Secure Shell Daemon:/dev/null:/bin/false
davfs2:x:60027:60027:DAVFS2 Daemon:/dev/null:/bin/false
nobody:x:65534:65534:nobody:/dev/null:/bin/false]]>
		</scriptdata>
		<scriptdata location="/etc/shadow" mode="0600" group="0" owner="0">
		<![CDATA[root:!:10933:0:99999:7:::
toro:!:10933:0:99999:7:::
surfer:!:10933:1000:99999:7:::
messagebus:!:10933:60000:99999:7:::
clamav:!:10933:60002:99999:7:::
haldaemon:!:10933:60005:99999:7:::
sshd:!:10933:60026:99999:7:::
davfs2:!:10933:60027:99999:7:::
nobody:*:16165:0:99999:7:::]]>
		</scriptdata>
		<scriptdata location="/etc/group" mode="0644" group="0" owner="0">
		<![CDATA[root:x:0:
daemon:x:1:
bin:x:2:
sys:x:3:
kmem:x:4:
tty:x:5:
tape:x:6:
floppy:x:7:
disk:x:8:
lp:x:9:
uucp:x:10:
audio:x:11:surfer
video:x:12:
utmp:x:13:
usb:x:14:
dialout:x:15:surfer
disk:x:16:
ssh:x:22:
mail:x:34:
www:x:80:
nogroup:x:99:
users:x:100:surfer
haldaemon:x:101:
halusers:x:102:surfer
surfer:x:1000:surfer
clamav:x:60002:
cdrom:x:60008:surfer
davfs2:x:60027:davfs2]]>
		</scriptdata>
		<scriptdata location="/etc/rc.templates/shadow" mode="0644" group="0" owner="0">
		<![CDATA[root:%ROOTHASH%:10933:0:99999:7:::
toro:%ROOTHASH%:10933:0:99999:7:::
surfer:%USERHASH%:10933:1000:99999:7:::
messagebus:!:10933:60000:99999:7:::
clamav:!:10933:60002:99999:7:::
haldaemon:!:10933:60005:99999:7:::
sshd:!:10933:60026:99999:7:::
davfs2:!:10933:60027:99999:7:::
nobody:*:16165:0:99999:7:::]]>
		</scriptdata>
		<!--<scriptdata location="/etc/inittab" mode="0644" group="0" owner="0">
		<![CDATA[::sysinit:/etc/rc
tty1::respawn:/static/sbin/getty -l /static/bin/login 38400 tty1
tty2::respawn:/static/sbin/getty -l /static/bin/login 38400 tty2
tty3::respawn:/static/sbin/getty -l /static/bin/login 38400 tty3
tty4::respawn:/static/bin/ash
tty5::askfirst:/static/bin/ash
tty6::respawn:/static/bin/x_user_start
::ctrlaltdel:/static/sbin/reboot
::shutdown:/etc/rc.shutdown]]>
		</scriptdata>-->
		<scriptdata location="/etc/inittab" mode="0644" group="0" owner="0">
		<![CDATA[::sysinit:/etc/rc
tty1::respawn:/static/bin/show_placeholder
tty2::respawn:/static/sbin/getty -l /static/bin/login 38400 tty2
tty3::respawn:/static/sbin/getty -l /static/bin/login 38400 tty3
tty4::askfirst:/static/bin/ash
tty5::askfirst:/usr/bin/bash
tty6::respawn:/static/bin/x_user_start
serialconsole::askfirst:/static/bin/ash
::ctrlaltdel:/static/sbin/reboot
::shutdown:/etc/rc.shutdown]]>
		</scriptdata>
		<scriptdata location="/etc/rc" mode="0744" group="0" owner="0">
		<![CDATA[#!/static/bin/ash

PATH=/static/bin:/static/sbin:/bin:/sbin:/usr/bin:/usr/sbin
export PATH

if [ '!' -L /proc/mounts ] ; then
    mount -t proc none /proc > /dev/null 2>&1
fi
ln -sf /proc/mounts /etc/mtab
touch /etc/fstab
mountpoint -q /dev     || mount -t devtmpfs devtmpfs /dev
mkdir /dev/pts
mkdir /dev/shm
mkdir /dev/mapper
mkdir -p /var/log/lesslinux/bootlog 
mountpoint -q /proc    || mount -t proc none /proc
mountpoint -q /sys     || mount -t sysfs sysfs /sys
mountpoint -q /dev/pts || mount -t devpts -o rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000 devpts /dev/pts
mountpoint -q /dev/shm || mount -t tmpfs devshm /dev/shm
if [ -d /sys/firmware/efi/efivars ] ; then
	mountpoint -q /sys/firmware/efi/efivars || mount -t efivarfs -o rw,nosuid,nodev,noexec,relatime efivarfs /sys/firmware/efi/efivars
fi

# set this to prevent faults if not set in /etc/rc.defaults
ultraquiet=0

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors
. /etc/rc.lang/en/messages.sh
[ -f "/etc/rc.lang/$lang/messages.sh" ] && . /etc/rc.lang/$lang/messages.sh
. /etc/lesslinux/branding/branding.en.sh
[ -f "/etc/lesslinux/branding/branding.${lang}.sh" ] && . /etc/lesslinux/branding/branding.${lang}.sh

### Function for showing the progess bar:

showpgbar() {
	fraction=$1
	total=$2
	serv=$3
	termdims=` /static/bin/stty -F /dev/tty1 size ` 
	cols=` echo $termdims | awk '{print $2}' `
	rows=` echo $termdims | awk '{print $1}' `
	[ -z "$cols" -o "$cols" = 0 ] && cols=80
	[ -z "$rows" -o "$rows" = 0 ] && rows=24
	# Move cursor to top left - clear screen
	printf '\33[2J' > /dev/tty1
	# Move cursor down
	sline=` expr  '(' $rows -  2 ')' / 2 ` 
	scol=` expr '(' $cols - $total ')' / 2 ` 
	# Print Start text
	printf '\33[0m' > /dev/tty1
	printf '\33['$sline';'$scol'H'"${bold}${brandlong}${normal}" > /dev/tty1 
	printf '\33['` expr $sline + 1 `';'$scol'H' > /dev/tty1
	# Set color 
	printf '\33['$pgcolor'm' > /dev/tty1
	# Inverse color for blocks
	printf '\33[7m' > /dev/tty1
	for n in ` seq 1 $fraction ` ; do printf ' ' > /dev/tty1 ; done
	tend=` expr $total - 1 ` 
	printf '\33[0;7m' > /dev/tty1
	for n in ` seq $fraction $tend ` ;  do printf ' ' > /dev/tty1 ; done
	printf '\33[0m' > /dev/tty1
	[ -n "$serv" ] && printf '\33['` expr $sline + 2 `';'$scol'H'"Starting ${serv}${normal}" > /dev/tty1 
	# Move cursor out of way, clean up
	printf '\33['` expr $rows - 1 `';0H' > /dev/tty1
	printf '\33[0m' > /dev/tty1
}

### Function for showing graphical progress bar

showsplash() {
    fraction=$1
    total=$2
    serv=$3
    if [ '!' -p /splash.fifo ] ; then
	colordepth=` fbset | grep geometry | awk '{print $6}' `
	if [ 1${colordepth} -gt 115 ] ; then
		# disable the cursor
		# echo -n -e '\e[?17;14;224c' > /dev/tty1
		echo -n -e '\e[?25l' > /dev/tty8
		chvt 8
		# create a fifo
		mkfifo /splash.fifo
		# Write config
		fbwidth=` fbset | grep '^mode' | awk -F '["x-]' '{print $2}' `
		fbheight=` fbset | grep '^mode' | awk -F '["x-]' '{print $3}' `
		/etc/rc.subr/write_fbsplash_config $fbwidth $fbheight 
		fbsplash -i /etc/lesslinux/fbsplash.cfg -s /etc/lesslinux/branding/fbsplash/splash.ppm -f /splash.fifo &
	fi
    fi
    if [ -p /splash.fifo ] ; then
	expr ${fraction}00 / ${total} > /splash.fifo
	if [ -f /etc/lesslinux/fbsplash_icon.cfg -a -f  /etc/lesslinux/branding/fbsplash/i_${serv}.ppm ] ; then
		fbsplash -i /etc/lesslinux/fbsplash_icon.cfg -s /etc/lesslinux/branding/fbsplash/i_${serv}.ppm 
	elif [ -f /etc/lesslinux/fbsplash_icon.cfg -a -f  /etc/lesslinux/branding/fbsplash/i_gears.ppm ] ; then
		fbsplash -i /etc/lesslinux/fbsplash_icon.cfg -s /etc/lesslinux/branding/fbsplash/i_gears.ppm 
	fi
	if [ -f /etc/lesslinux/branding/fbsplash/textblank.ppm -a -f  /etc/lesslinux/fbsplash_text.cfg ] ; then
		fbsplash -i /etc/lesslinux/fbsplash_text.cfg -s /etc/lesslinux/branding/fbsplash/textblank.ppm
	fi
    fi
}

### FIXME: Change RAM message according to settings for fbsplash!
### In this build when fbsplash and different console is selected
### nothing will be shown, the computer will just shutdown!

memtotal=` cat /proc/meminfo | grep MemTotal | awk '{print $2}' `
memtotalmb=` expr $memtotal / 1024 `

printf "${bold}${starting_up} ${brandlong} ${normal}\n\n"
if [ "$ultraquiet" -lt 1 ] ; then
    printf "${bold}Starting with Linux kernel: ${normal}" ; uname -r 
    printf "${bold}Build ID:                   ${normal}" ; cat /etc/lesslinux/updater/version.txt
    printf "${bold}RAM:                        ${normal}" ; echo $memtotalmb ; printf "\n"
fi
[ "$ultraquiet" -gt 0 ] && dmesg -n1

if [ -n "$memtotal" -a "$memtotalmb" -lt "$minram" ] ; then
	printf "${bold}${ram_too_low_hard}${normal}"
	echo '#!/static/bin/ash' > /etc/rc.shutdown
	chmod 0755 /etc/rc.shutdown
	sleep 15
	poweroff
elif [ -n "$memtotal" -a "$memtotalmb" -lt "$lowram" ] ; then
	printf "${bold}${ram_too_low_soft}${normal}\n"
	sleep 5
fi

####
scriptcount=0 
scripttotal=` ls /etc/rc.d/[0-9][0-9][0-9][0-9]-*.?? | wc -l ` 
[ "$console" = tty2 -a "$ultraquiet" -gt 1 ] && showpgbar 0 $scripttotal 

for i in /etc/rc.d/[0-9][0-9][0-9][0-9]-*.?? ; do
        provides="` cat $i | grep '#lesslinux provides' | awk '{print $3}' `"
        patience="` cat $i | grep '#lesslinux patience' | awk '{print $2}' `"
        verbose="` cat $i  | grep '#lesslinux verbose'  | awk '{print $2}' `"
        debuglev="` cat $i | grep '#lesslinux debug'    | awk '{print $3}' `"
	parallel="` cat $i  | grep '#lesslinux parallel'  | awk '{print $2}' `"
        [ -z "$provides" ] && provides="$i"
	touch /var/log/lesslinux/bootlog/${provides}.start
	if echo "$skipservices" | grep '|'$provides'|' > /dev/null 2>&1 ; then 
	    [ "$ultraquiet" -gt 0 ] || printf "$bold---> Skipping $provides \n" 
	elif [ -n "$debuglev" ] && [ "$debug_threshold" -gt "$debuglev" ] ; then
	    printf "\n$bold===> Running debug script \n" 
	    $i start
	elif [ -f /var/run/lesslinux/boot_failed ] ; then
	    printf "$bold---> Skipping $provides - prerequisites failed\n" 
	elif [ -z "$debuglev" ] ; then
	    [ "$ultraquiet" -eq 3 ] && showsplash $scriptcount $scripttotal $provides
	    [ "$ultraquiet" -gt 1 ] && showpgbar $scriptcount $scripttotal $provides
	    [ "$ultraquiet" -eq 1 ] && printf "[${bold}${provides}${normal}] "
	    if [ -f "/etc/rc.confd/$provides.$hwenv.modules" ] ; then
		[ "$ultraquiet" -gt 0 ] && \
		    /etc/rc.subr/loadmodules.sh "/etc/rc.confd/$provides.$hwenv.modules" > /dev/null 2>&1 || \
		    /etc/rc.subr/loadmodules.sh "/etc/rc.confd/$provides.$hwenv.modules"
	    elif [ -f "/etc/rc.confd/$provides.default.modules" ] ; then
		[ "$ultraquiet" -gt 0 ] && \
		    /etc/rc.subr/loadmodules.sh "/etc/rc.confd/$provides.default.modules" > /dev/null 2>&1 || \
		    /etc/rc.subr/loadmodules.sh "/etc/rc.confd/$provides.default.modules"
	    fi
	    [ "$ultraquiet" = 1 ] && [ -n "$patience" ] && printf "\n${bold}${be_patient}${normal}\n"
	    if [ "$ultraquiet" -gt 0 ] ; then
		[ -z "$parallel" ] && $i start > /dev/null 2>&1
		[ -n "$parallel" ] && $i start > /dev/null 2>&1 &
	    else
		[ -z "$parallel" ] && $i start
		[ -n "$parallel" ] && $i start & 
	    fi
	fi
	scriptcount=` expr $scriptcount + 1 `
	if [ "$$" = 1 ] ; then
	    if mountpoint -q /newroot ; then
		if [ "$ultraquiet" -lt 2 ] ; then
		    printf "\n$bold===> Trying to switch Root FS \n"
	        fi
	        [ -z "$switchinit" ] && switchinit="/sbin/init" 
	        exec switch_root /newroot "$switchinit"  
	    fi
	    echo "Failed to switch_root, dropping to a shell"
	    exec /static/bin/ash 
	fi
	[ -z "$parallel" ] && touch /var/log/lesslinux/bootlog/${provides}.done
done
####

# Softlink /dev/hvc0 so that there is no constant respawning on Console 0
rm /dev/serialconsole
hv=""
[ -f /sys/hypervisor/type ] && hv=` cat /sys/hypervisor/type `
if [ "$hv" '=' "xen" ] ; then
	ln -s /dev/hvc0 /dev/serialconsole
else
	if [ -c /dev/ttyS0 ] ; then
		ln -s /dev/ttyS0 /dev/serialconsole
	else
		ln -s /dev/tty8 /dev/serialconsole
	fi
fi

# Running local startup script -- containers and encrypted home should be available right now:
if [ -f "/etc/rc.local" ] ; then
	printf "\n${bold}===> Running local startup scripts from /etc/rc.local ${normal}\n"
	/etc/rc.local
fi
printf "$normal\n"

# Exit the splash and remove the fifo:
if [ -p /splash.fifo ] ; then
	echo "exit" > /splash.fifo
	rm /splash.fifo
	# re-enable the cursor...
	echo -n -e '\e[?25h' > /dev/tty8
	chvt 1
fi

#		]]>
		</scriptdata>
		<scriptdata location="/etc/rc.shutdown" mode="0744" group="0" owner="0">
		<![CDATA[#!/static/bin/ash
		
PATH=/static/bin:/static/sbin:/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin:/usr/local/sbin
export PATH

# set this to prevent faults if not set in /etc/rc.defaults
ultraquiet=0

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors
. /etc/rc.lang/en/messages.sh
[ -f "/etc/rc.lang/$lang/messages.sh" ] && . /etc/rc.lang/$lang/messages.sh
. /etc/lesslinux/branding/branding.en.sh
[ -f "/etc/lesslinux/branding/branding.${lang}.sh" ] && . /etc/lesslinux/branding/branding.${lang}.sh
. /etc/rc.subr/progressbar

[ "$console" = tty2 ] && chvt 2 
[ "$ultraquiet" -gt 1 ] && chvt 1 
[ "$ultraquiet" -eq 3 ] && fbset && chvt 8 

# define some common functions

free_loop() {
    for i in /dev/loop[0-9]* ; do
	losetup -d "$i" > /dev/null 2>&1
    done
}

# Progressbar for shutdown 

showpgbar() {
	fraction=$1
	total=$2
	serv=$3
	termdims=` /static/bin/stty -F /dev/tty1 size ` 
	cols=` echo $termdims | awk '{print $2}' `
	rows=` echo $termdims | awk '{print $1}' `
	[ -z "$cols" -o "$cols" = 0 ] && cols=80
	[ -z "$rows" -o "$rows" = 0 ] && rows=24
	# Move cursor to top left - clear screen
	printf '\33[2J' > /dev/tty1
	# Move cursor down
	sline=` expr  '(' $rows -  2 ')' / 2 ` 
	scol=` expr '(' $cols - $total ')' / 2 ` 
	# Print Start text
	printf '\33[0m' > /dev/tty1
	printf '\33['$sline';'$scol'H'"${bold}${brandlong}${normal}" > /dev/tty1 
	printf '\33['` expr $sline + 1 `';'$scol'H' > /dev/tty1
	# Set color 
	printf '\33[0;7m' > /dev/tty1
	for n in ` seq 1 $fraction ` ; do printf ' ' > /dev/tty1 ; done
	# Inverse color for blocks
	printf '\33['$pgcolor'm' > /dev/tty1
	for n in ` seq $fraction $total ` ;  do printf ' ' > /dev/tty1 ; done
	printf '\33[0m' > /dev/tty1
	[ -n "$serv" ] && printf '\33['` expr $sline + 2 `';'$scol'H'"Stopping ${serv}${normal}" > /dev/tty1 
	# Move cursor out of way, clean up
	printf '\33['` expr $rows - 1 `';0H' > /dev/tty1
	printf '\33[0m' > /dev/tty1
}

# Graphical progressbar for shutdown

showsplash() {
    fraction=$1
    total=$2
    serv=$3
    if [ '!' -p /splash.fifo ] ; then
	if fbset ; then
		# disable the cursor
		# echo -n -e '\e[?17;14;224c' > /dev/tty1
		echo -n -e '\e[?25l' > /dev/tty8
		# create a fifo
		mkfifo /splash.fifo
		# Write config
		fbwidth=` fbset | grep '^mode' | awk -F '["x-]' '{print $2}' `
		fbheight=` fbset | grep '^mode' | awk -F '["x-]' '{print $3}' `
		/etc/rc.subr/write_fbsplash_config $fbwidth $fbheight 
		bgfile=/etc/lesslinux/branding/fbsplash/splash.ppm
		[ -f /etc/lesslinux/branding/fbsplash/shutdown.ppm ] && bgfile=/etc/lesslinux/branding/fbsplash/shutdown.ppm
		fbsplash -i /etc/lesslinux/fbsplash.cfg -s $bgfile -f /splash.fifo &
	fi
    fi
     if [ -p /splash.fifo ] ; then
	expr ${fraction}00 / ${total} > /splash.fifo
	if [ -f /etc/lesslinux/fbsplash_icon.cfg -a -f  /etc/lesslinux/branding/fbsplash/i_${serv}.ppm ] ; then
		fbsplash -i /etc/lesslinux/fbsplash_icon.cfg -s /etc/lesslinux/branding/fbsplash/i_${serv}.ppm 
	elif [ -f /etc/lesslinux/fbsplash_icon.cfg -a -f  /etc/lesslinux/branding/fbsplash/i_gears.ppm ] ; then
		fbsplash -i /etc/lesslinux/fbsplash_icon.cfg -s /etc/lesslinux/branding/fbsplash/i_gears.ppm 
	fi
    fi 
}

####
scriptcount=0 
scripttotal=` ls /etc/rc.d/[0-9][0-9][0-9][0-9]-*.?? | wc -l ` 
[ "$console" = tty2 -a "$ultraquiet" -eq 2 ] && showpgbar 0 $scripttotal 

# Clear the terminal with empty newlines
for i in ` seq 50 ` ; do
	echo ""
	echo "" > /dev/tty1
done

if ls /dev/mapper/lesslinux_crypt > /dev/null 2>&1 ; then
    [ "$ultraquiet" -gt 0 ] || printf "$bold---> Saving some settings $normal\n" 
    cat /etc/lesslinux/overlay_save | while read filename
	do
	    case $filename in
		'#'*|'')
		    true
		;;
		*)
		    test -f "$filename" && tar -C / -cf - "$filename" 2>/dev/null | tar -C /home/.overlay -xf - 2>/dev/null
		;;
	    esac
	done
fi

printf "${bold}${stop_remaining}${normal}\n"
[ "$ultraquiet" -gt 1 ] && clearscreen
[ "$ultraquiet" -eq 2 ] && centertext 34 1 "${stop_remaining}"

[ "$ultraquiet" -gt 0 ] || printf "$bold---> Running rc scripts in reverse order $normal\n" 

for i in ` ls /etc/rc.d/[0-9][0-9][0-9][0-9]-*.?? | tac `
do
    provides="` cat $i | grep '#lesslinux provides' | awk '{print $3}' `"
    if [ -z "$provides" ] ; then
        [ "$ultraquiet" -gt 0 ] && $i stop > /dev/null 2>&1
	[ "$ultraquiet" -gt 0 ] || $i stop
    else
        if echo "$skipservices" | grep '|'$provides'|' > /dev/null 2>&1 ; then 
	    [ "$ultraquiet" -gt 0 ] || printf "$bold---> Skipping $provides \n" 
        else
	    [ "$ultraquiet" -eq 2 ] && showpgbar $scriptcount $scripttotal $provides
	    [ "$ultraquiet" -eq 3 ] && showsplash $scriptcount $scripttotal $provides
	    [ "$ultraquiet" -gt 0 ] && $i stop > /dev/null 2>&1
	    [ "$ultraquiet" -gt 0 ] || $i stop
        fi
    fi
    scriptcount=` expr $scriptcount + 1 `
done

[ "$ultraquiet" -eq 2 ] && chvt 1

# first find and unmount all fuseblk devices
fuseblks=` cat /proc/mounts | grep ' fuseblk ' | awk '{print $2}' ` 
for i in 1 2 3 ; do
    for j in $fuseblks ; do
	# We have to use explicitely umount from the "real" coreutils
	# since busybox' umount does not understand how to unmount
	# fuseblk- or bind-mounts
	/bin/umount "$j"
	free_loop
    done
done

# finding and closing cryptdevices
if [ -d "/dev/mapper" ] ; then 
    for i in 1 2 3 4 5 6 ; do
	for j in /dev/mapper/* ; do
		if [ "$j" '!=' "/dev/mapper/control" ] ; then
			mountpoint=` mount | grep $j | awk '{print $3}' `
			[ "$i" -lt 4 ] && mountpoint -q "$mountpoint" && fuser -km "$mountpoint" > /dev/null 2>&1
			[ "$i" -gt 3 ] && mountpoint -q "$mountpoint" && fuser -km -9 "$mountpoint" > /dev/null 2>&1
			umount "$j" > /dev/null 2>&1
			cryptsetup luksClose "$j" > /dev/null 2>&1
		fi
	done
    done
fi

# Free some loop devices not used anymore
free_loop

# After freeing loop devices we might do one round of unmounting
mntpnts=` mount | grep '^/' | awk '{print $3}' `
for i in $mntpnts ; do
    umount $i > /dev/null 2>&1
done

# Free some loop devices not used anymore
free_loop

boot_device=` cat /var/run/lesslinux/install_source `

# Now forcibly kill all processes residing in mountpoints of our loop devices
# remember to unmount subdirectories!
lomntpnts=` mount | grep '^/dev/loop' | awk '{print $3}'` 
for i in $lomntpnts ; do
	mntsubdirs=` mount | awk '{print $3}' | grep '^'$i | sort -r `
	for j in $mntsubdirs ; do
		umount $j > /dev/null 2>&1
		mountpoint -q $j && fuser -km -9 $j > /dev/null 2>&1
		umount $j > /dev/null 2>&1
	done
done

# Free some loop devices not used anymore
free_loop

# Now get weird, seven rounds of killing and umounting everything
for n in 0 1 2 3 4 5 6 ; do
    mntpnts=` mount | grep -E '^/|^tmpfs' | awk '{print $3}' ` 
    for i in $mntpnts ; do
	mntsubdirs=` mount | awk '{print $3}' | grep '^'$i | sort -r `
	for j in $mntsubdirs ; do
	    mountpoint -q $j && fuser -km -9 $j > /dev/null 2>&1
	    umount $j > /dev/null 2>&1
	    umount_retval="$?"
	    if [ "$j" = "/lesslinux/cdrom" ] ; then
		cat /proc/cmdline /etc/lesslinux/cmdline /lesslinux/boot/cmdline | grep -q noeject || [ -f /var/run/lesslinux/shutdown_requested_reboot ] || ( [ "$umount_retval" -lt 1 ] && eject -s "$boot_device" ) 
	    fi
	done
	free_loop
	sleep 1 
    done
done

[ "$ultraquiet" -gt 0 ] || printf "$bold---> Still mounted $normal \n"
[ "$ultraquiet" -gt 0 ] || cat /proc/mounts

# debug
# sleep 60

for i in ` seq 60 ` ; do
    [ "$ultraquiet" -gt 0 ] && printf "\n"
done

if grep -q 'bootdevice=/dev/sr' /var/run/lesslinux/startup_vars ; then
	shutdown_seconds=10
	if grep -q 'toram=true' /var/run/lesslinux/startup_vars ; then
	    shutdown_seconds=0
	fi
else
	shutdown_seconds=0
fi
if [ -f /var/run/lesslinux/shutdown_seconds ] ; then
	shutdown_seconds=` cat /var/run/lesslinux/shutdown_seconds ` 
fi
if [ -f /var/run/lesslinux/shutdown_requested_reboot ] ; then
	shutdown_seconds=0
fi

[ "$ultraquiet" -gt 1 ] && chvt 1
# [ "$ultraquiet" -eq 3 ] && fbset && chvt 8 
shutdown_msg=` echo $shut_down_in | sed 's/COUNT/'$shutdown_seconds'/g' ` 
printf "\n${bold}${shutdown_msg}${normal}\n\n"
[ "$ultraquiet" -gt 1 ] && clearscreen tty1
[ "$ultraquiet" -gt 1 ] && centertext 34 1 "${shutdown_msg}" tty1
sleep $shutdown_seconds
printf "\n${bold}${shut_down_now}${normal}\n\n"
[ "$ultraquiet" -gt 1 ] && clearscreen tty1
[ "$ultraquiet" -gt 1 ] && centertext 34 1 "${shut_down_now}" tty1 

# THE END		]]>
		</scriptdata>
		<scriptdata location="/etc/rc.lang/en/messages.sh" mode="0755" group="0" owner="0">
		<![CDATA[
		
starting_up="Starting up"
be_patient="Please be patient..."
stop_remaining="Stopping remaining processes..."
shut_down_in="The computer will be shut down in COUNT seconds."
shut_down_now="Shutting down."
updater_ready_question="Before updating $brandlong make sure that a connection to the internet exists.\n\nAre you ready to search for updates?"
updater_download_failed="The updates could not be downloaded"'!'
updater_signature_failed="The signature check of the update script failed"'!'
ram_too_low_hard='Your computer does not enough RAM to run this system. '$minram' MB required.\nThe computer will shut down in 15 seconds.\n'
ram_too_low_soft='Your computer has low memory. Not all functions of this system might work.\n'$lowram' MB are recommended. The startup will be continued in 5 seconds.\n'

convert_head='Converting drive layout - please be patient'
convert_prepare='Preparing conversion'
convert_move='Moving ISO'
convert_mkfs='Creating filesystems'
convert_efi='Writing EFI boot partition'
convert_bios='Writing BIOS boot partition' 
convert_home='Creating container for /home' 
convert_check='Checking boot media...'
convert_failed='Media check failed. Refusing to boot. Press return to shut down.'
convert_error='ERROR WRITING BLOCK'
check_head='Checking start media...'
check_boot='Checking boot files'
check_squash='Checking SQUASHFS containers'
copying_toram='Copying system image to main memory'

		]]>
		</scriptdata>
		<scriptdata location="/etc/rc.lang/de/messages.sh" mode="0755" group="0" owner="0">
		<![CDATA[
		
starting_up="Systemstart von"
be_patient="Bitte etwas Geduld..."
stop_remaining="Stoppe verbleibende Prozesse..."
shut_down_in="Der Computer wird in COUNT Sekunden abgeschaltet."
shut_down_now="Schalte ab."
updater_ready_question="Bevor Sie $brandlong aktualisieren stellen Sie sicher, dass eine Internetverbindung hergestellt ist.\n\nSind Sie bereit fÃ¼r die Suche nach Updates"'?'
updater_download_failed="Es wurden keine Aktualisierungen gefunden"'!'
updater_signature_failed="Das SignaturprÃ¼fung des Update-Scriptes ist fehlgeschlagen"'!'
ram_too_low_hard='Ihr Computer verfuegt nicht ueber genuegend Arbeitsspeicher.\n'$minram' MB sind das Minimum. Herunterfahren in 15 Sekunden.\n'
ram_too_low_soft='Ihr Computer verfuegt ueber wenig Arbeitsspeicher ('$lowram' MB empfohlen).\nEs werden nicht alle Funktionen bereitstehen.\nDer Start wird in 5 Sekunden fortgesetzt.\n'

convert_head='Konvertiere USB-Laufwerk - bitte haben Sie Geduld'
convert_prepare='Vorbereitung'
convert_move='Verschiebe ISO-Dateisystem'
convert_mkfs='Erstelle Dateisysteme'
convert_efi='Schreibe EFI Bootpartition'
convert_bios='Schreibe BIOS Bootpartition' 
convert_home='Erstelle Container fuer /home' 
convert_check='Pruefe Startmedium...'
convert_failed='Mediencheck fehlgeschlagen. Druecken Sie die Eingabetaste um herunterzufahren.'
convert_error='SCHREIBFEHLER BEI BLOCK'
check_head='Pruefe Startmedium...'
check_boot='...Bootdateien'
check_squash='...SQUASHFS-Container'
copying_toram='Kopiere System in den Arbeitsspeicher'

		]]>
		</scriptdata>
		<scriptdata location="/etc/rc.lang/ru/messages.sh" mode="0755" group="0" owner="0">
		<![CDATA[
		
# starting_up="ÐÐ°Ð³ÑÑÐ·ÐºÐ°..."
# be_patient="ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, Ð¿Ð¾Ð´Ð¾Ð¶Ð´Ð¸ÑÐµ..."
# stop_remaining="ÐÑÑÐ°Ð½Ð¾Ð²ÐºÐ° Ð¾ÑÑÐ°Ð»ÑÐ½ÑÑ Ð¿ÑÐ¾ÑÐµÑÑÐ¾Ð²..."
# shut_down_in="ÐÐ¾Ð¼Ð¿ÑÑÑÐµÑ Ð±ÑÐ´ÐµÑ Ð¿ÐµÑÐµÐ·Ð°Ð³ÑÑÐ¶ÐµÐ½ ÑÐµÑÐµÐ· COUNT ÑÐµÐºÑÐ½Ð´."
# shut_down_now="ÐÐµÑÐµÐ·Ð°Ð³ÑÑÐ·ÐºÐ°."

updater_ready_question="ÐÐµÑÐµÐ´ Ð¾Ð±Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸ÐµÐ¼ $brandlong ÑÐ±ÐµÐ´Ð¸ÑÐµÑÑ, ÑÑÐ¾ Ð²Ð°Ñ ÐºÐ¾Ð¼Ð¿ÑÑÑÐµÑ Ð¿Ð¾Ð´ÐºÐ»ÑÑÐµÐ½ Ðº ÐÐ½ÑÐµÑÐ½ÐµÑÑ.\n\nAre ÐÑÐ¸ÑÑÑÐ¿Ð¸ÑÑ Ðº Ð¿Ð¾Ð¸ÑÐºÑ Ð¾Ð±Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸Ð¹?"
updater_download_failed="ÐÐ±Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸Ñ Ð½Ðµ Ð±ÑÐ»Ð¸ Ð·Ð°Ð³ÑÑÐ¶ÐµÐ½Ñ"'!'
updater_signature_failed="ÐÐ±Ð½Ð°ÑÑÐ¶ÐµÐ½Ð° Ð¾ÑÐ¸Ð±ÐºÐ° Ð¿ÑÐ¸ Ð¿ÑÐ¾Ð²ÐµÑÐºÐµ ÑÐ¸Ð³Ð½Ð°ÑÑÑ"'!'
		
starting_up="Starting up"
be_patient="Please be patient..."
stop_remaining="Stopping remaining processes..."
shut_down_in="The computer will be shut down in COUNT seconds."
shut_down_now="Shutting down."

		]]>
		</scriptdata>
		<scriptdata location="/etc/rc.lang/es/messages.sh" mode="0755" group="0" owner="0">
		<![CDATA[
		
starting_up="Iniciando"
be_patient="Por favor, espera..."
stop_remaining="El proceso sigue detenido..."
shut_down_in="El ordenador se apagarÃ¡ en COUNT segundos."
shut_down_now="Apagando."
updater_ready_question="Antes de actualizar $brandlong asegÃºrate de estar conectado a Internet.\n\nÂ¿EstÃ¡s listo para buscar actualizaciones?"
updater_download_failed="No se pueden descargar las actualizaciones"'!'
updater_signature_failed="Se ha producido un error en la comprobaciÃ³n de la firma para la actualizaciÃ³n"'!'

		]]>
		</scriptdata>
		<scriptdata location="/etc/rc.lang/pl/messages.sh" mode="0755" group="0" owner="0">
		<![CDATA[
		
starting_up="Start systemu"
be_patient="Czekaj cierpliwie..."
stop_remaining="Zatrzymywanie procesow..."
shut_down_in="Komputer zostanie wylaczony za COUNT sekund."
shut_down_now="Wylaczanie."
updater_ready_question="Zanim uruchomisz aktualizacjÄ $brandlong upewnij siÄ, Å¼e masz poÅÄczenie z internetem.\n\nCzy chcesz uruchomiÄ aktualizacjÄ teraz?"
updater_download_failed="Niepowodzenie pobierania aktualizacji"'!'
updater_signature_failed="BÅÄd podpisu skryptu aktualizacji"'!'

		]]>
		</scriptdata>
		<scriptdata location="/etc/rc.lang/en/welcome.msg" mode="0755" group="0" owner="0">
		<![CDATA[printf "$bold \n"
printf "$bold WELCOME TO LESSLINUX -- a distribution aimed to be light, embeddable, small\n"
printf "$bold and scalable. Please note: this release is still alpha software. If you are\n"
printf "$bold interested in the project take a look at: www.LESSLINUX.com\n"
printf "\n"
printf "$bold Running scripts in /etc/rc.d\n"]]>
		</scriptdata>
		<scriptdata location="/etc/rc.lang/de/welcome.msg" mode="0755" group="0" owner="0">
		<![CDATA[printf "$bold \n"
printf "$bold WILLKOMMEN BEI LESSLINUX -- a distribution aimed to be light, embeddable, small\n"
printf "$bold and scalable. Please note: this release is still alpha software. If you are\n"
printf "$bold interested in the project take a look at: www.LESSLINUX.com\n"
printf "\n"
printf "$bold Running scripts in /etc/rc.d\n"]]>
		</scriptdata>
		<scriptdata location="/etc/rc.defaults" mode="0755" group="0" owner="0">
		<![CDATA[# set some defaults...

# Network
console=tty0                            # console used to determine if we should show nice graphics 
nonet='0'				# skip networking, should be removed
staticnet='|eth0|192.168.1.123|255.255.255.0|192.168.1.252|192.168.1.252|'
dhcpwait=5				# Seconds to wait for DHCP in earlynet
hostname='lesslinux.test'		# hostname to display 
dhcp='1'				# use dhcp or static settings in earlynet script
regdom=''				# regulatory domain for WIFI

loadmodules=''				# list of modules to load very early in the boot process
defermods='|drivers/net/wireless|sound|' #
					# was |drivers/net/wireless|drivers/gpu/drm|sound|drivers/net/ethernet|
					# specify module directories to be loaded later by udev
hwenv='default'				# influences the behaviour for loading modules
searchiso=''				# search content directories only on ISOs with the given ISOID and count of bytes
					# searchiso=isoid
					# searchiso='' ignore
offsetptable=0				# use an offsetted partition table after the ISO image 
contdir="lesslinux"			# name of the content directory to search for 
skipntfs=0				# Skip ISOs on NTFS completely
ntfsrw=0				# Access NTFS read-write with ntfs-3g? Useful for containers on NTFS.
dropbearport=22222			# port to run dropbear
xmode=""				# WTF?
toram=0					# 0 newer copy to ram, 1 always copy to ram, ram threshold in kB else
optram=0				# Only copy toram on optical devices
usbwait=4				# how many 5s intervals to wait for usb upon startup
usbsettle=0				# hard usb settle time in seconds
skipcheck=0				# 2: always skip check of SHA1SUMs of boot files and containers
					# 1: skipcheck upon normal startup, but check when converting a thumb drive
					# 0: always check
hwmode=ro				# mount USB stick in rw or ro mode
hwid=unknown				# hardware identifier for protocols
sysloglevel=8				# loglevel for syslogd
lang=de					# default language
halt=poweroff				# halt or poweroff on shutdown?
ultraquiet=0				# 1: less messages - do not use together with fbsplash
					# 2: show a nice progressbar 
tmpsize=0				# dynamic /tmp mem minus 1024MB if mem > 2048, half mem else
homesize=512				# not dynamic yet
rootsize=16     			# not dynamic yet
blobsize=0                              # size of blob partition to create
swapsize=0				# size of swap partition to create
swap=''					# swap UUID or 'none'
minram=256      			# the absoulute minimum, if the RAM found is lower, system is shut down
lowram=768	   			# the recommended minimum, if RAM found is lower, a message is shown
					# cheatcode is different! ram=|256|512|
security=none				# security model to use, currently 'smack' and 'none' are supported
allowsudosu=0				# allow any user to execute 'sudo su', basically for debugging
laxsudo=0				# do not ask for passwords upon mounting disks
debug_threshold=0
ejectcdonumass=0			# Eject CD if mountumass was successful
ejectcd=1				# Eject CD after copying to RAM or shutting down
skipsearch=""				# Define which media types to skip
dpi=75					# Default DPI for X11
guisleep=1                              # Default time to wait between GUI restarts
simulate=''				# Simulate certain conditions
uuid='all' 				# UUID to search system on
tz=''					# default timezone
homepage=''				# default homepage
printers=''				# printers=|usblp0|usblp1| makes lpd start - queue names = device names
pgcolor='32'				# default color for progress bar 31=red, 32=green, 33=yellow, 34=blue
					# 35=magenta, 36=cyan, 37=white - defaults to green

# Start via network:
wgetiso=''
wgetsize=0				# Size of the tmpfs in kB where the ISO will be stored
nfs=''
cifs=''

# Settings for VNC access / Xvfb virtual framebuffer
xvnc=''
xvfb=''

# Automatically connect to wireless networks
wlan=''

# Use a special xinitrc
xinitrc=''

# Settings for home container
# Specify as homecont=128-1024
homecontmin=0
homecontmax=0

# installer settings
installer=''

# Switch to a new root filesystem - intended to boot a linux system with a f*cked up
# bootloader or initramfs config, specify the following way, the first parameter is
# either UIID or label of the filesystem, the second is the init to use:
# 
# switchroot=|24ba4487-b601-47af-89d0-3b46d00581ec|rw|/sbin/init|extras|
#
switchuuid=''
switchread=''
switchinit=''
switchextr=''

]]>
		</scriptdata>
		<scriptdata location="/etc/rc.subr/extractbootparams" mode="0755" group="0" owner="0">
		<![CDATA[# extract bootparameters

# FIXME: This script should just contain the extraction of variables needed
# for more than one bootscript! All others should be extracted in the
# respective script! (Mattias)

for i in ` cat /proc/cmdline /etc/lesslinux/cmdline /lesslinux/boot/cmdline ` ; do
   case "$i" in
     skipservices=*)
	skipservices=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     skipmodules=*)
	skipmodules=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     defermods=*)
	defermods=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     loadmodules=*)
	loadmodules=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     console=*)
        console=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     tz=*)
	tz=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     roothash=*)
	roothash=`echo "$i" | awk -F '=' '{print $2}'` 
     ;;
     staticnet=*)
        # |iface|ip|mask|dns|gateway|
	staticnet=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     dhcpwait=*)
	dhcpwait=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     hostname=*)
	hostname=`echo "$i" | awk -F '=' '{print $2}'`
     ;; 
     dhcp=*)
        dhcp=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     verbose=*)
        verbose=`echo "$i" | awk -F '=' '{print $2}'` 
     ;;
     hwenv=*)
	hwenv=`echo "$i" | awk -F '=' '{print $2}'`
     ;;	
     searchiso=*)
        searchiso=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     skipntfs=*)
	skipntfs=`echo "$i" | awk -F '=' '{print $2}' `
     ;;
     contdir=*)
	contdir=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     dropbearport=*)
	dropbearport=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     xmode=*)
	xmode=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     toram=*)
	toram=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     optram=*)
	optram=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     usbwait=*)
	usbwait=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     usbsettle=*)
	usbsettle=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     skipcheck=*)
	skipcheck=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     hwid=*)
	hwid=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     sysloglevel=*)
	auxloglevel=`echo "$i" | awk -F '=' '{print $2}'`
	if [ "$auxloglevel" -gt 0 ] && [ "$auxloglevel" -lt 9 ] ; then
            sysloglevel="$auxloglevel"
        fi
     ;;
     halt=*)
	halt=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     lang=*)
	lang=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     keymap=*)
	keymap=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     xkbmap=*)
	xkbmap=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     ultraquiet=*)
	ultraquiet=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     tmpsize=*)
	tmp_tmpsize=`echo "$i" | awk -F '=' '{print $2}'`
	[ "$tmp_tmpsize" -gt 0 ] 2> /dev/null && tmpsize="$tmp_tmpsize"
     ;;
     homesize=*)
	tmp_homesize=`echo "$i" | awk -F '=' '{print $2}'`
	[ "$tmp_homesize" -gt 0 ] 2> /dev/null && homesize="$tmp_homesize"
     ;;
     security=*)
	security=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     ejectcdonumass=*)
	ejectcdonumass=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     ejectcd=*)
	ejectcd=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     allowsudosu=*)
        allowsudosu=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     laxsudo=*)
        laxsudo=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     dpi=*)
	dpi=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     xorgconf=*)
	xorgconf=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     xorgscreen=*)
	xorgscreen=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     xrandr=*)
	xrandr=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     isoonntfs=*)
	isoonntfs=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     skipsearch=*)
        skipsearch=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     debug=*)
        debug_threshold=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     skipflash=*)
        skipflash=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     wgetiso=*)
	wgetiso=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     wgetsize=*)
	wgetsize=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     xvnc=*)
	xvnc=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     xvfb=*)
	xvfb=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     nfs=*)
	nfs=`echo "$i" | awk -F '=' '{print $2}'` 
     ;;
     cifs=*)
	cifs=`echo "$i" | awk -F '=' '{print $2}'` 
     ;;
     wlan=*)
	wlan=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     xinitrc=*)
	xinitrc=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     toramdirs=*) 
	toramdirs=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     simulate=*)
	simulate=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     uuid=*)
	uuid=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     movepart=*)
	movepart=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     ntfsrw=*)
	ntfsrw=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     installer=*)
	installer=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     homepage=*) 
        homepage=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     pgcolor=*) 
        pgcolor=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     printers=*) 
        printers=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     regdom=*) 
        regdom=`echo "$i" | awk -F '=' '{print $2}'`
     ;;
     ram=*)
	ram=`echo "$i" | awk -F '=' '{print $2}'`
	aux_minram=` echo "$ram" | awk -F '|' '{print $2}'`
	aux_lowram=` echo "$ram" | awk -F '|' '{print $3}'`
	[ "$aux_minram" -gt 0 ] && minram="$aux_minram"
	[ "$aux_lowram" -gt 0 ] && [ "$aux_lowram" -gt "$minram" ] && lowram="$aux_lowram"
     ;;
     homecont=*)
	homecont=`echo "$i" | awk -F '=' '{print $2}'`
	homecontmin=` echo "$homecont" | awk -F '-' '{print $1}'`
	homecontmax=` echo "$homecont" | awk -F '-' '{print $2}'`
	[ "$homecontmin" -gt 0 ] || homecontmin=0
	[ "$homecontmax" -gt 0 ] || homecontmax=0
     ;;
     blobsize=*)
	blobsize=` echo "$i" | awk -F '=' '{print $2}' ` 
     ;;
     swapsize=*)
	swapsize=` echo "$i" | awk -F '=' '{print $2}' ` 
     ;;
     swap=*)
	swap=` echo "$i" | awk -F '=' '{print $2}' ` 
	[ "$swap" = "none" ] && swap='' 
     ;;
     offsetptable=*)
	offsetptable=` echo "$i" | awk -F '=' '{print $2}' ` 
     ;;
     switchroot=*)
	swtch=`echo "$i" | awk -F '=' '{print $2}'`
	switchuuid=` echo "$swtch" | awk -F '|' '{print $2}' `
	switchread=` echo "$swtch" | awk -F '|' '{print $3}' `
	switchinit=` echo "$swtch" | awk -F '|' '{print $4}' `
	switchextr=` echo "$swtch" | awk -F '|' '{print $5}' `
     ;;
     nolangsel=*)
	nolangsel=` echo "$i" | awk -F '=' '{print $2}' `
     ;;
     xlocale=*)
	xlocale=` echo "$i" | awk -F '=' '{print $2}' `
     ;;
   esac
done

# Adjust some settings depending each other

if [ -n "$xlocale" ] ; then
	shortloc=` echo $xlocale | awk -F '.' '{print $1}' `
	ultraloc=` echo $xlocale | awk -F '_' '{print $1}' `
	export LC_ALL=${xlocale}
	export LANG=${xlocale}
	export LANGUAGE=${shortloc}:${ultraloc}
	lang=${ultraloc}
	[ -z "$xkbmap" ] && xkbmap=${ultraloc}
fi

if [ -z "$keymap" ] ; then
	keymap=/usr/share/keymaps/i386/qwerty/us.map.gz
	[ "$lang" = "de" ] && keymap=/usr/share/keymaps/i386/qwertz/de-latin1.map.gz
	[ "$lang" = "en" ] && keymap=/usr/share/keymaps/i386/qwerty/us.map.gz
	[ "$lang" = "es" ] && keymap=/usr/share/keymaps/i386/qwerty/es.map.gz
	[ "$lang" = "fr" ] && keymap=/usr/share/keymaps/i386/azerty/fr.map.gz
	[ "$lang" = "it" ] && keymap=/usr/share/keymaps/i386/qwerty/it.map.gz
	[ "$lang" = "us" ] && keymap=/usr/share/keymaps/i386/qwerty/us.map.gz
	[ "$lang" = "uk" ] && keymap=/usr/share/keymaps/i386/qwerty/us.map.gz
	[ "$lang" = "pl" ] && keymap=/usr/share/keymaps/i386/qwerty/pl.map.gz
	[ "$lang" = "ru" ] && keymap=/usr/share/keymaps/i386/qwerty/ru.map.gz
fi

if [ -z "$xkbmap" ] ; then
	xkbmap=us
	[ "$lang" = "de" ] && xkbmap=de
	[ "$lang" = "en" ] && xkbmap=us
	[ "$lang" = "es" ] && xkbmap=es
	[ "$lang" = "fr" ] && xkbmap=fr
	[ "$lang" = "it" ] && xkbmap=it
	[ "$lang" = "us" ] && xkbmap=us
	[ "$lang" = "uk" ] && xkbmap=us
	[ "$lang" = "pl" ] && xkbmap=pl
	[ "$lang" = "ru" ] && xkbmap=ru
fi

if [ -z "$tz" ] ; then
	[ "$lang" = "de" ] && tz='Europe/Berlin' 
	[ "$lang" = "en" ] && tz='Europe/London' 
	[ "$lang" = "es" ] && tz='Europe/Madrid'
	[ "$lang" = "fr" ] && tz='Europe/Paris'
	[ "$lang" = "it" ] && tz='Europe/Rome'
	[ "$lang" = "uk" ] && tz='Europe/London'
	[ "$lang" = "us" ] && tz='America/Chicago'
	[ "$lang" = "pl" ] && tz='Europe/Warsaw'
	[ "$lang" = "ru" ] && tz='Europe/Moscow'
fi

if [ -z "$xlocale" ] ; then
    [ "$lang" = "de" ] && export LC_ALL=de_DE.UTF-8 && export LANG=de_DE.UTF-8 && export LANGUAGE=de_DE:de
    [ "$lang" = "en" ] && export LC_ALL=en_US.UTF-8	&& export LANG=en_US.UTF-8 && export LANGUAGE=en_US:en_GB:en
    [ "$lang" = "es" ] && export LC_ALL=es_ES.UTF-8	&& export LANG=es_ES.UTF-8 && export LANGUAGE=es_ES:es_MX:es
    [ "$lang" = "uk" ] && export LC_ALL=en_US.UTF-8 && export LANG=en_GB.UTF-8 && export LANGUAGE=en_GB:en_US:en
    [ "$lang" = "fr" ] && export LC_ALL=fr_FR.UTF-8 && export LANG=fr_FR.UTF-8 && export LANGUAGE=fr_FR:fr
    [ "$lang" = "it" ] && export LC_ALL=it_IT.UTF-8 && export LANG=it_IT.UTF-8 && export LANGUAGE=it_IT:it
    [ "$lang" = "pl" ] && export LC_ALL=pl_PL.UTF-8 && export LANG=pl_PL.UTF-8 && export LANGUAGE=pl_PL:pl
    [ "$lang" = "ru" ] && export LC_ALL=ru_RU.UTF-8 && export LANG=ru_RU.UTF-8 && export LANGUAGE=ru_RU:ru
fi

# end extract bootparams]]>
		</scriptdata>
		<scriptdata location="/etc/rc.subr/colors" mode="0755" group="0" owner="0">
		<![CDATA[failed='\033[31;1m[FAILED]\033[0m\n'
success='\033[32;1m[  OK  ]\033[0m\n'
later='\033[33;1m[LATER ]\033[0m\n'
bold='\033[1m'
normal='\033[0m'
#		]]>
		</scriptdata>
		<scriptdata location="/etc/rc.subr/progressbar" mode="0755" group="0" owner="0">
		<![CDATA[
		
		
# genericpgbar 15 32 "Konvertiere das Zeugs..." "15%" "" pts/18
# genericpgbar 37 32 "Konvertiere das Zeugs..." "37%" "FEHLER: Schreiben auf Geraet doof" pts/18

genericpgbar() {
	percentage=$1
	pgcolor=$2
	textupper="$3"
	textlower="$4" 
	errortext="$5"
	console="$console"
	[ -n "$6" ] && console="$6" 
	
	termdims=` /static/bin/stty -F /dev/$console size ` 
	cols=` echo $termdims | awk '{print $2}' `
	rows=` echo $termdims | awk '{print $1}' `
	[ -z "$cols" -o "$cols" = 0 ] && cols=80
	[ -z "$rows" -o "$rows" = 0 ] && rows=24
	total=` expr $cols '*' 2 / 3 `  
	fraction=` expr $total '*' $percentage / 100  ` 
	
	# Move cursor to top left - clear screen
	printf '\33[2J' > /dev/$console
	# Move cursor down
	sline=` expr  '(' $rows -  3 ')' / 2 ` 
	scol=` expr '(' $cols - $total ')' / 2 ` 
	
	# Print Start text
	printf '\33[0m\33[1m' > /dev/$console
	printf '\33['${sline}';'${scol}'H' > /dev/$console 
	echo -n "${textupper}" > /dev/$console 
	printf '\33['` expr $sline + 1 `';'$scol'H' > /dev/$console
	# Set color 
	printf '\33['$pgcolor'm' > /dev/$console
	# Inverse color for blocks
	printf '\33[7m' > /dev/$console
	for n in ` seq 1 $fraction ` ; do printf ' ' > /dev/$console ; done
	tend=` expr $total - 1 ` 
	printf '\33[0;7m' > /dev/$console
	for n in ` seq $fraction $tend ` ;  do printf ' ' > /dev/$console ; done
	printf '\33[0m' > /dev/$console
	printf '\33['` expr $sline + 2 `';'${scol}'H' > /dev/$console 
	echo -n "${textlower}" > /dev/$console 
	if [ -n "$errortext" ] ; then
		printf '\33[1;31m' > /dev/$console
		printf '\33['` expr $sline + 3 `';'${scol}'H' > /dev/$console 
		echo -n "${errortext}" > /dev/$console 
	fi
	# Move cursor out of way, clean up
	printf '\33['` expr $rows - 1 `';0H' > /dev/$console
	printf '\33[0m' > /dev/$console
}

clearscreen() {
	console="tty1"
	[ -n "$1" ] && console="$1" 
	# Move cursor to top left - clear screen
	printf '\33[2J' > /dev/$console
}

upperredbar() {
	console="tty1"
	[ -n "$1" ] && console="$1" 
	termdims=` /static/bin/stty -F /dev/$console size ` 
	cols=` echo $termdims | awk '{print $2}' `
	rows=` echo $termdims | awk '{print $1}' `
	[ -z "$cols" -o "$cols" = 0 ] && cols=80
	[ -z "$rows" -o "$rows" = 0 ] && rows=24
	# Move cursor to top left - clear screen
	printf '\33[2J' > /dev/$console
	for l in 2 3 4 ; do
		printf '\33['$l';0H' > /dev/$console 
		# Set color 
		printf '\33[31m' > /dev/$console
		# Inverse color for blocks
		printf '\33[7m' > /dev/$console
		for n in ` seq 1 $cols ` ; do
			echo -n ' ' > /dev/$console
		done
	done
	printf '\33[6;0H' > /dev/$console 
	printf '\33[0m' > /dev/$console
}

lowerredbar() {
	console="tty1"
	[ -n "$1" ] && console="$1" 
	termdims=` /static/bin/stty -F /dev/$console size ` 
	cols=` echo $termdims | awk '{print $2}' `
	rows=` echo $termdims | awk '{print $1}' `
	[ -z "$cols" -o "$cols" = 0 ] && cols=80
	[ -z "$rows" -o "$rows" = 0 ] && rows=24
	for l in `expr $rows - 3 ` ` expr $rows - 2 `  `expr $rows - 1 `  ; do
		printf '\33['$l';0H' > /dev/$console 
		# Set color 
		printf '\33[31m' > /dev/$console
		# Inverse color for blocks
		printf '\33[7m' > /dev/$console
		for n in ` seq 1 $cols ` ; do
			echo -n ' ' > /dev/$console
		done
	done
	printf '\33[0m' > /dev/$console
}

centertext() {
	textwidth=$1
	textheight=$2
	showtext="$3"
	console="tty1"
	[ -n "$4" ] && console="$4" 
	termdims=` /static/bin/stty -F /dev/$console size ` 
	cols=` echo $termdims | awk '{print $2}' `
	rows=` echo $termdims | awk '{print $1}' `
	[ -z "$cols" -o "$cols" = 0 ] && cols=80
	[ -z "$rows" -o "$rows" = 0 ] && rows=24
	startline=` expr '(' $rows - $textheight ')' / 2 `
	echo "$showtext" | while read line ; do
		printf '\33[1m\33['$startline';'` expr '(' $cols - $textwidth ')' / 2 `'H' > /dev/$console 
		echo $line > /dev/$console 
		startline=` expr $startline + 1 ` 
	done
	printf '\33[0m' > /dev/$console
}

run_self_test() {
	mdir=$1
	bootok=0
	shaok=0
	if [ "$ultraquiet" -gt 1 ] ; then
		genericpgbar 10 32 "$check_head" "${check_boot}" "" tty1
		[ -p /splash.fifo ] && echo 10 /splash.fifo
	else
		echo "---> Checking boot files"
	fi
	if [ '!' -d /lesslinux/${mdir}/boot/kernel ] ; then
		bootok=1 
	elif ( cd /lesslinux/${mdir}/boot/kernel ; sha1sum -c /lesslinux/${mdir}/${contdir}/boot.sha ) ; then
		bootok=1
	fi
	if [ "$bootok" -gt 0 ] ; then
		[ "$ultraquiet" -lt 1 ] && echo "---> Checking system files" > /dev/tty8
		if [ "$ultraquiet" -gt 1 ] ; then
			genericpgbar 40 32 "$check_head" "${check_squash}" "" tty1
			[ -p /splash.fifo ] && echo 40 /splash.fifo
		else
			echo "---> Checking system files"
		fi
		if ( cd /lesslinux/${mdir}/${contdir} ; sha1sum -c /lesslinux/${mdir}/${contdir}/squash.sha ) ; then
			shaok=1
		fi
	fi
	if [ "$shaok" -lt 1 ] ; then
		touch /var/run/lesslinux/boot_failed 
		echo "+++> Check failed - refusing to boot" > /dev/tty8
		echo "   > Press the Return key to shut down" > /dev/tty8
		echo "+++> Check failed - refusing to boot"
		echo "   > Press the Return key to shut down"
		if [ "$ultraquiet" -gt 1 ] ; then
			upperredbar tty1
			centertext 64 1 "$convert_failed" tty1
			lowerredbar tty1
			chvt 1
		fi
		read nix
		poweroff
	fi
}

#		]]>
		</scriptdata>
		<scriptdata location="/etc/rc.subr/write_fbsplash_config" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash

PATH=/static/bin:/static/sbin:/bin:/sbin:/usr/bin:/usr/sbin
export PATH

width=$1
height=$2

# Default logo is 174x106 pixels, pgbar 24px under logo and 10px high
# pgbar 90% of screen width, everything centered

pgbar_offset_x=` expr ${width} / 20 `
img_offset_x=` expr ${width} / 2 - 87 `
img_offset_y=` expr ${height} / 2 - 65 `
pgbar_offset_y=` expr ${img_offset_y} + 130 `
pgbar_width=` expr ${width} - 2 '*' ${pgbar_offset_x} ` 

# Show an icon beneath the bar
icon_offset_x=` expr ${width} / 2 - 32 ` 
icon_offset_y=` expr ${pgbar_offset_y} + 34 ` 

# In some scripts you want to show a text message which is larger 
# than the icons, see for example the USB conversion script
# text_offset_x=` expr ${width} / 2 - 200 ` 
text_offset_x=$pgbar_offset_x
# text_offset_y=` expr ${pgbar_offset_y} + 20 ` 
text_offset_y=` expr ${height} - 150 ` 

# Config file for main logo

cat << EOF > /etc/lesslinux/fbsplash.cfg
#  Generated by /etc/rc.subr/write_fbsplash_config
BAR_LEFT=${pgbar_offset_x}
BAR_TOP=${pgbar_offset_y}
BAR_WIDTH=${pgbar_width}
BAR_HEIGHT=12
BAR_R=0
BAR_G=254
BAR_B=0
# Image position
IMG_LEFT=${img_offset_x}
IMG_TOP=${img_offset_y}
# Black background
BG_R=0
BG_G=0
BG_B=0
NOFILL=0
EOF

# Config file for icons below progress bar
cat << EOF > /etc/lesslinux/fbsplash_icon.cfg
#  Generated by /etc/rc.subr/write_fbsplash_config
# Image position
IMG_LEFT=${icon_offset_x}
IMG_TOP=${icon_offset_y}
# Do not repaint the BG
NOFILL=1
EOF

# Config file for text below progress bar
cat << EOF > /etc/lesslinux/fbsplash_text.cfg
#  Generated by /etc/rc.subr/write_fbsplash_config
# Image position
IMG_LEFT=${text_offset_x}
IMG_TOP=${text_offset_y}
# Do not repaint the BG
NOFILL=1
EOF

#		]]>
		</scriptdata>
		<scriptdata location="/etc/rc.subr/loadmodules.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash

PATH=/static/bin:/static/sbin:/bin:/sbin:/usr/bin:/usr/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors

cat $1 | awk '{print $1}' | while read modname
do
    case $modname in
        '#'*|'')
	    true
	;;
	*)
            if echo "$skipmodules" | grep '|'$modname'|' > /dev/null 2>&1 ; then
		printf "$bold---> Skipping blacklisted module $modname \n"
            else
		# Find modprobe command
		MODPROBE=modprobe
		# Statically linked modprobe/kmod in initramfs
		if [ -x /static/kmod/bin/kmod ] ; then
			ln -sf /static/kmod/bin/kmod /static/kmod/bin/modprobe
			ln -sf /static/kmod/bin/kmod /static/kmod/bin/insmod
			MODPROBE=/static/kmod/bin/modprobe
			PATH=/static/kmod/bin:$PATH
			export PATH
		fi
		# Modprobe provided by kmod in complete system
		[ -x /bin/kmod ] && MODPROBE=/sbin/modprobe
		# Modprobe provided by kmod in complete system - alternative path
		[ -x /usr/bin/kmod ] && MODPROBE=/usr/sbin/modprobe
	    
		# FIXME should not be hardcoded:
		if [ "$modname" = "loop" ] ; then
		    insmod /static/modules/$modname.ko max_loop=64 > /dev/null 2>&1
		else
		    # if the modprobe command exists plus the directory 
		    # /lib/modules/` uname -r ` is available we might use
		    # use the more sophisticated modprobe command!
		    # WARNING! Make sure we use the kernel's modprobe!
		    if [ -d /lib/modules/` uname -r `/kernel ] ; then
		        $MODPROBE -q -b $modname 
		    else
			insmod -q /static/modules/$modname.ko
		    fi
		fi
	    fi
        ;;
    esac
done
mdev -s
		
#		]]>
		</scriptdata>
		<scriptdata location="/etc/rc.d/0000-filesystems.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash

#lesslinux provides systemfs

PATH=/static/bin:/static/sbin:/bin:/sbin:/usr/bin:/usr/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors

# Mount some initial filesystems
case $1 in
    start)
    printf "$bold===> Preparing the system$normal\n"
    
    # Try to find out if a squashfs container for the modules exists, mount it!
    kversion=` uname -r ` 
    if [ -f /lesslinux/modules/${kversion}.sqs ] ; then
	mkdir -p /usr/lib/modules/${kversion}
	free_loop=` losetup -f `
	losetup $free_loop /lesslinux/modules/${kversion}.sqs
	mount -t squashfs $free_loop /usr/lib/modules/${kversion}
    fi
    if [ -f /lesslinux/modules/firmware.sqs ] ; then
	mkdir -p /usr/lib/firmware
	free_loop=` losetup -f `
	losetup $free_loop /lesslinux/modules/firmware.sqs
	mount -t squashfs $free_loop /usr/lib/firmware
    fi
    ln -sf /usr/lib /lib
    # Mount /tmp and /home on separate ramdisks
    if mountpoint -q /tmp ; then
	# printf "$bold---> Skipping /tmp, already mounted $normal\n"
	true
    else
	if [ "$tmpsize" -gt 0 ] ; then
		mount -t tmpfs -o noexec,nosuid,nodev,size=${tmpsize}m tmpfs /tmp
	else
		# calculate the size of /tmp
		# if total memory is 1536MB or larger -> take total memory minus 768MB
		# else -> take half of the total memory
		# FIXME: on systems with swapfiles/ramzswap we have to add an appropriate value!
		memtotal=` cat /proc/meminfo | grep '^MemTotal' | awk '{print $2}' `
		memmeg=` expr $memtotal / 1024 `
		tmpmeg=32
		if [ "$memmeg" -gt 1536 ] ; then 
			tmpmeg=` expr $memmeg - 768 `
		else
			tmpmeg=` expr $memmeg / 2 `
		fi
		mount -t tmpfs -o noexec,nosuid,nodev,size=${tmpmeg}m tmpfs /tmp
	fi
    fi
    mountpoint -q /home || mount -t tmpfs tmpfs -o mode=0755,nosuid,nodev,size=${homesize}m /home
    tar -C /home -xzf /etc/lesslinux/skel/surfer.tgz 
    
    # Change some access modes of devices
    chmod 0666 /dev/tty
    chmod 0666 /dev/pty*
    
    # mdev needs a shell at /bin/sh
    [ '!' -f /bin/sh ] && ln /static/bin/busybox /bin/sh
    echo /static/sbin/mdev > /proc/sys/kernel/hotplug
    mdev -s
    chmod 0666 /dev/null
    chmod 0664 /dev/urandom
    chmod 0664 /dev/random
    chmod 0664 /dev/zero
    
    # And configure the loopback interface
    ifconfig lo 127.0.0.1 
    
    # Write the branding
    cat /etc/lesslinux/branding/filelist.txt | sort | uniq | while read fname ; do
	if [ -f "$fname"."$lang" ] ; then
	    ln -sf "$fname"."$lang" "$fname"
	elif [ -f "$fname".en ] ; then
	    ln -sf "$fname".en "$fname"
	fi
    done
    
    # The earlier the better: Identify bad memory
    if dmesg | grep -q 'bad mem addr' ; then
	dmesg | grep 'bad mem addr' > /var/run/lesslinux/bad_memory
    fi
    if dmesg | grep -q 'early_memtest' ; then
	dmesg | grep 'early_memtest' > /var/run/lesslinux/early_memtest
    fi
    # 
    
  ;;
esac    
#		]]>
		</scriptdata>
		<modlist provides="systemfs" hwenv="default">
			<module>loop</module>
			<module>squashfs</module>
			<module>jbd</module>
			<module>mbcache</module>
			<module>jbd2</module>
			<module>crc16</module>
			<module>ext2</module>
			<module>ext3</module>
			<module>ext4</module>
			<module>zlib_deflate</module>
			<module>libcrc32c</module>
			<module>btrfs</module>
		</modlist>
		<!-- <scriptdata location="/etc/rc.d/0010-mdev.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash
	
#lesslinux provides mdev

PATH=/static/bin:/static/sbin:/bin:/sbin:/usr/bin:/usr/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors

# Mount some initial filesystems
case $1 in
    start)
	printf "$bold-..> Using mdev to setup dynamic /dev                            "
        # mdev needs a shell at /bin/sh
	[ '!' -f /bin/sh ] && ln /static/bin/busybox /bin/sh
	echo /static/sbin/mdev > /proc/sys/kernel/hotplug
	sleep 1
        if mdev -s ; then
            printf "$success"
        else
            printf "$failed"
        fi
	chmod 0666 /dev/null
	chmod 0664 /dev/urandom
	chmod 0664 /dev/random
	chmod 0664 /dev/zero
    ;;
esac
#		]]>
		</scriptdata> -->
		<!-- <scriptdata location="/etc/rc.d/0015-debug.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash
	
#lesslinux provides debug-001
#lesslinux debug 5

PATH=/static/bin:/static/sbin:/bin:/sbin:/usr/bin:/usr/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors

now=`date '+%Y%M%d-%H%M%S' ` 

# Mount some initial filesystems
case $1 in
    start)
	echo -n "$now" > /var/run/lesslinux/startup_time
	mkdir -p /lesslinux/debug/${now}
	cat /proc/cmdline > /lesslinux/debug/${now}/${now}_cmdline.txt
	cat /proc/version > /lesslinux/debug/${now}/${now}_version.txt
	cat /proc/cpuinfo > /lesslinux/debug/${now}/${now}_cpuinfo.txt
	cat /proc/meminfo > /lesslinux/debug/${now}/${now}_meminfo.txt
	cat /proc/bus/pci/devices > /lesslinux/debug/${now}/${now}_pcidevices.txt
	cat /proc/devices > /lesslinux/debug/${now}/${now}_devicenodes.txt
	cat /proc/modules > /lesslinux/debug/${now}/${now}_modules.txt
	lsmod > /lesslinux/debug/${now}/${now}_modules2.txt
	cat /proc/mounts > /lesslinux/debug/${now}/${now}_mounts.txt
	dmesg > /lesslinux/debug/${now}/${now}_dmesg.txt
	cp /etc/lesslinux/updater/version.txt /lesslinux/debug/${now}/${now}_buildid.txt
	sleep 2
    ;;
esac
#		]]>
		</scriptdata> -->
		<!-- <scriptdata location="/etc/rc.d/0020-loopback.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash

#lesslinux provides lonet

PATH=/static/bin:/static/sbin:/bin:/sbin:/usr/bin:/usr/sbin
export PATH

. /etc/rc.subr/colors

# Start Loopback Networking (and never stop it!)

case $1 in 
    start)
	printf "$bold===> Setting up loopback networking $normal \n"
	ifconfig lo 127.0.0.1 
    ;;
esac
#		]]>
		</scriptdata> -->
		<!-- <scriptdata location="/etc/rc.d/0024-branding.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash

#lesslinux provides branding

PATH=/static/bin:/static/sbin:/bin:/sbin:/usr/bin:/usr/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors

# Write branding, essentially create some softlinks according to the selected language

case $1 in 
    start)
	printf "$bold===> Writing branding $normal \n"
	cat /etc/lesslinux/branding/filelist.txt | sort | uniq | while read fname ; do
	    if [ -f "$fname"."$lang" ] ; then
	        ln -sf "$fname"."$lang" "$fname"
	    elif [ -f "$fname".en ] ; then
	        ln -sf "$fname".en "$fname"
	    fi
	done
    ;;
esac
#		]]>
		</scriptdata> -->
		<scriptdata location="/etc/rc.d/0010-selftest.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash

#lesslinux provides selftest

PATH=/static/bin:/static/sbin:/bin:/sbin:/usr/bin:/usr/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors
. /etc/rc.subr/progressbar

# Run self test

case $1 in 
    start)
	printf "$bold===> Self test boot files $normal \n"
	cd /
	sha1sum -c initramfs.sha && sha1sum -c modules.sha
	retval=$?
	if [ "$retval" -gt 0 ] ; then
		upperredbar tty1
		centertext 62 2 "Self test failed. Boot media might be damaged.
Please press c + [Enter] to continue or [Enter] to shut down." tty1
		lowerredbar tty1
		read userinput
		[ "$userinput" = "c" ] || poweroff 
	fi
    ;;
esac
#		]]>
		</scriptdata>
		<scriptdata location="/etc/rc.d/0030-syslogd.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash

#lesslinux provides syslogd

PATH=/static/bin:/static/sbin:/bin:/sbin:/usr/bin:/usr/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors

# Start syslogd

case $1 in 
    start)
	printf "$bold===> Starting syslogd $normal \n"
	syslogd -l "$sysloglevel" -D &
    ;;
esac
#		]]>
		</scriptdata>
		<scriptdata location="/etc/rc.d/0040-roothash.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash

#lesslinux provides roothash

PATH=/static/bin:/static/sbin:/bin:/sbin:/usr/bin:/usr/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors
[ -f /etc/rc.defaults.override ] && . /etc/rc.defaults.override

# Replace the hash for the root password

case $1 in
    start)
    if [ "$nologin" -gt 0 ] ; then
        printf "$bold===> Skipping MD5 hash for root password $normal\n"
    else      
        printf "$bold===> Replacing MD5 hash for root password 	                 "
	if [ -n "$roothash" ] ; then
		rootpwhash=` echo "$roothash" | base64 -d | sed 's/ //g' ` 
	elif [ -f /etc/lesslinux/root.hash ] ; then
		rootpwhash=` cat /etc/lesslinux/root.hash `
		chmod 0600 /etc/lesslinux/root.hash
		chown root:root /etc/lesslinux/root.hash
	else
		rootpwhash='!'
	fi
	if [ -f /etc/lesslinux/surfer.hash ] ; then
		userpwhash=` cat /etc/lesslinux/surfer.hash `
		chmod 0600 /etc/lesslinux/surfer.hash
		chown root:root /etc/lesslinux/surfer.hash
	else
		userpwhash='!'
	fi
        clean_rootpwhash=`echo $rootpwhash | tr '$' '\$' | sed '/\//s//\\\\\//g' `
	clean_userpwhash=`echo $userpwhash | tr '$' '\$' | sed '/\//s//\\\\\//g' `
        if cat /etc/rc.templates/shadow | sed "/%ROOTHASH%/s//$clean_rootpwhash/g" | sed "/%USERHASH%/s//$clean_userpwhash/g" > /etc/shadow
            then
            chown root:root /etc/shadow > /dev/null 2>&1
            chmod 0600 /etc/shadow > /dev/null 2>&1
            printf "$success"
        else
            printf "$failed"
            printf "$bold---> Shell login as root might not be possible...$normal\n"
        fi
    fi
  ;;
esac
#		]]>
		</scriptdata>
		<scriptdata location="/etc/rc.d/0050-loadmodules.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash

#lesslinux provides loadmodules

PATH=/static/bin:/static/sbin:/bin:/sbin:/usr/bin:/usr/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors

# Load some additional modules that might not be loaded by the other scripts

# Find modprobe command
MODPROBE=modprobe
# Statically linked modprobe/kmod in initramfs
if [ -x /static/kmod/bin/kmod ] ; then
	ln -sf /static/kmod/bin/kmod /static/kmod/bin/modprobe
	ln -sf /static/kmod/bin/kmod /static/kmod/bin/insmod
	MODPROBE=/static/kmod/bin/modprobe
	PATH=/static/kmod/bin:$PATH
	export PATH
fi
# Modprobe provided by kmod in complete system
[ -x /bin/kmod ] && MODPROBE=/sbin/modprobe
# Modprobe provided by kmod in complete system - alternative path
[ -x /usr/bin/kmod ] && MODPROBE=/usr/sbin/modprobe

case $1 in
    start)
	# write blacklist first
	for i in ` echo "$skipmodules" | sed 's/|/ /g' ` ; do
	    echo "blacklist $i" >> /etc/modprobe.d/blacklist.conf
	done
        if [ -z "$loadmodules" ] ; then
	    printf "$bold===> No additional modules to load $normal\n"
	else
	    printf "$bold===> Load some additional modules $normal\n"
	    for i in ` echo "$loadmodules" | sed 's/|/ /g' ` 
	    do
		# FIXME should not be hardcoded:
		if [ "$i" = "loop" ] ; then
		    insmod /static/modules/$i.ko max_loop=64 > /dev/null 2>&1
		else
		    if [ -d /lib/modules/` uname -r `/kernel ] ; then
		        $MODPROBE -q -b $modname 
		    else
			insmod -q /static/modules/$modname.ko
		    fi
		fi
	    done
	    mdev -s
	fi
	kversion=` uname -r `
	alreadyloaded=""
	# Now use our faked lspci and faked lsusb to load additional modules
	if [ -d /lib/modules/${kversion}/kernel ] ; then
	    
	    # Hide wireless modules, those should probably loaded after udev is started
	    # to work around flaws with crda
	    # mount -t tmpfs tmpfs -o mode=0755 /lib/modules/${kversion}/kernel/drivers/net/wireless/
	    # Hide DRM modules, since they request firmware, they should be loaded after 
	    # udev is started
	    # mount -t tmpfs tmpfs -o mode=0755 /lib/modules/${kversion}/kernel/drivers/gpu/drm
	    # Hide sound modules, since they request firmware, they should be loaded after 
	    # udev is started
	    # mount -t tmpfs tmpfs -o mode=0755 /lib/modules/${kversion}/kernel/sound
	    
	    defmods=` echo $defermods | sed 's%|% %g' `
	    for dir in $defmods ; do
		mount -t tmpfs -o mode=0755 tmpfs /lib/modules/${kversion}/kernel/${dir}
	    done
	    
	    printf "$bold===> Loading PCI drivers $normal\n"
	    for i in /sys/bus/pci/devices/* ; do 
		prod=` cat $i/device | sed 's/0x//' `
		vend=` cat $i/vendor | sed 's/0x//' `
		if [ -f /lib/modules/${kversion}/modules.pcimap ] ; then
		    for modname in \
		        ` cat /lib/modules/${kversion}/modules.pcimap | awk '{print $1, $2, $3}' | \
			    grep -Ei ' 0x0000'${vend}' 0x0000'${prod}'$| 0x0000'${vend}' 0xffffffff$| 0xffffffff 0x0000'${prod}'$' | awk '{print $1}' ` ; do
			if echo "$alreadyloaded" | grep -qv "$modname " ; then
			    $MODPROBE -q -b $modname
			    alreadyloaded="$alreadyloaded $modname "
		        fi
		    done
		else
		    for modname in \
			` grep -Ei 'alias pci:v0000'${vend}d0000${prod}'sv|alias pci:v\*d0000'${prod}'sv|alias pci:v0000'${vend}'d\*sv' /lib/modules/${kversion}/modules.alias | awk '{print $3}' | uniq ` ; do
			if echo "$alreadyloaded" | grep -qv "$modname " ; then
			    $MODPROBE -q -b $modname
			    alreadyloaded="$alreadyloaded $modname "
		        fi
		    done
		fi
	    done
	    if [ -f /lib/modules/${kversion}/modules.pcimap ] ; then
		for modname in \
		    ` cat /lib/modules/${kversion}/modules.pcimap | awk '{print $1, $2, $3}' | \
			grep -i ' 0xffffffff 0xffffffff$' | awk '{print $1}' ` ; do
		    if echo "$alreadyloaded" | grep -qv "$modname " ; then
			$MODPROBE -q -b $modname
			alreadyloaded="$alreadyloaded $modname "
		    fi
		done
	    else
		for modname in \
		    ` cat /lib/modules/${kversion}/modules.alias |  grep -Ei 'alias pci:v\*d\*sv' | awk '{print $3}' | uniq ` ; do
			if echo "$alreadyloaded" | grep -qv "$modname " ; then
			    $MODPROBE -q -b $modname
			    alreadyloaded="$alreadyloaded $modname "
			fi
		    done
	    fi
	    printf "$bold===> Loading USB drivers $normal\n"
	    for i in /sys/bus/usb/devices/* ; do 
		if [ -f $i/idVendor ] ; then
		    prod=` cat $i/idProduct `
		    vend=` cat $i/idVendor `
		    if [ -f /lib/modules/${kversion}/modules.usbmap ] ; then
			for modname in \
			    ` cat /lib/modules/${kversion}/modules.usbmap | awk '{print $1, $3, $4}' | \
			        grep -Ei ' 0x'${vend}' 0x'${prod}'$| 0x'${vend}' 0xffff$| 0xffff 0x'${prod}'$' | awk '{print $1}' ` ; do 
			    if echo "$alreadyloaded" | grep -qv "$modname " ; then
				$MODPROBE -q -b $modname
				alreadyloaded="$alreadyloaded $modname "
		            fi
			done
		    else	
			for modname in \
			   ` grep -Ei 'alias usb:v'${vend}p${prod}'d|alias usb:v\*p'${prod}'d|alias usb:v'${vend}'p\*d' /lib/modules/${kversion}/modules.alias | awk '{print $3}' | uniq ` ; do
			    if echo "$alreadyloaded" | grep -qv "$modname " ; then
				$MODPROBE -q -b $modname
				alreadyloaded="$alreadyloaded $modname "
		            fi
			done
		    fi
		fi
	    done 
	    if [ -f /lib/modules/${kversion}/modules.usbmap ] ; then
		for modname in \
		    ` cat /lib/modules/${kversion}/modules.usbmap | awk '{print $1, $3, $4}' | \
		    grep -i ' 0xffff 0xffff$' | awk '{print $1}' ` ; do 
		    if echo "$alreadyloaded" | grep -qv "$modname " ; then
			$MODPROBE -q -b $modname
			alreadyloaded="$alreadyloaded $modname "
		    fi
		done
	    else
		for modname in \
		    ` grep -Ei 'alias usb:v\*p\*d' /lib/modules/${kversion}/modules.alias | awk '{print $3}' | uniq ` ; do
		    if echo "$alreadyloaded" | grep -qv "$modname " ; then
			$MODPROBE -q -b $modname
			alreadyloaded="$alreadyloaded $modname "
		    fi
		done   
	    fi
	    mountpoint -q /proc/bus/usb || mount -t usbfs usbfs /proc/bus/usb
	    if cat /sys/hypervisor/properties/capabilities | grep -q xen ; then
		printf "$bold===> Loading Xen specific drivers $normal \n"
		$MODPROBE -q -b xen-blkfront
		$MODPROBE -q -b xen-netfront
	    fi
	    mdev -s
	    for dir in $defmods ; do
		umount /lib/modules/${kversion}/kernel/${dir}
	    done
	fi
	if [ -p /splash.fifo ] ; then
		echo "exit" > /splash.fifo
		# Re-Write config
		fbwidth=` fbset | grep '^mode' | awk -F '["x-]' '{print $2}' `
		fbheight=` fbset | grep '^mode' | awk -F '["x-]' '{print $3}' `
		/etc/rc.subr/write_fbsplash_config $fbwidth $fbheight 
		chvt 8
		# Remove old fifo
		rm /splash.fifo
		# Create new (empty fifo)
		mkfifo /splash.fifo
		fbsplash -i /etc/lesslinux/fbsplash.cfg -s /etc/lesslinux/branding/fbsplash/splash.ppm -f /splash.fifo &
	fi
    ;;
esac

#		]]>
		</scriptdata>
		<scriptdata location="/etc/modprobe.d/blacklist.conf" mode="0644" group="0" owner="0">
		<![CDATA[# module blacklist for kernel 2.6.37
blacklist eepro100
blacklist evbug
blacklist eth1394
blacklist de4x5
blacklist snd_intel8x0m
blacklist prism54
blacklist bcm43xx
# Most tools use the libusb interface
blacklist garmin_gps

# rt2870sta seems mature enough with current firmware 
# to be used as default on most Ralink 2870 based USB
# cards together with kernel 2.6.32 and 2.6.33
blacklist rt2870sta
# but with kernels 2.36 and up rt2800usb seems to work better
# blacklist rt2800usb

# rt2860sta seems more stable than rt2800pci despite 
# supporting less cards - 2.6.35
# blacklist rt2800pci
# with 3.1 and up rt2800pci is recommended
blacklist rt2860sta

# carl9170 seems to be in a very early stage as of 2.6.39 - 3.0
# but mature and stable in 3.4... 
# blacklist carl9170
blacklist ar9170usb

# From kernel 3.9 to 3.10 rtl8192se started to panic upon
# link ready - blacklist for now - seems to work in 3.11 again
# blacklist rtl8192se

# The new brcm-sta drivers are prefered over b43
blacklist b43
blacklist b43legacy

# nouveau needs special userspace driver - blacklist for now
# remove from blacklist with kernel 3.6 and Xserver 1.13 onwards
# blacklist nouveau
# uvesafb might cause a black console on shutdown
blacklist uvesafb
# ---------------------------------------------------
# appended by /etc/rc.d/0050-loadmodules.sh

]]>
		</scriptdata>
		<scriptdata location="/etc/modprobe.d/wireless.conf" mode="0644" group="0" owner="0">
		<![CDATA[# module parameters
options iwlagn swcrypto=1
options rtl8192se swenc=1
]]>
		</scriptdata>
		<scriptdata location="/etc/modprobe.d/video.conf" mode="0644" group="0" owner="0">
		<![CDATA[# module parameters
options vmwgfx enable_fbdev=1
]]>
		</scriptdata>
		<!-- <scriptdata location="/etc/rc.d/0055-debug.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash
	
#lesslinux provides debug-005
#lesslinux debug 5

PATH=/static/bin:/static/sbin:/bin:/sbin:/usr/bin:/usr/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors

now=`date '+%Y%M%d-%H%M%S' ` 

case $1 in
    start)
	startup_time=` cat /var/run/lesslinux/startup_time ` 
	cat /proc/bus/pci/devices > /lesslinux/debug/${startup_time}/${now}_pcidevices.txt
	cat /proc/devices > /lesslinux/debug/${startup_time}/${now}_devicenodes.txt
	cat /proc/modules > /lesslinux/debug/${startup_time}/${now}_modules.txt
	lsmod > /lesslinux/debug/${startup_time}/${now}_modules2.txt
	cat /proc/mounts > /lesslinux/debug/${startup_time}/${now}_mounts.txt
	dmesg > /lesslinux/debug/${startup_time}/${now}_dmesg.txt
	sleep 2
    ;;
esac
#		]]>
		</scriptdata> -->
		<scriptdata location="/etc/rc.d/0056-switchroot.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash

#lesslinux provides switchroot

PATH=/static/bin:/static/sbin:/bin:/sbin:/usr/bin:/usr/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors

case $1 in 
    start)
	if [ -n "$switchuuid" -a -x /static/sbin/blkid.static ] ; then 
		printf "$bold===> Switch RootFS $normal \n" 
		mkdir -p /var/run/lesslinux
		mkdir -p /newroot 
		rootdev=''
		trycount=0
		while [ -z "$rootdev" -a $trycount -lt 15 ] ; do
			rootdev=` /static/sbin/blkid.static -U "$switchuuid" ` 
			[ -z "$rootdev" ] && rootdev=` /static/sbin/blkid.static -L "$switchuuid" ` 
			readorwrite="ro"
			[ -n "$switchread" ] && readorwrite="$switchread" 
			[ -n "$rootdev" ] && mount -o "$readorwrite" "$rootdev" /newroot
			if mountpoint -q /newroot ; then
				firmloop=` cat /proc/mounts | grep ' /lib/firmware ' | awk '{print $1}' `
				umount $firmloop
				losetup -d $firmloop
				moduloop=` cat /proc/mounts | grep ' /lib/modules/' | awk '{print $1}' `
				umount $moduloop
				losetup -d $moduloop
				umount /tmp
				umount /home
				umount /dev/pts
				umount /dev/shm
				mount --move /sys /newroot/sys
				mount --move /proc /newroot/proc
				mount --move /dev /newroot/dev
				# This is needed by ChromiumOS - otherwise it will crash 
				mkdir -p /newroot/dev/.initramfs
				exit 0 
			fi
			trycount=` expr $trycount + 1 `
			sleep 2
		done
		mountpoint -q /newroot || touch /var/run/lesslinux/switchroot_failed 
	fi
    ;;
esac
#		]]>
		</scriptdata>
		<modlist provides="switchroot" hwenv="default">
			<module>crc16</module>
			<module>crc32</module>
			<module>crc7</module>
			<module>crc-ccitt</module>
			<module>crc-itu-t</module>
			<module>crc-t10dif</module>
			<!-- <module>libcrc32c</module> -->
			<module>zlib_deflate</module>
			<module>zlib_inflate</module>
			<module>scsi_mod</module>
			<module>sg</module>
			<module>sd_mod</module>
			<module>mbcache</module>
			<module>usbcore</module>
			<module>usb-libusual</module>
			<module>libusual</module>
			<module>ehci-hcd</module>
			<module>uhci-hcd</module>
			<module>ohci-hcd</module>
			<module>usb-storage</module>
			<module>sd_mod</module>
			<module>nls_cp437</module>
			<module>nls_cp1250</module>
			<module>nls_iso8859-1</module>
			<module>nls_iso8859-15</module>
			<module>nls_utf8</module>
			<module>jbd</module>
			<module>crc16</module>
			<module>crc32</module>
			<module>crc7</module>
			<module>crc-ccitt</module>
			<module>crc-itu-t</module>
			<module>crc-t10dif</module>
			<!-- <module>libcrc32c</module> -->
			<module>zlib_deflate</module>
			<module>zlib_inflate</module>
			<module>scsi_mod</module>
			<module>cdrom</module>
			<module>sr_mod</module>
			<module>sg</module>
			<module>sd_mod</module>
			<module>mbcache</module>
			<module>libata</module>
			<module>pata_acpi</module>
			<module>ata_piix</module>
			<module>ata_generic</module>
			<module>isofs</module>
			<module>usbcore</module>
			<module>ehci-hcd</module>
			<module>uhci-hcd</module>
			<module>ohci-hcd</module>
			<module>usb-libusual</module>
			<module>libusual</module>
			<module>usb-storage</module>
			<module>ahci</module>
			<module>pata_amd</module>
			<module>pata_ali</module>
			<module>pata_atiixp</module>
			<module>pata_atiixp</module>
			<module>pata_cmd640</module>
			<module>pata_cmd64x</module>
			<module>pata_cs5520</module>
			<module>pata_cs5530</module>
			<module>pata_cs5535</module>
			<module>pata_cs5536</module>
			<module>pata_cypress</module>
			<module>pata_efar</module>
			<module>pata_sis</module>
			<module>pata_via</module>
			<module>pata_marvell</module>
			<module>sata_mv</module>
			<module>sata_nv</module>
			<module>sata_promise</module>
			<module>sata_qstor</module>
			<module>sata_sil</module>
			<module>sata_sil24</module>
			<module>sata_sis</module>
			<module>sata_uli</module>
			<module>sata_via</module>
			<module>sata_vsc</module>
			<!-- and again -->
			<module>ahci</module>
			<module>pata_amd</module>
			<module>pata_ali</module>
			<module>pata_atiixp</module>
			<module>pata_atiixp</module>
			<module>pata_cmd640</module>
			<module>pata_cmd64x</module>
			<module>pata_cs5520</module>
			<module>pata_cs5530</module>
			<module>pata_cs5535</module>
			<module>pata_cs5536</module>
			<module>pata_cypress</module>
			<module>pata_efar</module>
			<module>pata_sis</module>
			<module>pata_via</module>
			<module>pata_marvell</module>
			<module>sata_mv</module>
			<module>sata_nv</module>
			<module>sata_promise</module>
			<module>sata_qstor</module>
			<module>sata_sil</module>
			<module>sata_sil24</module>
			<module>sata_sis</module>
			<module>sata_uli</module>
			<module>sata_via</module>
			<module>sata_vsc</module>
			<module>sd_mod</module>
			<module>mbcache</module>
			<module>jbd</module>
			<module>ext3</module>
			<module>fat</module>
			<module>vfat</module>
			<module>ntfs</module>
			<!-- and again -->
			<module>usbcore</module>
			<module>ehci-hcd</module>
			<module>uhci-hcd</module>
			<module>ohci-hcd</module>
			<module>libusual</module>
			<module>usb-storage</module>
			<module>sd_mod</module>
			<module>fuse</module>
		</modlist>
		<scriptdata location="/etc/rc.d/0060-earlynet.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash

#lesslinux provides earlynet

PATH=/static/bin:/static/sbin:/bin:/sbin:/usr/bin:/usr/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors

# Start Networking

case $1 in 
  start)
    if [ "$nonet" -gt 0 ] ; then
      printf "$bold===> Skipping networking $normal\n"
    else
      if [ "$dhcp" -gt 0 ] ; then
          printf "$bold===> Setting up early networking (DHCP/ethernet) $normal\n"
	  sleep $dhcpwait 
	  for i in 0 1 2 3 4 5 6 7 8 9 ; do
	      ifconfig eth${i} up > /dev/null 2>&1
	  done
	  sleep 3
	  ifconfig | grep 'encap:Ethernet' | awk '{print $1}' | while read iface ; do
	      udhcpc -q -s /static/share/udhcpc/default.script -i ${iface} > /dev/null 2>&1 &
	  done
	  sleep $dhcpwait 
      else
	  # staticnet=|iface|ip|mask|dns|gateway|
	  netif=` echo "$staticnet" | awk -F '|' '{print $2}' `
	  ip=` echo "$staticnet" | awk -F '|' '{print $3}' `
	  mask=` echo "$staticnet" | awk -F '|' '{print $4}' `
	  dns=` echo "$staticnet" | awk -F '|' '{print $5}' `
	  gw=` echo "$staticnet" | awk -F '|' '{print $6}' ` 
          printf "$bold===> Setting up networking (static/ethernet)                              "
          ifconfig $netif inet $ip netmask $mask
          echo "nameserver $dns" > /etc/resolv.conf
          route add default gw $gw
          if ifconfig $netif > /dev/null 2>&1 ; then
              printf "$success"
          else       
              printf "$failed"
          fi
      fi
    fi
  ;;
  stop)
    printf "$bold===> Stopping ethernet networking                                "
    if ifconfig $netif down > /dev/null 2>&1 ; then
      printf "$success"
    else
      printf "$failed"
    fi  
  ;;
esac    

printf "$normal"

# END		]]>
		</scriptdata>
		<modlist provides="earlynet" hwenv="default">
			<module>af_packet</module>
			<module>mii</module>
			<module>libphy</module>
		</modlist>
		<scriptdata location="/etc/rc.d/0062-entropy.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash

#lesslinux provides entropy

PATH=/static/bin:/static/sbin:/bin:/sbin:/usr/bin:/usr/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors

# Start entropy gathering daemon

case $1 in 
  start)
	printf "$bold===> Setting up entropy harvesting daemon $normal\n"
	[ -x /static/bin/haveged ] && /static/bin/haveged -w 4096
  ;;
esac    

printf "$normal"

# END		]]>
		</scriptdata>
		<scriptdata location="/etc/rc.d/0064-kexec.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash
		
#lesslinux provides kexec
#lesslinux verbose
#lesslinux license BSD

PATH=/static/bin:/static/sbin:/bin:/sbin:/usr/bin:/usr/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors
		
case $1 in
    start)
	if mountpoint -q /lesslinux/cdrom ; then
		printf "$bold---> No kexec when the system root is mounted. $normal\n"
		exit 1
	fi
	if [ -n "$kexec" ] && [ -f /static/sbin/kexec ] ; then
		printf "\n$bold---> Downloading and booting kernel. $normal\n"
		conf=""
		append=""
		if echo "$kexec" | grep -E -q '^(http|https|ftp)\://' ; then
			wget -O /etc/lesslinux/kexec/custom.conf "$kexec"
			conf="/etc/lesslinux/kexec/custom.conf"
		elif echo "$kexec" | grep -q '^/etc' ; then
			conf="$kexec"
		fi
		cat "$conf" | while read ln ; do
			key=` echo "$ln" | awk -F '::::' '{print $1}' `
			val=` echo "$ln" | awk -F '::::' '{print $2}' `
			if [ "$key" = "kernel" ] ; then
				wget -O /etc/lesslinux/kexec/kernel.knl "$val"
			fi
			if [ "$key" = "initrd" ] ; then
				touch /etc/lesslinux/kexec/initrd.img
				wget -O - "$val" >> /etc/lesslinux/kexec/initrd.img
			fi
			if [ "$key" = "append" ] ; then
				kexec --force --reset-vga --initrd=/etc/lesslinux/kexec/initrd.img --command-line="$val" /etc/lesslinux/kexec/kernel.knl
			fi
		done
		kexec --force --reset-vga --initrd=/etc/lesslinux/kexec/initrd.img /etc/lesslinux/kexec/kernel.knl
		printf "$bold---> Kexec failed. Reboot in 30s. $normal\n"
		sleep 30
		reboot
	fi
    ;;
esac

		]]>
		</scriptdata>
		<scriptdata location="/etc/rc.d/0070-hostname.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash
		
#lesslinux provides hostname
#lesslinux license BSD

PATH=/static/bin:/static/sbin:/bin:/sbin:/usr/bin:/usr/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors
		
case $1 in
    start)
        currhost=` hostname `
	if [ -z "$currhost" -o '?' = "$currhost" -o '(none)' = "$currhost" ] ; then
	    printf "$bold===> Setting hostname                                            "
	    if hostname "$hostname" > /dev/null 2>&1 ; then
	        printf "$success"
            else       
                printf "$failed"
            fi
	fi
	currhost="$hostname"
	if [ -f /etc/hosts ] ; then
	    if grep "$currhost" /etc/hosts > /dev/null 2>&1 ; then
		printf "$bold---> Hostname already in /etc/hosts $normal\n"
	    else
		echo "127.0.0.1 $currhost" >> /etc/hosts
	    fi
	else
	    echo "127.0.0.1 localhost $currhost" > /etc/hosts
	fi
    ;;
esac

# END		]]>
		</scriptdata>
		<scriptdata location="/etc/rc.d/0080-smack.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash
		
#lesslinux provides smack
#lesslinux license BSD
		
PATH=/static/bin:/static/sbin:/bin:/sbin:/usr/bin:/usr/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors		
		
case $1 in 
    start)	
        if [ "$security" = "smack" ] ; then
	    printf "$bold===> Enable Simple Mandatory Access Control Kernel$normal\n"
	    # bend some softlinks for the patched tools
	    for i in id ls stat find adduser login su crontab ps ; do
	        ln -sf /static/bin/busybox_smack /static/bin/$i
	    done
	    for i in sulogin crond newsmack smackcipso smackenabled smackload ; do
	        ln -sf /static/bin/busybox_smack /static/sbin/$i
	    done
	    # Set some security labels (we need /usr/bin/attr or /static/bin/attr here!)
	    printf "$bold===> xattr on tmpfs root filesystem might be set here\n"
	    # Mount smackfs
	    mkdir /smack > /dev/null 2>&1
	    mount -t smackfs smackfs /smack
	    # load the appropriate rules and users
	    if [ -f /etc/smack/accesses ] ; then
		smackload < /etc/smack/accesses
	    fi
            if [ -f /etc/smack/cipso ] ; then
                smackcipso < /etc/smack/cipso
            fi
            if [ -f /etc/smack/ambient ] ; then
                cat /etc/smack/ambient > /smack/ambient
            fi
            if [ -f /etc/smack/nltype ] ; then
                cat /etc/smack/nltype > /smack/nltype
            fi
	    if [ -f /etc/smack/netlabel ] ; then
                echo '127.0.0.1/32 @' > /smack/netlabel
		if echo "$skipservices" | grep -q '|smacknet|' ; then
		    # FIXME: Should not be hardcoded
		    # echo '172.16.0.0/16 outgoing' > /smack/netlabel
		    # echo '192.168.0.0/16 outgoing' > /smack/netlabel
		    # echo '169.254.0.0/16 outgoing' > /smack/netlabel
		    echo '0.0.0.0/0 bankcfg' > /smack/netlabel
		else
		    echo '0.0.0.0/0 outgoing' > /smack/netlabel
		fi
            fi
	fi
    ;;
esac

# END		]]>
		</scriptdata>
		<!-- ACHTUNG: /etc/smack/accesses darf nicht auf Newline enden -->
		<scriptdata location="/etc/smack/accesses" mode="0644" group="0" owner="0">
		<![CDATA[internet	_		rwxa
_ 		internet	rwxa
internet	usrbin		r---
_		usrbin		r-x-
netmgr		usrbin		r-x-
_		netmgr		rwx-
internet	outgoing	rw--
netmgr		outgoing	rw--
outgoing	internet	rw--
outgoing	netmgr          rw--]]>
		</scriptdata>
		<scriptdata location="/etc/smack/user" mode="0644" group="0" owner="0">
		<![CDATA[root _ +
surfer _ internet
]]>
		</scriptdata>
		<scriptdata location="/etc/smack/netlabel" mode="0644" group="0" owner="0">
		<![CDATA[127.0.0.1/32 @
0.0.0.0/0 outgoing
]]>
		</scriptdata>
		<!-- <scriptdata location="/etc/rc.d/0103-movepart.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash
		
#lesslinux provides movepart
#lesslinux license BSD		
#lesslinux silent

PATH=/static/bin:/static/sbin:/bin:/sbin:/usr/bin:/usr/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors

mark_done() {
	devname=$1
	mount -o rw $devname /lesslinux/part2
	touch /lesslinux/part2/resiz.ed
	find /lesslinux/part2 -type f -name '*.cfg' -exec sed -i 's/movepart=/uuid=/g' {} \;
	umount /lesslinux/part2
	rmdir /lesslinux/part2
}

case $1 in 
	start)
		if [ -n "$movepart" ] ; then 
			for i in ` seq $usbwait ` ; do
				devname=` blkid.static -U $movepart `
				if [ -n "$devname" ] ; then
					chvt 8
					echo "===> Adjusting drive geometry once - do not interrupt." > /dev/tty8
					echo "     Please be patient." > /dev/tty8
					fulldev=` echo "$devname" | sed 's/[0-9]$//g `
					mkdir -p /lesslinux/part2
					mount -o ro $devname /lesslinux/part2
					if [ -f /lesslinux/part2/resiz.ed ] ; then
						umount /lesslinux/part2
						rmdir /lesslinux/part2
						exit 0
					fi
					umount /lesslinux/part2
					devicesize=` parted -sm $fulldev unit B print | head -n2 | tail -n1 | awk -F ':' '{print $2}' | sed 's/B//' `
					secpartstart=` parted -sm $fulldev unit B print | grep '^2:' | awk -F ':' '{print $2}' | sed 's/B//' `
					secpartend=` parted -sm $fulldev unit B print | grep '^2:' | awk -F ':' '{print $3}' | sed 's/B//' ` 
					lastpartend=` expr $devicesize - 1048577 `
					deltamove=` expr $lastpartend - $secpartend ` 
					thirdpartstart=` expr $secpartstart + $deltamove ` 
					firstpartstart=` expr 63 '*' 512 ` 
					firstpartend=` expr $thirdpartstart - 1 ` 
					if [ "$thirdpartstart" -gt "$secpartend" ] ; then
						echo "     Creating partition." > /dev/tty8
						parted -s $fulldev unit B mkpart primary ext2 $thirdpartstart $lastpartend
						mdev -s
						echo "     Moving data." > /dev/tty8
						dd if=${fulldev}2 of=${fulldev}3 bs=1M
						parted -s $fulldev unit B rm 2
						mark_done ${fulldev}3
					else
						echo "     Drive too small. Exiting." > /dev/tty8
						mark_done ${fulldev}2
						chvt 1
						exit 0
					fi
					mkdir -p /lesslinux/part1
					mkdir -p /lesslinux/p1tmp
					mount -o ro ${fulldev}1 /lesslinux/part1
					echo "     Saving data from partition 1." > /dev/tty8
					tar cvf - /lesslinux/part1 | gzip -c > /lesslinux/p1tmp/p1.tgz
					sumis=` md5sum /lesslinux/p1tmp/p1.tgz | awk '{print $1}' `
					shouldbe=` tar cvf - /lesslinux/part1 | gzip -c | md5sum | awk '{print $1}' ` 
					if [ "$sumis" = "$shouldbe" ] ; then
						echo "     Creating partition." > /dev/tty8
						umount /lesslinux/part1
						parted -s $fulldev unit B rm 1
						parted -s $fulldev unit B mkpart primary fat32 $firstpartstart $firstpartend
						sleep 3
						mdev -s
						sleep 3
						mdev -s
						mkfs.vfat "${device}1"           
						echo "     Unpacking data." > /dev/tty8
						mount -o rw "${device}1" /lesslinux/part1
						( cd / ; gunzip -c /lesslinux/p1tmp/p1.tgz | tar xf - )
						umount /lesslinux/part1
						rmdir /lesslinux/part1
						rm /lesslinux/p1tmp/p1.tgz
					else
						echo "     ERROR saving data." > /dev/tty8
						umount /lesslinux/part1
						rmdir /lesslinux/part1
						rm /lesslinux/p1tmp/p1.tgz
						chvt 1
						exit 1
					fi
					chvt 1
					exit 0
				else
					sleep 2
				fi
			done
		fi
	;;
esac
		
		]]>
		</scriptdata> -->
		<scriptdata location="/etc/rc.d/0100-selfdesctruction.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash
		
#lesslinux provides uninstall
#lesslinux license BSD		
#lesslinux silent

PATH=/static/bin:/static/sbin:/bin:/sbin:/usr/bin:/usr/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors

case $1 in 
	start)
		if grep -q ' uninstall=full' /proc/cmdline && [ '!' "$uuid" = "all" ] && [ -n "$uuid" ] ; then 
			for i in ` seq $usbwait ` ; do
				devname=` blkid.static -U $uuid `
				if [ -n "$devname" ] ; then
					chvt 8
					echo "===> Uninstalling LessLinux, converting drive to single partition FAT32" > /dev/tty8
					echo "     Please be patient." > /dev/tty8
					fulldev=` echo "$devname" | sed 's/[0-9]$//g' `
					devicesize=` parted -sm $fulldev unit B print | head -n2 | tail -n1 | awk -F ':' '{print $2}' | sed 's/B//' `
					partstart=` expr 63 '*' 512 ` 
					partend=` expr $devicesize - 1048577 `
					if [ -n "$fulldev" ] ; then
						echo "     Delete partition table and create new partition." > /dev/tty8
						dd if=/dev/zero bs=1048576 count=1 of="$fulldev"
						parted -s $fulldev unit B mklabel msdos
						parted -s $fulldev unit B mkpart primary fat32 $partstart $partend
						parted -s $fulldev unit B set 1 lba  on
						sleep 5
						mdev -s 
						sleep 5
						echo "     Write file system." > /dev/tty8
						if [ -x /static/sbin/mkntfs.static ] ; then
							mkntfs.static -F -Q -L USBDATA "${fulldev}1"
						else
							mkfs.vfat -n USBDATA "${fulldev}1"
						fi
						sync 
						echo "     Poweroff." > /dev/tty8
						poweroff 
					fi
				else
					sleep 5
				fi
			done
		fi
	;;
esac
		
		]]>
		</scriptdata>
		<modlist provides="uninstall" hwenv="default">
			<module>crc16</module>
			<module>crc32</module>
			<module>crc7</module>
			<module>crc-ccitt</module>
			<module>crc-itu-t</module>
			<module>crc-t10dif</module>
			<!-- <module>libcrc32c</module> -->
			<module>zlib_deflate</module>
			<module>zlib_inflate</module>
			<module>scsi_mod</module>
			<module>sg</module>
			<module>sd_mod</module>
			<module>mbcache</module>
			<module>usbcore</module>
			<module>usb-libusual</module>
			<module>libusual</module>
			<module>ehci-hcd</module>
			<module>uhci-hcd</module>
			<module>ohci-hcd</module>
			<module>usb-storage</module>
			<module>sd_mod</module>
			<module>nls_cp437</module>
			<module>nls_cp1250</module>
			<module>nls_iso8859-1</module>
			<module>nls_iso8859-15</module>
			<module>nls_utf8</module>
			<module>jbd</module>
			<module>crc16</module>
			<module>crc32</module>
			<module>crc7</module>
			<module>crc-ccitt</module>
			<module>crc-itu-t</module>
			<module>crc-t10dif</module>
			<!-- <module>libcrc32c</module> -->
			<module>zlib_deflate</module>
			<module>zlib_inflate</module>
			<module>scsi_mod</module>
			<module>cdrom</module>
			<module>sr_mod</module>
			<module>sg</module>
			<module>sd_mod</module>
			<module>mbcache</module>
			<module>libata</module>
			<module>pata_acpi</module>
			<module>ata_piix</module>
			<module>ata_generic</module>
			<module>isofs</module>
			<module>usbcore</module>
			<module>ehci-hcd</module>
			<module>uhci-hcd</module>
			<module>ohci-hcd</module>
			<module>usb-libusual</module>
			<module>libusual</module>
			<module>usb-storage</module>
			<module>ahci</module>
			<module>pata_amd</module>
			<module>pata_ali</module>
			<module>pata_atiixp</module>
			<module>pata_atiixp</module>
			<module>pata_cmd640</module>
			<module>pata_cmd64x</module>
			<module>pata_cs5520</module>
			<module>pata_cs5530</module>
			<module>pata_cs5535</module>
			<module>pata_cs5536</module>
			<module>pata_cypress</module>
			<module>pata_efar</module>
			<module>pata_sis</module>
			<module>pata_via</module>
			<module>pata_marvell</module>
			<module>sata_mv</module>
			<module>sata_nv</module>
			<module>sata_promise</module>
			<module>sata_qstor</module>
			<module>sata_sil</module>
			<module>sata_sil24</module>
			<module>sata_sis</module>
			<module>sata_uli</module>
			<module>sata_via</module>
			<module>sata_vsc</module>
			<!-- and again -->
			<module>ahci</module>
			<module>pata_amd</module>
			<module>pata_ali</module>
			<module>pata_atiixp</module>
			<module>pata_atiixp</module>
			<module>pata_cmd640</module>
			<module>pata_cmd64x</module>
			<module>pata_cs5520</module>
			<module>pata_cs5530</module>
			<module>pata_cs5535</module>
			<module>pata_cs5536</module>
			<module>pata_cypress</module>
			<module>pata_efar</module>
			<module>pata_sis</module>
			<module>pata_via</module>
			<module>pata_marvell</module>
			<module>sata_mv</module>
			<module>sata_nv</module>
			<module>sata_promise</module>
			<module>sata_qstor</module>
			<module>sata_sil</module>
			<module>sata_sil24</module>
			<module>sata_sis</module>
			<module>sata_uli</module>
			<module>sata_via</module>
			<module>sata_vsc</module>
			<module>sd_mod</module>
			<module>mbcache</module>
			<module>jbd</module>
			<module>ext3</module>
			<module>ext2</module>
			<module>ext4</module>
			<module>fat</module>
			<module>vfat</module>
			<module>ntfs</module>
			<!-- and again -->
			<module>usbcore</module>
			<module>ehci-hcd</module>
			<module>uhci-hcd</module>
			<module>ohci-hcd</module>
			<module>libusual</module>
			<module>usb-storage</module>
			<module>sd_mod</module>
		</modlist>
		<scriptdata location="/etc/rc.d/0105-nfssys.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash
		
#lesslinux provides nfssys
#lesslinux license BSD

PATH=/static/bin:/static/sbin:/bin:/sbin:/usr/bin:/usr/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors

case $1 in 
	start)
		if [ -f /var/run/lesslinux/cdfound ] ; then
			printf "$bold===> Skip search for LESSLINUX system on NFS$normal\n"
		elif [ -n "$nfs" -o -n "$cifs" ] ; then 
			mkdir /lesslinux/cdrom
			mkdir /lesslinux/isoloop
			thisversion=` cat /etc/lesslinux/updater/version.txt `
			if [ -n "$nfs" ] ; then
				/static/bin/mount -t nfs -o ro,nolock,noatime,proto=tcp "$nfs" /lesslinux/cdrom
			else
				unc=` echo -n "$cifs" | sed 's%/%\\\\%g' ` 
				/static/bin/mount -t cifs  -o ro,sec=ntlm,user=guest,unc="$unc" "$cifs" /lesslinux/cdrom
			fi
			find /lesslinux/cdrom -type f -name '*.iso' -maxdepth 3 | while read isofile ; do
				printf "$bold...> Checking ISOLOOP $isofile $normal\n"
				free_loop=` losetup -f `
				losetup $free_loop $isofile
				mount $free_loop /lesslinux/isoloop > /dev/null 2>&1
				thatversion=` cat /lesslinux/isoloop/${contdir}/version.txt ` 2> /dev/null
				if [ "$thisversion" = "$thatversion" ] ; then
					# FIXME! Move blobsearch to a separate function
					# FIXME! Newer files should win!
					if [ -d "/lesslinux/isoloop/${contdir}/blob" ] ; then
						mkdir -p /lesslinux/blob
						find "/lesslinux/isoloop/${contdir}/blob" -maxdepth 1 | while read fname ; do
							[ -f "$fname" -o -d "$fname" ] && \
								ln -sf "$fname" /lesslinux/blob/` basename "$fname" ` 
						done
					fi
					touch /var/run/lesslinux/cdfound
					touch /var/run/lesslinux/isoloop
					echo -n "$free_loop" > /var/run/lesslinux/install_source
					echo "bootdevice=nfs" > /var/run/lesslinux/startup_vars
				        echo "bootmode=loop" >> /var/run/lesslinux/startup_vars
				        echo "loopfile=$isofile" >> /var/run/lesslinux/startup_vars
				        echo "loopdev=$free_loop" >> /var/run/lesslinux/startup_vars
					echo "isohybrid=false" >> /var/run/lesslinux/startup_vars
				else
					umount /lesslinux/isoloop > /dev/null 2>&1
					losetup -d $free_loop > /dev/null 2>&1
				fi
			done
			[ -f /var/run/lesslinux/cdfound ] || umount /lesslinux/cdrom 2>/dev/null
		fi
	;;
esac

		
		]]>
		</scriptdata>
		<modlist provides="nfssys" hwenv="default">
			<module>auth_rpcgss</module>
			<module>nfs_acl</module>
			<module>lockd</module>
			<module>nfs</module>
			<module>crc16</module>
			<module>crc32</module>
			<module>crc7</module>
			<module>crc-ccitt</module>
			<module>crc-itu-t</module>
			<module>crc-t10dif</module>
			<!-- <module>libcrc32c</module> -->
			<module>zlib_deflate</module>
			<module>zlib_inflate</module>
			<module>nls_cp437</module>
			<module>nls_cp1250</module>
			<module>nls_iso8859-1</module>
			<module>nls_iso8859-15</module>
			<module>nls_utf8</module>
			<module>crc16</module>
			<module>crc32</module>
			<module>crc7</module>
			<module>crc-ccitt</module>
			<module>crc-itu-t</module>
			<module>crc-t10dif</module>
			<!-- <module>libcrc32c</module> -->
			<module>zlib_deflate</module>
			<module>zlib_inflate</module>
			<module>isofs</module>
			<module>cifs</module>
			<module>ecb</module>
			<module>sha1</module>
			<module>sha256</module>
			<module>sha512</module>
			<module>des</module>
			<module>md4</module>
			<module>sunrpc</module>
			<module>nfsv3</module>
			<module>fscache</module>
		</modlist>
		<scriptdata location="/etc/rc.d/0106-wgetsys.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash
		
#lesslinux provides wgetsys
#lesslinux license BSD
#lesslinux verbose

PATH=/static/bin:/static/sbin:/bin:/sbin:/usr/bin:/usr/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors


case $1 in 
	start)
		isofile=/lesslinux/ramiso/lesslinux.iso
		if [ -f /var/run/lesslinux/cdfound ] ; then
			printf "$bold===> Skip search for LESSLINUX System $normal\n"
		elif [ -n "$wgetiso" ] ; then
			if [ -x /static/bin/curl ] && echo "$wgetiso" | grep -q '^http://' ; then
				tmpsize=` curl -I "$wgetiso" | grep Content-Length | awk '{print $2}' `
				overlay=` echo -n "$wgetiso" | sed 's/iso$/tgz/g' ` 
				ovrsize=` curl -I "$overlay" | grep '^Content-Length' | awk '{print $2}' `
				if [ "$tmpsize" -gt 0 ] ; then
					if [ "$ovrsize" -gt 0 ] ; then
						mkdir -p /etc/lesslinux/branding/overlays
						curl -o /etc/lesslinux/branding/overlays/overlay7.tgz "$overlay"
					fi
					wgetsize=` expr "$tmpsize" / 1024 + 16384 ` 
				fi
			fi
			[ "$wgetsize" -lt 1 ] && wgetsize=1048576
			mkdir -p /lesslinux/ramiso
			mount -t tmpfs -o mode=0755,size=${wgetsize}k  tmpfs  /lesslinux/ramiso 
			thisversion=` cat /etc/lesslinux/updater/version.txt `
			printf "$bold===> Downloading LESSLINUX System $normal\n"
			mkdir -p /lesslinux/cdrom
			mkdir -p /lesslinux/isoloop
			if echo "$wgetiso" | grep -q '^tftp://' ; then
				hostpath=` echo "$wgetiso" | sed 's%^tftp://%%g' | sed 's%/% %' `
				tftphost=` echo $hostpath | awk '{print $1}' `
				tftppath=` echo $hostpath | awk '{print $2}' `
				tftp -g -b 32768 -l "$isofile" -r "$tftppath" "$tftphost"
			else
				if [ -x /static/bin/curl ] ; then
					if [ "$console" = tty2 ] ; then
						chvt 8
						curl -o "$isofile" "$wgetiso" 2> /dev/tty8 
						chvt 2
					else
						curl -o "$isofile" "$wgetiso"
					fi
				else
					wget -O "$isofile" "$wgetiso"
				fi
			fi
			free_loop=` losetup -f `
			losetup $free_loop $isofile
			mount $free_loop /lesslinux/isoloop > /dev/null 2>&1
			thatversion=` cat /lesslinux/isoloop/${contdir}/version.txt ` 2> /dev/null
			if [ "$thisversion" = "$thatversion" ] ; then
				# FIXME! Move blobsearch to a separate function
				# FIXME! Newer files should win!
				if [ -d "/lesslinux/isoloop/${contdir}/blob" ] ; then
					mkdir -p /lesslinux/blob
					find "/lesslinux/isoloop/${contdir}/blob" -maxdepth 1 | while read fname ; do
						[ -f "$fname" -o -d "$fname" ] && \
							ln -sf "$fname" /lesslinux/blob/` basename "$fname" ` 
					done
				fi
				touch /var/run/lesslinux/cdfound
				touch /var/run/lesslinux/isoloop
				echo -n "$free_loop" > /var/run/lesslinux/install_source
				echo "bootdevice=wget" > /var/run/lesslinux/startup_vars
				echo "bootmode=loop" >> /var/run/lesslinux/startup_vars
				echo "loopfile=$isofile" >> /var/run/lesslinux/startup_vars
				echo "loopdev=$free_loop" >> /var/run/lesslinux/startup_vars
				echo "isohybrid=false" >> /var/run/lesslinux/startup_vars
			else
				umount /lesslinux/isoloop > /dev/null 2>&1
				losetup -d $free_loop     > /dev/null 2>&1
				umount /lesslinux/cdrom   > /dev/null 2>&1
				# rm "$isofile"
			fi
		fi
	;;
esac

		
		]]>
		</scriptdata>
		<modlist provides="wgetsys" hwenv="default">
			<module>crc16</module>
			<module>crc32</module>
			<module>crc7</module>
			<module>crc-ccitt</module>
			<module>crc-itu-t</module>
			<module>crc-t10dif</module>
			<!-- <module>libcrc32c</module> -->
			<module>zlib_deflate</module>
			<module>zlib_inflate</module>
			<module>nls_cp437</module>
			<module>nls_cp1250</module>
			<module>nls_iso8859-1</module>
			<module>nls_iso8859-15</module>
			<module>nls_utf8</module>
			<module>crc16</module>
			<module>crc32</module>
			<module>crc7</module>
			<module>crc-ccitt</module>
			<module>crc-itu-t</module>
			<module>crc-t10dif</module>
			<!-- <module>libcrc32c</module> -->
			<module>zlib_deflate</module>
			<module>zlib_inflate</module>
			<module>isofs</module>
		</modlist>
		<scriptdata location="/etc/rc.d/0110-searchsys.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash

#lesslinux provides searchsys
#lesslinux license BSD
#lesslinux patience

PATH=/static/bin:/static/sbin:/bin:/sbin:/usr/bin:/usr/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors
. /etc/lesslinux/branding/branding.en.sh
[ -f "/etc/lesslinux/branding/branding.${lang}.sh" ] && . /etc/lesslinux/branding/branding.${lang}.sh
. /etc/rc.lang/en/messages.sh
[ -f "/etc/rc.lang/$lang/messages.sh" ] && . /etc/rc.lang/$lang/messages.sh
. /etc/rc.subr/progressbar

iso_gpt_convert() {
	echo -e '\033[9;0]\033[14;0]' > /dev/console
	device="$1"
	# Text mode conversion on TTY8 when ultraquiet is not set:
	if [ "$ultraquiet" -lt 2 ] ; then
		chvt 8
		echo "===> Converting ISOhybrid to GPT drive with proper FS, this may take some time" > /dev/tty8
		echo "     but it is done only once..." > /dev/tty8
	fi
	# GUI conversion on TTY8 when fbsplash is running
	if [ "$ultraquiet" -eq 3 -a -p /splash.fifo ] ; then
		echo 0 > /splash.fifo
		fbsplash -i /etc/lesslinux/fbsplash_text.cfg -s /etc/lesslinux/branding/fbsplash/01driveconf.ppm 
	fi
	[ "$skipcheck" -lt 2 ] && run_self_test cdrom
	[ "$ultraquiet" -gt 1 ] && genericpgbar 0 32 "$convert_head" "$convert_prepare" "" tty1
	[ "$ultraquiet" -eq 3 -a -p /splash.fifo ] && echo 90 > /splash.fifo
	
	# When installed from batchinstall or USB install the ISOhybrid MBR gets nuked,
	# it should be saved to a file than. Try to find it! On a direct install
	# from Win32DiskImager or dd we should not need it.
	
	# Copy the saved MBR first
	mkdir -p /lesslinux/boot
	mount -t ext4 -o ro ${device}2 /lesslinux/boot
	[ -f /lesslinux/boot/isohybridmbr.bin ] && cp -v /lesslinux/boot/isohybridmbr.bin /tmp
	umount /lesslinux/boot
	
	# Size of boot/isolinux directory in kilobytes
	bootsize=` du -sk /lesslinux/cdrom/boot | awk '{print $1}' `
	efidirsize=` du -sk /lesslinux/cdrom/boot/efi | awk '{print $1}' `
	[ -z "$efidirsize" ] && efidirsize=0
	bootsize=` expr $bootsize - $efidirsize ` 
	# Size of boot partition in count of 8MB blocks - roughly add 50% for updates
	bootblocks=` expr $bootsize / 5461 + 1 ` 
	
	# Size of boot/efi.img in bytes
	efisize=` ls -la /lesslinux/cdrom/boot/efi/efi.img | awk '{print $5}' ` 
	[ -z "$efisize" ] && efisize=0 
	# Size of EFI boot partition in count of 8MB blocks - roughly add 50% for updates
	efiblocks=` expr $efisize / 5592404 ` 
	[ "$efiblocks" -lt 1 ] && efiblocks=1
	# Size of ISO image in kilobytes
	isosize=` df -k | grep '/lesslinux/cdrom' | awk '{print $3}' `
	# Size of ISO partition in count of 8MB blocks - roughly add 25% for updates
	isoblocks=` expr $isosize / 6553 + 1 ` 
	# echo "Isoblocks: $isoblocks"
	# Size of device in kilobyte blocks
	shortdev=` echo -n $device | sed 's%/dev/%%g' ` 
	devicesize=` cat /proc/partitions | grep "$shortdev"'$' | awk '{print $3}' ` 
	# Size of device in 8MB blocks - there might be little bit less than 8MB left out
	deviceblocks=` expr $devicesize / 8192 ` 
	# echo "Deviceblocks: $deviceblocks"
	hcminblocks=0
	hcmaxblocks=0 
	if [ "$homecontmax" -gt 0 ] ; then
		hcmaxblocks=` expr $homecontmax / 8 ` 
		hcminblocks=` expr $homecontmin / 8 ` 
	fi
	# blobblocks 
	blobblocks=0
	if [ "$blobsize" -gt 63 ] ; then
		blobblocks=` expr $blobsize / 8 ` 
	else
		blobblocks=1
	fi
	# Swap size
	swapblocks=0
	if [ "$swapsize" -gt 63 ] ; then
		swapblocks=` expr $swapsize / 8 ` 
	else
		swapblocks=1
	fi
	# Now check for minimum free space - FIXME: 128MB are not good to be hard coded
	neededblocks=` expr $isoblocks + $isoblocks + $bootblocks + $efiblocks + $hcminblocks + $blobblocks + $swapblocks + 16 `
	# echo "Neededblocks: $neededblocks"
	if [ "$deviceblocks" -lt "$neededblocks" ] ; then
		# Try without swap:
		swapblocks=1
		neededblocks=` expr $isoblocks + $isoblocks + $bootblocks + $efiblocks + $hcminblocks + $blobblocks + $swapblocks + 16 `
		if [ "$deviceblocks" -lt "$neededblocks" ] ; then
			hcminblocks=0
			hcmaxblocks=0 
			neededblocks=` expr $isoblocks + $isoblocks + $bootblocks + $efiblocks + $hcminblocks + $blobblocks + $swapblocks + 16 `
			if [ "$deviceblocks" -lt "$neededblocks" ] ; then
				[ "$ultraquiet" -lt 3 ] && echo "===> FAILED. Device too small." > /dev/tty8
				echo "isohybrid=true" >> /var/run/lesslinux/startup_vars
				[ "$ultraquiet" -lt 3 ] && chvt 1
				return 1
			fi
		fi
	fi
	
	# Delete some MB at the end of the disk to remove remaining GUID backup table
	dd if=/dev/zero of=$device bs=8388608 seek=` expr $deviceblocks - 4 ` 2>/dev/null
	
	# Copy license information that might be hidden
	dd if=$device of=/tmp/license.bin bs=1024 skip=2 count=1 
	
	# Let the games begin...
	umount /lesslinux/cdrom
	lastct=` expr $isoblocks - 1 ` 
	[ "$ultraquiet" -lt 3 ] && echo '---> Moving filesystem' > /dev/tty8
	[ "$ultraquiet" -lt 3 ] && echo -n '0%' > /dev/tty8
	[ "$ultraquiet" -gt 1 ] && genericpgbar 0 32 "$convert_head" "$convert_move" "" tty1
	
	if [ "$ultraquiet" -eq 3 -a -p /splash.fifo ] ; then
		echo 0 > /splash.fifo
		fbsplash -i /etc/lesslinux/fbsplash_text.cfg -s /etc/lesslinux/branding/fbsplash/02driveconf.ppm 
	fi
	
	for i in ` seq 0 $lastct ` ; do
		percentage=` expr ${i}00 / ${isoblocks} `
		[ "$ultraquiet" -lt 3 ] && printf '\033[10D' > /dev/tty8 
		[ "$ultraquiet" -lt 3 ] && printf "${percentage}" > /dev/tty8
		[ "$ultraquiet" -lt 3 ] && echo -n '%' > /dev/tty8
		[ -p /splash.fifo ] && echo "${percentage}" > /splash.fifo
		# go backwards
		copyblock=` expr $lastct - $i ` 
		tries=0
		copyok=0
		while [ $tries -lt 9 -a $copyok -lt 1 ] ; do
			dd if=$device of=/lesslinux/copyblock.bin bs=8388608 count=1 skip=$copyblock 2>/dev/null
			dd if=/lesslinux/copyblock.bin of=$device bs=8388608 count=1 seek=` expr $deviceblocks - $i - 2 ` 2>/dev/null
			sync
			dd if=$device of=/lesslinux/checkblock.bin bs=8388608 count=1 skip=` expr $deviceblocks - $i - 2 ` 2>/dev/null
			md5in=` sha1sum /lesslinux/copyblock.bin | awk '{print $1}' ` 
			md5out=` sha1sum /lesslinux/checkblock.bin | awk '{print $1}' ` 
			tries=` expr $tries + 1 ` 
			if [ $md5in = $md5out ] ; then
				copyok=1
				[ "$ultraquiet" -gt 1 ] && genericpgbar ${percentage} 32 "$convert_head" "${convert_move} - ${percentage}%" "" tty1
			else
				echo "COPY FAILED on $i - trying again. Please consider replacing the target drive!" > /dev/tty8
				[ "$ultraquiet" -gt 1 ] && genericpgbar ${percentage} 32 "$convert_head" "${convert_move} - ${percentage}%" "${convert_error} ${i}" tty1
				[ -p /splash.fifo ] && fbsplash -i /etc/lesslinux/fbsplash_text.cfg -s /etc/lesslinux/branding/fbsplash/07driveconf.ppm 
			fi
		done
	done
	[ "$ultraquiet" -lt 3 ] && printf '\033[10D' > /dev/tty8 
	[ "$ultraquiet" -lt 3 ] && echo '100%' > /dev/tty8
	[ "$ultraquiet" -gt 1 ] && genericpgbar 100 32 "$convert_head" "${convert_move} - 100%" "" tty1
	[ -p /splash.fifo ] && echo 100 > /splash.fifo
	rm /lesslinux/copyblock.bin /lesslinux/checkblock.bin 
	
	[ "$ultraquiet" -lt 3 ] && echo '---> Creating partition table and bootloader' > /dev/tty8
	[ "$ultraquiet" -gt 1 ] && genericpgbar 0 32 "$convert_head" "${convert_mkfs}" "" tty1
	[ -p /splash.fifo ] && fbsplash -i /etc/lesslinux/fbsplash_text.cfg -s /etc/lesslinux/branding/fbsplash/05driveconf.ppm
	
	# Recalculate the possible size of the partition for the encrypted home container
	hcblocks=1
	if [ "$homecontmax" -gt 0 ] ; then
		hcmaxblocks=` expr $homecontmax / 8 ` 
		hcminblocks=` expr $homecontmin / 8 ` 
		hcpossible=` expr $deviceblocks - $isoblocks - $isoblocks - $bootblocks - $efiblocks - $blobblocks - $swapblocks - 40 ` 
		if [ "$hcpossible" -gt $hcmaxblocks ] ; then
			hcblocks=$hcmaxblocks
		else
			hcblocks=$hcpossible
		fi
	fi
	
	# Create eight partitions: userdata (1), legacy boot (2), EFI boot (3), blob (4), encrypted home (5), encrypted swap (6), system reserved (for updates, 7), system ISO (8)
	eighthpartstart=`   expr '(' $deviceblocks - $isoblocks - 1 ')' '*' 8388608 `
	seventhpartstart=`  expr '(' $deviceblocks - $isoblocks - $isoblocks - 1 ')' '*' 8388608 `
	sixthpartstart=`    expr '(' $deviceblocks - $isoblocks - $isoblocks - $swapblocks - 1 ')' '*' 8388608 `
	fifthpartstart=`    expr '(' $deviceblocks - $isoblocks - $isoblocks - $swapblocks - $hcblocks - 1 ')' '*' 8388608 `
	fourthpartstart=`   expr '(' $deviceblocks - $isoblocks - $isoblocks - $swapblocks - $hcblocks - $blobblocks - 1 ')' '*' 8388608 `
	thirdpartstart=`    expr '(' $deviceblocks - $isoblocks - $isoblocks - $swapblocks - $hcblocks - $blobblocks - $efiblocks - 1 ')' '*' 8388608 `
 	secpartstart=`      expr '(' $deviceblocks - $isoblocks - $isoblocks - $swapblocks - $hcblocks - $blobblocks - $efiblocks - $bootblocks - 1 ')' '*' 8388608 `
	
	# Now overwrite the start of the device
	dd if=/dev/zero bs=1024 count=1024 of="$device"
	# First create an DOS MBR with an active partition 
	##parted -s $device unit B mklabel msdos
	##parted -s $device unit B mkpart primary fat32 512 ` expr $thirdpartstart - 1 `
	##parted -s $device unit B mkpart primary fat32 $thirdpartstart ` expr $fourthpartstart - 1 `
	##parted -s $device unit B mkpart primary fat32 $fourthpartstart '100%'
	##parted -s $device unit B set 2 boot on
	##parted -s $device unit B set 2 esp on
	##printf "print\nt\n3\n17\nwrite\nquit\n" | /static/sbin/fdisk $device
	##printf "print\nt\n1\nee\nwrite\nquit\n" | /static/sbin/fdisk $device
	sync
	# Now backup this partition table
	##dd if="$device" of=/tmp/legacy.mbr bs=512 count=1
	##dd if=/dev/zero bs=1024 count=1 of="$device"
	# Create the GPT partition table
	parted -s $device unit B mklabel gpt
	sync
	mdev -s
	
	[ "$ultraquiet" -gt 1 ] && genericpgbar 5 32 "$convert_head" "${convert_mkfs}" "" tty1
	[ -p /splash.fifo ] && echo 5 > /splash.fifo
	
	# First partition - data
	parted -s $device unit B mkpart "${brandshort}-DATA" fat32 8388608 ` expr $secpartstart - 1 `  
	[ "$ultraquiet" -gt 1 ] && genericpgbar 10 32 "$convert_head" "${convert_mkfs}" "" tty1
	[ -p /splash.fifo ] && echo 10 > /splash.fifo
	
	# Second partition - legacy boot
	parted -s $device unit B mkpart "${brandshort}-BIOS" ext2 $secpartstart ` expr $thirdpartstart - 1 ` 
	[ "$ultraquiet" -gt 1 ] && genericpgbar 15 32 "$convert_head" "${convert_mkfs}" "" tty1
	[ -p /splash.fifo ] && echo 15 > /splash.fifo
	parted -s $device unit B set 2 legacy_boot on
	[ "$ultraquiet" -gt 1 ] && genericpgbar 20 32 "$convert_head" "${convert_mkfs}" "" tty1
	[ -p /splash.fifo ] && echo 20 > /splash.fifo
	
	# Third partition - EFI Boot
	parted -s $device unit B mkpart "${brandshort}-UEFI" fat32 $thirdpartstart ` expr $fourthpartstart - 1 ` 
	[ "$ultraquiet" -gt 1 ] && genericpgbar 25 32 "$convert_head" "${convert_mkfs}" "" tty1
	[ "$efisize" -gt 0 ] && parted -s $device unit B set 3 boot on
	[ "$ultraquiet" -gt 1 ] && genericpgbar 30 32 "$convert_head" "${convert_mkfs}" "" tty1
	[ -p /splash.fifo ] && echo 30 > /splash.fifo
	
	# Fourth partition - Blob
	blobpartlabel="${brandshort}-BLOB"
	[ "$blobblocks" -lt 32 ] && blobpartlabel=empty
	parted -s $device unit B mkpart "${blobpartlabel}" ext2 $fourthpartstart ` expr $fifthpartstart - 1 ` 
	[ "$ultraquiet" -gt 1 ] && genericpgbar 35 32 "$convert_head" "${convert_mkfs}" "" tty1
	[ -p /splash.fifo ] && echo 35 > /splash.fifo
	
	# Fifth partition - encrypted container
	homepartlabel="${brandshort}-HOME"
	[ "$hcblocks" -lt 32 ] && homepartlabel=empty
	parted -s $device unit B mkpart "${homepartlabel}" ext2 $fifthpartstart ` expr $sixthpartstart - 1 ` 
	[ "$ultraquiet" -gt 1 ] && genericpgbar 40 32 "$convert_head" "${convert_mkfs}" "" tty1
	[ -p /splash.fifo ] && echo 40 > /splash.fifo
	
	# Sixth partition - Swap
	swappartlabel="${brandshort}-SWAP"
	[ "$swapblocks" -lt 32 ] && swappartlabel=empty
	parted -s $device unit B mkpart "${swappartlabel}" ext2 $sixthpartstart ` expr $seventhpartstart - 1 ` 
	[ "$ultraquiet" -gt 1 ] && genericpgbar 45 32 "$convert_head" "${convert_mkfs}" "" tty1
	[ -p /splash.fifo ] && echo 45 > /splash.fifo
	
	# Seventh partition - ISO image reserved
	parted -s $device unit B mkpart "${brandshort}-SYS2" ext2 $seventhpartstart ` expr $eighthpartstart - 1 ` 
	[ "$ultraquiet" -gt 1 ] && genericpgbar 50 32 "$convert_head" "${convert_mkfs}" "" tty1
	[ -p /splash.fifo ] && echo 50 > /splash.fifo
	
	# Eight partition - ISO image
	parted -s $device unit B mkpart "${brandshort}-SYS1" ext2 $eighthpartstart ` expr '(' $deviceblocks - 1 ')' '*' 8388608 - 1 `
	[ "$ultraquiet" -gt 1 ] && genericpgbar 55 32 "$convert_head" "${convert_mkfs}" "" tty1
	[ -p /splash.fifo ] && echo 55 > /splash.fifo
	
	# Write the MSDOS MBR and the GPT boot legacy block
	# dd of="$device" if=/tmp/legacy.mbr bs=512 count=1
	cat /etc/syslinux/gptmbr.bin > "$device"
	# rm /tmp/legacy.mbr
	
	[ -p /splash.fifo ] && fbsplash -i /etc/lesslinux/fbsplash_text.cfg -s /etc/lesslinux/branding/fbsplash/06driveconf.ppm
	[ "$ultraquiet" -lt 3 ] && echo '---> Creating file systems' > /dev/tty8
	sync 
	sleep 2
	mdev -s
	sleep 2 
	pgfrac=55
	for part in ` seq 1 7 ` ; do
		dd if=/dev/zero bs=1M count=8 of=${device}${part} 
		pgfrac=` expr $pgfrac + 2 `
		[ "$ultraquiet" -gt 1 ] && genericpgbar $pgfrac 32 "$convert_head" "${convert_mkfs}" "" tty1
		[ -p /splash.fifo ] && echo $pgfrac > /splash.fifo
		sync
	done
	if [ -x /static/sbin/mkntfs.static ] && [ "$secpartstart" -gt 4294967295 ] ; then
		mkntfs.static -F -Q -L USBDATA "${device}1"
	else
		mkfs.vfat -n USBDATA "${device}1"
	fi
	[ "$ultraquiet" -gt 1 ] && genericpgbar 75 32 "$convert_head" "${convert_mkfs}" "" tty1
	[ -p /splash.fifo ] && echo 75 > /splash.fifo
	sleep 2
	sync
	mdev -s
	sleep 2
	
	# Copy the saved ISOhybrid MBR: 
	if [ -f /tmp/isohybridmbr.bin ] ; then
		dd if=/tmp/isohybridmbr.bin of=${device}8 conv=notrunc
		sync
		rm /tmp/isohybridmbr.bin
	fi
	
	mkfs.ext2 -L LessLinuxBoot "${device}2"
	[ "$ultraquiet" -gt 1 ] && genericpgbar 85 32 "$convert_head" "${convert_mkfs}" "" tty1
	[ -p /splash.fifo ] && echo 85 > /splash.fifo
	[ "$blobblocks" -gt 1 ] && mkfs.ext2 -L LessLinuxBlob "${device}4"
	[ "$hcblocks" -gt 1 ]   && mkfs.ext2 -L LessLinuxCrypt "${device}5"
	[ "$swapblocks" -gt 1 ] && mkfs.ext2 -L LessLinuxSwap  "${device}6"
	[ "$ultraquiet" -gt 1 ] && genericpgbar 95 32 "$convert_head" "${convert_mkfs}" "" tty1
	[ -p /splash.fifo ] && echo 95 > /splash.fifo
	mkdir -p /lesslinux/boot
	mkdir -p /lesslinux/data
	mkdir -p /lesslinux/efiboot
	mkdir -p /lesslinux/blobpart
	if [ -x /static/sbin/mkntfs.static ] && [ "$secpartstart" -gt 4294967295 ] ; then
		ntfs-3g.static -o rw "${device}1" /lesslinux/data
	else
		mount -t vfat -o rw "${device}1" /lesslinux/data
	fi
	mount -t ext4 -o rw "${device}2" /lesslinux/boot
	[ "$blobblocks" -gt 1 ] && mount -t ext4 -o relatime "${device}4" /lesslinux/blobpart
	mount -t iso9660 -o ro "${device}8" /lesslinux/cdrom
	newuuid=` blkid.static -o udev "${device}2" | grep 'ID_FS_UUID=' | awk -F '=' '{print $2}' ` 
	cryptuuid=''
	swapuuid=''
	[ "$hcblocks" -gt 1 ]   && cryptuuid=` blkid.static -o udev "${device}5" | grep 'ID_FS_UUID=' | awk -F '=' '{print $2}' ` 
	[ "$swapblocks" -gt 1 ] && swapuuid=`  blkid.static -o udev "${device}6" | grep 'ID_FS_UUID=' | awk -F '=' '{print $2}' ` 
	[ "$ultraquiet" -gt 1 ] && genericpgbar 33 32 "$convert_head" "${convert_bios}" "" tty1
	[ -p /splash.fifo ] && fbsplash -i /etc/lesslinux/fbsplash_text.cfg -s /etc/lesslinux/branding/fbsplash/03driveconf.ppm
	[ -p /splash.fifo ] && echo 33 > /splash.fifo
	# Copy legacy boot files
	tar -C /lesslinux/cdrom -cf - boot/isolinux boot/grub boot/kernel | tar -C /lesslinux/boot -xf -
	touch /lesslinux/boot/cmdline
	cp -v /tmp/legacy.mbr /lesslinux/boot
	# Copy GRUBs file to properly detect the boot partition
	idfile=` ls /lesslinux/boot/boot/grub/????????.cd `
	idtarg=` echo $idfile | sed 's/\.cd/.pt/g' ` 
	mv $idfile $idtarg
	[ -f /etc/lesslinux/branding/postisoconvert.sh ] && /etc/lesslinux/branding/postisoconvert.sh
	if [ -d /etc/lesslinux/branding/postisoconvert.d ] ; then
		find /etc/lesslinux/branding/postisoconvert.d -type f | sort | while read scrp ; do
			/static/bin/ash $scrp
		done
	fi
	
	[ "$ultraquiet" -gt 1 ] && genericpgbar 66 32 "$convert_head" "${convert_efi}" "" tty1
	[ -p /splash.fifo ] && fbsplash -i /etc/lesslinux/fbsplash_text.cfg -s /etc/lesslinux/branding/fbsplash/04driveconf.ppm
	[ -p /splash.fifo ] && echo 66 > /splash.fifo
	# Copy EFI boot image
	if [ -f /lesslinux/cdrom/boot/efi/efi.img ] ; then
		dd if=/lesslinux/cdrom/boot/efi/efi.img of="${device}3"
		mount -t vfat -o rw "${device}3" /lesslinux/efiboot
		# Modify EFI boot files
		find /lesslinux/efiboot/loader -type f -name '*.usb' | while read cfgfile ; do 
			outfile=` echo ${cfgfile} | sed 's/\.usb$/.conf/g' `
			cp -v ${cfgfile} ${outfile} 
		done
		find /lesslinux/efiboot/loader -type f -name '*.conf' | while read cfgfile ; do 
			[ -f "${cfgfile}.${lang}" ] && cp "${cfgfile}.${lang}" "${cfgfile}"
			sed -i 's/uuid=all/uuid='"${newuuid}"'/g' "${cfgfile}"
			[ "$hcblocks"   -gt 1 ] && sed -i 's/crypt=all/crypt='"${cryptuuid}"'/g'  "${cfgfile}"
			[ "$hcblocks"   -gt 1 ] && sed -i 's/crypt=none/crypt='"${cryptuuid}"'/g' "${cfgfile}"
			[ "$swapblocks" -gt 1 ] && sed -i 's/swap=none/swap='"${swapuuid}"'/g'    "${cfgfile}"
		done
		mkdir -p /lesslinux/efiboot/boot/isolinux
		extlinux --install /lesslinux/efiboot/boot/isolinux
		sync
		umount /lesslinux/efiboot
	fi
	sync
	umount /lesslinux/blobpart
	
	# Modify legacy boot files
	find /lesslinux/boot/boot/isolinux -type f -name '*.cfg' | while read cfgfile ; do 
		[ -f "${cfgfile}.${lang}" ] && cp "${cfgfile}.${lang}" "${cfgfile}"
		sed -i 's/uuid=all/uuid='"${newuuid}"'/g' "${cfgfile}"
		[ "$hcblocks"   -gt 1 ] && sed -i 's/crypt=all/crypt='"${cryptuuid}"'/g'  "${cfgfile}"
		[ "$hcblocks"   -gt 1 ] && sed -i 's/crypt=none/crypt='"${cryptuuid}"'/g' "${cfgfile}"
		[ "$swapblocks" -gt 1 ] && sed -i 's/swap=none/swap='"${swapuuid}"'/g'    "${cfgfile}"
		sed -i 's%^INCLUDE /boot/isolinux/boot0x80.cfg%# INCLUDE /boot/isolinux/boot0x80.cfg%g' "${cfgfile}"
		sed -i 's%^INCLUDE /boot/isolinux/\([a-z]*\)/boot0x80.cfg%# INCLUDE /boot/isolinux/\1/boot0x80.cfg%g' "${cfgfile}"
		sed -i 's%^MENU INCLUDE /boot/isolinux/\([a-z]*\)/boot0x80.cfg%# MENU INCLUDE /boot/isolinux/\1/boot0x80.cfg%g' "${cfgfile}"
		sed -i 's%^# INCLUDE /boot/isolinux/usbonly%INCLUDE /boot/isolinux/usbonly%g' "${cfgfile}" 
		sed -i 's%^# INCLUDE /boot/isolinux/\([a-z]*\)/usbonly%INCLUDE /boot/isolinux/\1/usbonly%g' "${cfgfile}" 
		sed -i 's%^# MENU INCLUDE /boot/isolinux/\([a-z]*\)/usbonly% MENU INCLUDE /boot/isolinux/\1/usbonly%g' "${cfgfile}" 
	done
	cfg=/lesslinux/boot/boot/isolinux/isolinux.cfg
	[ -f /lesslinux/boot/boot/isolinux/extlinux.conf ] && cfg=/lesslinux/boot/boot/isolinux/extlinux.conf
	[ -f /lesslinux/boot/boot/isolinux/extlinux.conf.${lang} ] && cfg=/lesslinux/boot/boot/isolinux/extlinux.conf.${lang}
	[ -f /lesslinux/boot/boot/isolinux/extlinux.cfg ] && cfg=/lesslinux/boot/boot/isolinux/extlinux.cfg
	[ "$cfg" '!=' /lesslinux/boot/boot/isolinux/extlinux.conf ] && cp "$cfg" /lesslinux/boot/boot/isolinux/extlinux.conf
	sed -i 's/uuid=all/uuid='"${newuuid}"'/g' /lesslinux/boot/boot/isolinux/extlinux.conf
	[ "$hcblocks"   -gt 1 ] && sed -i 's/crypt=all/crypt='"${cryptuuid}"'/g'  /lesslinux/boot/boot/isolinux/extlinux.conf
	[ "$hcblocks"   -gt 1 ] && sed -i 's/crypt=none/crypt='"${cryptuuid}"'/g' /lesslinux/boot/boot/isolinux/extlinux.conf
	[ "$swapblocks" -gt 1 ] && sed -i 's/swap=none/swap='"${swapuuid}"'/g'    /lesslinux/boot/boot/isolinux/extlinux.conf

	echo -n "${newuuid}" > /lesslinux/boot/boot.uuid
	echo -n "${cryptuuid}" > /lesslinux/boot/crypt.uuid
	echo -n "${swapuuid}" > /lesslinux/boot/swap.uuid
	extlinux --install /lesslinux/boot/boot/isolinux
	umount /lesslinux/boot
	mount -t ext4 -o ro "${device}2" /lesslinux/boot
	umount /lesslinux/efiboot
	mount -t vfat -o ro "${device}3" /lesslinux/efiboot
	umount /lesslinux/data
	echo "isohybrid=false" >> /var/run/lesslinux/startup_vars
	echo -n "${device}8" > /var/run/lesslinux/install_source
	echo "bootdevice=${device}8" >> /var/run/lesslinux/startup_vars
	[ "$ultraquiet" -lt 3 ] && echo "===> Done." > /dev/tty8
	[ "$ultraquiet" -lt 3 ] && chvt 1
	[ -p /splash.fifo ] && echo 100 > /splash.fifo
	[ -p /splash.fifo ] && fbsplash -i /etc/lesslinux/fbsplash_text.cfg -s /etc/lesslinux/branding/fbsplash/textblank.ppm	
}

iso_hack_convert() {
	echo -e '\033[9;0]\033[14;0]' > /dev/console
	device="$1"
	# Text mode conversion on TTY8 when ultraquiet is not set:
	if [ "$ultraquiet" -lt 2 ] ; then
		chvt 8
		echo "===> Converting ISOhybrid to GPT drive with proper FS, this may take some time" > /dev/tty8
		echo "     but it is done only once..." > /dev/tty8
	fi
	# GUI conversion on TTY8 when fbsplash is running
	if [ "$ultraquiet" -eq 3 -a -p /splash.fifo ] ; then
		echo 0 > /splash.fifo
		fbsplash -i /etc/lesslinux/fbsplash_text.cfg -s /etc/lesslinux/branding/fbsplash/01driveconf.ppm 
	fi
	[ "$skipcheck" -lt 2 ] && run_self_test cdrom
	[ "$ultraquiet" -gt 1 ] && genericpgbar 0 32 "$convert_head" "$convert_prepare" "" tty1
	[ "$ultraquiet" -eq 3 -a -p /splash.fifo ] && echo 90 > /splash.fifo
	
	# FIXME! FIXME!
	# When installed from batchinstall or USB install the ISOhybrid MBR gets nuked,
	# it should be saved to a file than. Try to find it! 
	
	# Size of boot directory in kilobytes, including the EFI boot directory and image
	bootsize=` du -sk /lesslinux/cdrom/boot | awk '{print $1}'  ` 
	# Size of boot partition in count of 8MB blocks - roughly add 50% for updates
	bootblocks=` expr $bootsize / 5461 + 1 ` 
	
	# Size of ISO image in kilobytes
	isosize=` df -k | grep '/lesslinux/cdrom' | awk '{print $3}' `
	# Size of ISO partition in count of 8MB blocks - roughly add 25% for updates
	isoblocks=` expr $isosize / 6553 + 1 `
	
	# Size of device in kilobyte blocks
	shortdev=` echo -n $device | sed 's%/dev/%%g' ` 
	devicesize=` cat /proc/partitions | grep "$shortdev"'$' | awk '{print $3}' ` 
	# Size of device in 8MB blocks - there might be little bit less than 8MB left out
	deviceblocks=` expr $devicesize / 8192 ` 
	
	hcminblocks=0
	hcmaxblocks=0 
	if [ "$homecontmax" -gt 0 ] ; then
		hcmaxblocks=` expr $homecontmax / 8 ` 
		hcminblocks=` expr $homecontmin / 8 ` 
	fi
	# blobblocks 
	blobblocks=0
	if [ "$blobsize" -gt 63 ] ; then
		blobblocks=` expr $blobsize / 8 ` 
	else
		blobblocks=1
	fi
	# Swap size
	swapblocks=0
	if [ "$swapsize" -gt 63 ] ; then
		swapblocks=` expr $swapsize / 8 ` 
	else
		swapblocks=1
	fi
	# Now check for minimum free space - FIXME: 128MB are not good to be hard coded
	neededblocks=` expr $isoblocks + $isoblocks + $bootblocks + $hcminblocks + $blobblocks + $swapblocks + 16 `
	if [ "$deviceblocks" -lt "$neededblocks" ] ; then
		# Try without swap:
		swapblocks=1
		neededblocks=` expr $isoblocks + $isoblocks + $bootblocks + $hcminblocks + $blobblocks + $swapblocks + 16 `
		if [ "$deviceblocks" -lt "$neededblocks" ] ; then
			# Try without encrypted /home
			hcminblocks=0
			hcmaxblocks=0 
			neededblocks=` expr $isoblocks + $isoblocks + $bootblocks + $hcminblocks + $blobblocks + $swapblocks + 16 `
			if [ "$deviceblocks" -lt "$neededblocks" ] ; then
				[ "$ultraquiet" -lt 3 ] && echo "===> FAILED. Device too small." > /dev/tty8
				echo "isohybrid=true" >> /var/run/lesslinux/startup_vars
				[ "$ultraquiet" -lt 3 ] && chvt 1
				return 1
			fi
		fi
	fi
	
	# Delete some MB at the end of the disk to remove remaining GUID backup table
	dd if=/dev/zero of=$device bs=8388608 seek=` expr $deviceblocks - 4 ` 2>/dev/null
	
	# Copy license information that might be hidden
	dd if=$device of=/tmp/license.bin bs=1024 skip=2 count=1 
	
	# Let the games begin...
	umount /lesslinux/cdrom
	
	[ "$ultraquiet" -lt 3 ] && echo '---> Creating partition table and bootloader' > /dev/tty8
	[ "$ultraquiet" -gt 1 ] && genericpgbar 0 32 "$convert_head" "${convert_mkfs}" "" tty1
	[ -p /splash.fifo ] && fbsplash -i /etc/lesslinux/fbsplash_text.cfg -s /etc/lesslinux/branding/fbsplash/05driveconf.ppm
	
	# Recalculate the possible size of the partition for the encrypted home container
	hcblocks=1
	if [ "$homecontmax" -gt 0 ] ; then
		hcmaxblocks=` expr $homecontmax / 8 ` 
		hcminblocks=` expr $homecontmin / 8 ` 
		hcpossible=` expr $deviceblocks - $isoblocks - $isoblocks - $bootblocks - $blobblocks - $swapblocks - 40 ` 
		if [ "$hcpossible" -gt $hcmaxblocks ] ; then
			hcblocks=$hcmaxblocks
		else
			hcblocks=$hcpossible
		fi
	fi
	
	# Create a single FAT32 partition holding legacy and EFI boot files
	freespacestart=` expr '(' $deviceblocks - $isoblocks - $swapblocks - $hcblocks - $blobblocks - 2 ')' '*' 8388608 `
	partstart=`      expr '(' $isoblocks + 2 ')' '*' 8388608 `
	# Now overwrite the start of the device
	dd if="$device" bs=512 count=1 of=/tmp/isohybrid.mbr 
	dd if=/dev/zero bs=512 count=1 of="$device"
	parted -s $device unit B mklabel msdos
	sync
	mdev -s
	
	# Single partition - data, legacy boot, EFI boot
	parted -s $device unit B mkpart primary fat32 $partstart ` expr $freespacestart - 1 `  
	parted -s $device unit B set 1 boot on
	parted -s $device unit B set 1 esp on
	sync
	
	# Restore the license information
	dd if=/tmp/license.bin of=$device bs=1024 seek=2 count=1
	sync
	
	[ "$ultraquiet" -gt 1 ] && genericpgbar 10 32 "$convert_head" "${convert_mkfs}" "" tty1
	[ -p /splash.fifo ] && echo 10 > /splash.fifo
	[ -b ${device}1 ] && dd if=/dev/zero bs=1M count=8 of=${device}1
	mkfs.vfat -n USBDATA "${device}1"
	cat /etc/syslinux/mbr.bin > "$device"
	mkdir -p /lesslinux/boot
	mkdir -p /lesslinux/efiboot
	mount -t vfat -o rw "${device}1" /lesslinux/boot
	mkdir -p /lesslinux/boot/boot
	cp -v /tmp/isohybrid.mbr /lesslinux/boot/boot
	touch /lesslinux/boot/boot/dontconvert
	stickloop=` losetup -f ` 
	losetup -r ${stickloop} ${device} 
	mount -t iso9660 -o ro "${stickloop}" /lesslinux/cdrom
	newuuid=` blkid.static -o udev "${device}1" | grep 'ID_FS_UUID=' | awk -F '=' '{print $2}' ` 
	
	# Copy legacy boot files
	tar -C /lesslinux/cdrom -cf - boot | tar -C /lesslinux/boot -xf -
	touch /lesslinux/boot/boot/cmdline
	cp -v /tmp/legacy.mbr /lesslinux/boot
	# Copy GRUBs file to properly detect the boot partition
	idfile=` ls /lesslinux/boot/boot/grub/????????.cd `
	idtarg=` echo $idfile | sed 's/\.cd/.pt/g' ` 
	mv $idfile $idtarg
	
	# Copy EFI boot files
	# Copy EFI boot image
	if [ -f /lesslinux/cdrom/boot/efi/efi.img ] ; then
		efiloop=` losetup -f `
		losetup $efiloop /lesslinux/cdrom/boot/efi/efi.img
		mount -t vfat -o ro $efiloop /lesslinux/efiboot
		tar -C /lesslinux/efiboot -cvf - . | tar -C /lesslinux/boot -xf -
		# Modify EFI boot files
		find /lesslinux/boot/loader -type f -name '*.usb' | while read cfgfile ; do 
			outfile=` echo ${cfgfile} | sed 's/\.usb$/.conf/g' `
			cp -v ${cfgfile} ${outfile} 
		done
		find /lesslinux/boot/loader -type f -name '*.conf' | while read cfgfile ; do 
			[ -f "${cfgfile}.${lang}" ] && cp "${cfgfile}.${lang}" "${cfgfile}"
			sed -i 's/uuid=all/uuid='"${newuuid}"'/g' "${cfgfile}"
			[ "$hcblocks"   -gt 1 ] && sed -i 's/crypt=all/crypt='"${cryptuuid}"'/g'  "${cfgfile}"
			[ "$hcblocks"   -gt 1 ] && sed -i 's/crypt=none/crypt='"${cryptuuid}"'/g' "${cfgfile}"
			[ "$swapblocks" -gt 1 ] && sed -i 's/swap=none/swap='"${swapuuid}"'/g'    "${cfgfile}"
		done
		if [ -f /lesslinux/boot/boot/grub/grub.cfg ] ; then
			if [ -f /lesslinux/boot/boot/grub/uninstall.cfg ] ; then
				cat /lesslinux/boot/boot/grub/uninstall.cfg >> /lesslinux/boot/boot/grub/grub.cfg
			fi
			find /lesslinux/boot/boot/grub -type f -name '*.cfg' | while read cfgfile ; do
				sed -i 's/uuid=all/uuid='"${newuuid}"'/g' "${cfgfile}"
				[ "$hcblocks"   -gt 1 ] && sed -i 's/crypt=all/crypt='"${cryptuuid}"'/g'  "${cfgfile}"
				[ "$hcblocks"   -gt 1 ] && sed -i 's/crypt=none/crypt='"${cryptuuid}"'/g' "${cfgfile}"
				[ "$swapblocks" -gt 1 ] && sed -i 's/swap=none/swap='"${swapuuid}"'/g'    "${cfgfile}"
			done
		fi
		sync
		umount /lesslinux/efiboot
		losetup -d $efiloop
	fi
	
	# Modify legacy boot files
	find /lesslinux/boot/boot/isolinux -type f -name '*.cfg' | while read cfgfile ; do 
		[ -f "${cfgfile}.${lang}" ] && cp "${cfgfile}.${lang}" "${cfgfile}"
		sed -i 's/uuid=all/uuid='"${newuuid}"'/g' "${cfgfile}"
		[ "$hcblocks"   -gt 1 ] && sed -i 's/crypt=all/crypt='"${cryptuuid}"'/g'  "${cfgfile}"
		[ "$hcblocks"   -gt 1 ] && sed -i 's/crypt=none/crypt='"${cryptuuid}"'/g' "${cfgfile}"
		[ "$swapblocks" -gt 1 ] && sed -i 's/swap=none/swap='"${swapuuid}"'/g'    "${cfgfile}"
		sed -i 's%^INCLUDE /boot/isolinux/boot0x80.cfg%# INCLUDE /boot/isolinux/boot0x80.cfg%g' "${cfgfile}"
		sed -i 's%^INCLUDE /boot/isolinux/\([a-z]*\)/boot0x80.cfg%# INCLUDE /boot/isolinux/\1/boot0x80.cfg%g' "${cfgfile}"
		sed -i 's%^MENU INCLUDE /boot/isolinux/\([a-z]*\)/boot0x80.cfg%# MENU INCLUDE /boot/isolinux/\1/boot0x80.cfg%g' "${cfgfile}"
		sed -i 's%^# INCLUDE /boot/isolinux/usbonly%INCLUDE /boot/isolinux/usbonly%g' "${cfgfile}" 
		sed -i 's%^# INCLUDE /boot/isolinux/\([a-z]*\)/usbonly%INCLUDE /boot/isolinux/\1/usbonly%g' "${cfgfile}" 
		sed -i 's%^# MENU INCLUDE /boot/isolinux/\([a-z]*\)/usbonly% MENU INCLUDE /boot/isolinux/\1/usbonly%g' "${cfgfile}" 
	done
	cfg=/lesslinux/boot/boot/isolinux/isolinux.cfg
	[ -f /lesslinux/boot/boot/isolinux/extlinux.conf ] && cfg=/lesslinux/boot/boot/isolinux/extlinux.conf
	[ -f /lesslinux/boot/boot/isolinux/extlinux.conf.${lang} ] && cfg=/lesslinux/boot/boot/isolinux/extlinux.conf.${lang}
	[ -f /lesslinux/boot/boot/isolinux/extlinux.cfg ] && cfg=/lesslinux/boot/boot/isolinux/extlinux.cfg
	[ "$cfg" '!=' /lesslinux/boot/boot/isolinux/extlinux.conf ] && cp "$cfg" /lesslinux/boot/boot/isolinux/extlinux.conf
	sed -i 's/uuid=all/uuid='"${newuuid}"'/g' /lesslinux/boot/boot/isolinux/extlinux.conf
	[ "$hcblocks"   -gt 1 ] && sed -i 's/crypt=all/crypt='"${cryptuuid}"'/g'  /lesslinux/boot/boot/isolinux/extlinux.conf
	[ "$hcblocks"   -gt 1 ] && sed -i 's/crypt=none/crypt='"${cryptuuid}"'/g' /lesslinux/boot/boot/isolinux/extlinux.conf
	[ "$swapblocks" -gt 1 ] && sed -i 's/swap=none/swap='"${swapuuid}"'/g'    /lesslinux/boot/boot/isolinux/extlinux.conf

	echo -n "${newuuid}" > /lesslinux/boot/boot/boot.uuid
	extlinux --install /lesslinux/boot/boot/isolinux
	
	tar -C /lesslinux/cdrom -cf - Manual Anleitungen autorun.usb GPL.txt license lesslinux.ico secuperts.ico sad.ico cobi.ico | tar -C  /lesslinux/boot -xvf -
	mv /lesslinux/boot/autorun.usb /lesslinux/boot/autorun.inf
	mv /lesslinux/boot/efi.sha /lesslinux/boot/EFI/efi.sha
	if [ -f /etc/lesslinux/branding/extrafiles.txt ] ; then
		for fname in ` cat /etc/lesslinux/branding/extrafiles.txt `   ; do
			tar -C /lesslinux/cdrom -cf - $fname | tar -C  /lesslinux/boot -xvf - 
		done
	fi
	if [ -f /etc/lesslinux/branding/usbpostinstall.sh ] ; then
		ash /etc/lesslinux/branding/usbpostinstall.sh /lesslinux/boot
	fi
	
	umount /lesslinux/boot
	
	echo "isohybrid=false" >> /var/run/lesslinux/startup_vars
	echo -n "${stickloop}" > /var/run/lesslinux/install_source
	echo "bootdevice=${stickloop}" >> /var/run/lesslinux/startup_vars
	echo "outerdevice=$device" >> /var/run/lesslinux/startup_vars
	echo "${device}" > /var/run/lesslinux/preppartitions
	[ "$ultraquiet" -lt 3 ] && echo "===> Done." > /dev/tty8
	[ "$ultraquiet" -lt 3 ] && chvt 1
	[ -p /splash.fifo ] && echo 100 > /splash.fifo
	[ -p /splash.fifo ] && fbsplash -i /etc/lesslinux/fbsplash_text.cfg -s /etc/lesslinux/branding/fbsplash/textblank.ppm	
}

mount_and_check() {
	# $1: device
	# $2: filesystem
	# $3: whether to skip isoloop or not 1/0
	device="$1"
	filesystem="$2"
	skiploop="$3"
	[ -f /var/run/lesslinux/cdfound ] && return 0
	[ -b "$device" ] || return 0
	thisversion=` cat /etc/lesslinux/updater/version.txt `
	if [ "$filesystem" = "ext2" -o "$filesystem" = "ext3" -o "$filesystem" = "ext4" ] ; then
	    mount -o ro -t ext4 $device /lesslinux/cdrom 2>/dev/null
	#elif [ "$filesystem" = "ntfs" ] ; then
	#    if [ -f /static/sbin/ntfs-3g.static -a "$ntfsrw" -gt 0 ] ; then
	#	ntfs-3g.static -o rw $device /lesslinux/cdrom 2>/dev/null
	#    elif [ -f /static/sbin/ntfs-3g.static ] ; then
	#	ntfs-3g.static -o ro $device /lesslinux/cdrom 2>/dev/null
	#    else
	#	mount -t $filesystem -o ro $device /lesslinux/cdrom 2>/dev/null
	#    fi
	else
	    mount -t $filesystem -o ro $device /lesslinux/cdrom 2>/dev/null
	fi
	thatversion=` cat /lesslinux/cdrom/${contdir}/version.txt ` 2>/dev/null
	if [ "$thisversion" = "$thatversion" ] ; then
		touch /var/run/lesslinux/cdfound
		echo -n "$device" > /var/run/lesslinux/install_source
		echo "bootdevice=$device" > /var/run/lesslinux/startup_vars
		echo "bootmode=plain" >> /var/run/lesslinux/startup_vars
		if ( echo "$device" | grep -E  'd[a-z]$' > /dev/null 2>&1 ) && \
		   ( cat /proc/mounts | grep "$device" | grep "iso9660" > /dev/null 2>&1 ) ; then
			doconvert=1
			umount /lesslinux/cdrom 
			mkdir -p /lesslinux/boot 
			mount -o ro ${device}1 /lesslinux/boot
			if [ -f /lesslinux/boot/boot/dontconvert ] ; then
				doconvert=0
			fi
			umount /lesslinux/boot
			if echo "$skipservices" | grep -q '|convertiso|' ; then
				doconvert=0
			fi
			if [ "$doconvert" -lt 1 ]  ; then
				umount /lesslinux/cdrom 
				stickloop=` losetup -f ` 
				losetup -r ${stickloop} ${device}
				mount ${stickloop} /lesslinux/cdrom 
				echo "isohybrid=true" >> /var/run/lesslinux/startup_vars
				echo -n "$stickloop" > /var/run/lesslinux/install_source
				echo "bootdevice=$stickloop" >> /var/run/lesslinux/startup_vars
				echo "outerdevice=$device" >> /var/run/lesslinux/startup_vars
			elif grep -q noparttablehack /proc/cmdline ; then
				mount -t $filesystem -o ro $device /lesslinux/cdrom
				iso_gpt_convert "$device"
			else
				mount -t $filesystem -o ro $device /lesslinux/cdrom
				iso_hack_convert "$device"
			fi
		else
			echo "isohybrid=false" >> /var/run/lesslinux/startup_vars
		fi
	elif mountpoint -q /lesslinux/cdrom ; then
		if [ "$skiploop" -lt "1" ] ; then
			mkdir -p /lesslinux/isoloop
			find /lesslinux/cdrom -type f -name '*.iso' -maxdepth 3 | while read isofile ; do
				printf "$bold...> Checking ISOLOOP $isofile $normal\n"
				free_loop=` losetup -f `
				losetup $free_loop "$isofile"
				mount $free_loop /lesslinux/isoloop > /dev/null 2>&1
				thatversion=` cat /lesslinux/isoloop/${contdir}/version.txt ` 2> /dev/null
				if [ "$thisversion" = "$thatversion" ] ; then
					touch /var/run/lesslinux/cdfound
					touch /var/run/lesslinux/isoloop
					echo -n "$free_loop" > /var/run/lesslinux/install_source
					echo "bootdevice=$device" > /var/run/lesslinux/startup_vars
				        echo "bootmode=loop" >> /var/run/lesslinux/startup_vars
				        echo "loopfile=$isofile" >> /var/run/lesslinux/startup_vars
				        echo "loopdev=$free_loop" >> /var/run/lesslinux/startup_vars
					if [ -x /static/sbin/blkid.static ] ; then
						/static/sbin/blkid.static -o udev $device | grep UUID > /var/run/lesslinux/bootdevice.udev
						/static/sbin/blkid.static -o udev $device | grep FS_TYPE >> /var/run/lesslinux/bootdevice.udev
						chmod 0755 /var/run/lesslinux/bootdevice.udev
					fi
					if ( echo "$device" | grep -E  '/dev/sd[a-z]$' > /dev/null 2>&1 ) && \
					   ( cat /proc/mounts | grep "$device" | grep "iso9660" > /dev/null 2>&1 ) ; then
			                    echo "isohybrid=true" >> /var/run/lesslinux/startup_vars
					else
					    echo "isohybrid=false" >> /var/run/lesslinux/startup_vars
			                fi
					overlay=` echo -n "$isofile" | sed 's/iso$/tgz/g' `
					[ -f "$overlay" ] && cp "$overlay" /etc/lesslinux/branding/overlays/overlay7.tgz  
				else
					umount /lesslinux/isoloop > /dev/null 2>&1
					losetup -d $free_loop > /dev/null 2>&1
				fi
			done
		fi
	fi
	[ -f /var/run/lesslinux/cdfound ] || umount /lesslinux/cdrom 2>/dev/null
	if [ -f /var/run/lesslinux/cdfound ] ; then
		printf "$bold...> Found system $normal\n"
	elif [ "$filesystem" = iso9660 ] ; then
		# Check the partitioning for free space beyond the partition
		pend=` parted -s -m "$device" unit b print | tail -n1 | awk -F ':' '{print $3}' | sed 's/B//g' ` 
		if [ "$pend" -gt 0 ] ; then
			# Check if there is enough space behind the partition table for another ISO image
			devsize=`     parted -m -s ${device} unit b print | grep msdos | awk -F ':|B:' '{print $2}' ` 
			partend=`     parted -m -s ${device} unit b print | grep '^1'  | awk -F ':|B:' '{print $3}'  `
			isosize=`     parted -m -s ${device} unit b print | grep '^1'  | awk -F ':|B:' '{print $2}'  `
			isotwostart=` expr $devsize - $isosize - 8388608 ` 
			# Exit gracefully if size is not sufficient
			if [ "$isotwostart" -lt "$partend" ] ; then
				printf "$bold...> Not enough space for secondary ISO on ${device} $normal\n"
			else
				# Determine the end of our new loop device by matching an 8M chunk towards the end of the device: 
				loopendblock=` expr '(' $devsize - $isosize ')' / 8388608 - 1 ` 
				# Create a loop device with correct parameters 
				nextloop=` losetup -f ` 
				losetup -o ` expr $loopendblock '*' 8388608 ` $nextloop $device
				mount -t $filesystem -o ro $nextloop /lesslinux/cdrom 2>/dev/null
				thatversion=` cat /lesslinux/cdrom/${contdir}/version.txt ` 2>/dev/null
				if [ "$thisversion" = "$thatversion" ] ; then
					touch /var/run/lesslinux/cdfound
					echo "bootmode=plain" >> /var/run/lesslinux/startup_vars
					echo "isohybrid=true" >> /var/run/lesslinux/startup_vars
					echo -n "$stickloop" > /var/run/lesslinux/install_source
					echo "bootdevice=$stickloop" >> /var/run/lesslinux/startup_vars
					echo "outerdevice=$device" >> /var/run/lesslinux/startup_vars
					echo "loopoffset=$loopoffset" >> /var/run/lesslinux/startup_vars
				else
					umount /lesslinux/cdrom 2>/dev/null
					losetup -d $nextloop
				fi
			fi
		fi
	fi
}

case $1 in
    start)
	if grep earlyeject /proc/cmdline ; then
	    for n in `seq 0 9 ` ; do
	        eject /dev/sr${n}
	    done
	fi
        if [ -f /var/run/lesslinux/cdfound ] ; then
	    printf "$bold===> Skip search for LESSLINUX System $normal\n"
	else
	    printf "$bold===> Searching for LESSLINUX System $normal\n"
	    mkdir -p /lesslinux/cdrom
	    ## [ "$usbsettle" -gt 1 ] && sleep $usbsettle && mdev -s
	    alreadychecked=""
	    skipisos=0
	    if echo "$skipsearch" | grep -q '|isoloop|' ; then
		skipisos=1
	    fi
	    
	    ##
	    ## First try to find our system device by blkid.static - Installers should write
	    ## the uuid of the system partition to the syslinux.cfg files to speed up
	    ## the boot!
	    ##
	    
	    if [ '!' "$uuid" = all -a -n "$uuid" -a -f /static/sbin/blkid.static ] ; then
	        for i in ` seq $usbwait ` ; do
			if [ '!' -f /var/run/lesslinux/cdfound ] ; then
				devname=` blkid.static -U $uuid `
				fstype=` blkid.static -o udev $devname | grep 'ID_FS_TYPE=' | awk -F '=' '{print $2}' `
				alreadychecked="$alreadychecked  $devname "
				case $fstype in 
					ext*)
						mount_and_check $devname ext4 $skipisos
						# A ext2/3/4 boot file system might also indicate that the system itself
						# resides on a higher partition that is dd'ed with the ISO - try em
						masterdev=` echo -n "$devname" | sed 's/[0-9]*$//g' ` 
						for p in  9 8 7 6 5 4 3 2 1 ` seq 10 31 ` ; do
							mount_and_check ${masterdev}${p} iso9660 $skipisos
						done
						mkdir -p /lesslinux/boot
						[ -f /var/run/lesslinux/cdfound ] && mount -t ext4 -o ro "$devname" /lesslinux/boot 
					;;
					btrfs*)
						mount_and_check $devname btrfs $skipisos
					;;
					exfat*)
						printf "$bold...> Sorry, exfat is not supported yet $normal\n"
					;;
					vfat*)
						mount_and_check $devname vfat $skipisos
					;;
					ntfs*)
						if [ "$skipntfs" -gt 0 ] ; then
							printf "$bold...> Skipping NTFS as of user request $normal\n"
						else
							mount_and_check $devname ntfs $skipisos
						fi
					;;
					*)
						mount_and_check $devname linux $skipisos
					;;
				esac
			fi
			if [ '!' -f /var/run/lesslinux/cdfound ] ; then
				sleep 1
				mdev -s
			fi
	        done
	    fi
	    [ -f /var/run/lesslinux/cdfound ] && exit 0
	    
	    ##
	    ## Now try optical drives and USB sticks or Xen disks that use a UUID which
	    ## matches the build timestamp. Official LessLinux ISOs that are build with
	    ## xorriso will offer this feature.
	    ##
	    ## Also cover images that are directly dd'ed to a partition. Some installers
	    ## do so and ignore to update the UUID in the boot command line. This also
	    ## allows really simple installation on partitioned Xen disks.
	    ##
	    
	    isouuid=` cat /etc/lesslinux/updater/isouuid.txt ` 
	    if [ -f /static/sbin/blkid.static ] ; then
	        for i in ` seq $usbwait ` ; do
		    if [ '!' -f /var/run/lesslinux/cdfound ] && echo "$skipsearch" | grep -qv '|cddvd|' ; then
			for n in 9 8 7 6 5 4 3 2 1 0 ; do
			    testuuid=` blkid.static -o udev /dev/sr${n} | grep ID_FS_UUID= | awk -F '=' '{print $2}' ` 
			    if [ "$testuuid" = "$isouuid" ] ; then
				mount_and_check /dev/sr${n} iso9660 $skipisos
			    fi
			done
		    fi
		    if [ '!' -f /var/run/lesslinux/cdfound ] && echo "$skipsearch" | grep -qv '|nbd|' ; then
			testuuid=` blkid.static -o udev /dev/nbd0 | grep ID_FS_UUID= | awk -F '=' '{print $2}' ` 
			if [ "$testuuid" = "$isouuid" ] ; then
			    mount_and_check /dev/nbd0 iso9660 $skipisos
			fi
		    fi
		    if [ '!' -f /var/run/lesslinux/cdfound ] && echo "$skipsearch" | grep -qv '|isohybrid|' ; then
			cat /proc/partitions | awk '{print $4}' | grep -Ev 'loop|dm|[0-9]$|^$|name$' | while read devname ; do
			    testuuid=` blkid.static -o udev /dev/${devname} | grep ID_FS_UUID= | awk -F '=' '{print $2}' ` 
			    if [ "$testuuid" = "$isouuid" ] ; then
				mount_and_check /dev/${devname} iso9660 $skipisos
			    fi	
			done
		    fi
		    if [ '!' -f /var/run/lesslinux/cdfound ] ; then
			cat /proc/partitions | awk '{print $4}' | grep -E '(xv|s|v)d[a-z][0-9]+$' | while read devname ; do
			    testuuid=` blkid.static -o udev /dev/${devname} | grep ID_FS_UUID= | awk -F '=' '{print $2}' ` 
			    if [ "$testuuid" = "$isouuid" ] ; then
				mount_and_check /dev/${devname} iso9660 $skipisos
			    fi	
			done
		    fi
		    if [ '!' -f /var/run/lesslinux/cdfound ] ; then
			sleep 1
			mdev -s
		    fi
		done
	    fi
	    [ -f /var/run/lesslinux/cdfound ] && exit 0
	    
	    ##
	    ## Then try optical drives if they are not explicitely skipped and USB sticks
	    ## or Xen disks that are directly formatted with ISO9660. Most users will
	    ## use one of those methods.
	    ##
	    ## This will also find loopback images on UDF formatted media as used on the
	    ## DVDs of many computer magazines.
	    ##
	    
	    for i in ` seq $usbwait ` ; do
	        if [ '!' -f /var/run/lesslinux/cdfound ] ; then
			if echo "$skipsearch" | grep -qv '|cddvd|' ; then
				for n in ` seq 0 9 ` ; do
					alreadychecked="$alreadychecked /dev/sr${n} "
					mount_and_check /dev/sr${n} iso9660 $skipisos
				done
			fi
		fi
		if [ '!' -f /var/run/lesslinux/cdfound ] ; then
			if echo "$skipsearch" | grep -qv '|udf|' ; then
				for n in ` seq 0 9 ` ; do
					alreadychecked="$alreadychecked /dev/sr${n} "
					mount_and_check /dev/sr${n} udf $skipisos
				done
			fi
		fi
		if [ '!' -f /var/run/lesslinux/cdfound ] ; then
			if echo "$skipsearch" | grep -qv '|isohybrid|' ; then
				cat /proc/partitions | awk '{print $4}' | grep -Ev 'loop|dm|^$|name$' | while read devname ; do
					mount_and_check /dev/${devname} iso9660 $skipisos
				done
			fi
		fi
		if [ '!' -f /var/run/lesslinux/cdfound ] ; then
			sleep 1
			mdev -s
		fi
	    done
	    [ -f /var/run/lesslinux/cdfound ] && exit 0
	    
	    ##
	    ## Then try any blockdevice that is found in /proc/partitions
	    ##
	    ## blkid.static should be present to be able to detect for 
	    ## exaple plain UDF on hard disk without partition table...
	    ## 
	    
	    if [ -f /static/sbin/blkid.static ] ; then
	        for i in ` seq $usbwait ` ; do
			cat /proc/partitions | grep -Ev 'loop|dm|name|^$' | awk '{print $4}' | while read devname ; do
				if [ '!' -f /var/run/lesslinux/cdfound ] ; then
					fstype=` blkid.static -o udev /dev/${devname} | grep 'ID_FS_TYPE' | awk -F '=' '{print $2}' `
					alreadychecked="$alreadychecked /dev/$devname "
					case $fstype in
					ext*)
						if echo "$skipsearch" | grep -v '|linux|' > /dev/null 2>&1 ; then
							mount_and_check /dev/$devname ext4 $skipisos
						fi
					;;	
					btrfs*)
						if echo "$skipsearch" | grep -v '|linux|' > /dev/null 2>&1 ; then
							mount_and_check /dev/$devname btrfs $skipisos
						fi
					;;
					exfat*)
						printf "$bold...> Sorry, exfat is not supported yet $normal\n"
					;;
					vfat*)
						if echo "$skipsearch" | grep -v '|vfat|' > /dev/null 2>&1 ; then
							mount_and_check /dev/$devname vfat $skipisos
						fi
					;;
					iso9660*)
						if echo "$skipsearch" | grep -v '|cddvd|' > /dev/null 2>&1 ; then
							mount_and_check /dev/$devname iso9660 $skipisos
						fi
					;;
					udf*)
						if echo "$skipsearch" | grep -v '|udf|' > /dev/null 2>&1 ; then
							mount_and_check /dev/$devname udf $skipisos
						fi
					;;
					ntfs*)
						if echo "$skipsearch" | grep -v '|ntfs|' > /dev/null 2>&1 ; then
							mount_and_check /dev/$devname ntfs $skipisos
						fi
					;;
					esac
				fi
			done
			[ -f /var/run/lesslinux/cdfound ] || sleep 1
		done
	    fi
	    [ -f /var/run/lesslinux/cdfound ] && exit 0
	fi
    ;;
esac
		
# The end	]]>
		</scriptdata>
		<modlist provides="searchsys" hwenv="default">
			<module>crc16</module>
			<module>crc32</module>
			<module>crc7</module>
			<module>crc-ccitt</module>
			<module>crc-itu-t</module>
			<module>crc-t10dif</module>
			<!-- <module>libcrc32c</module> -->
			<module>zlib_deflate</module>
			<module>zlib_inflate</module>
			<module>scsi_mod</module>
			<module>sg</module>
			<module>sd_mod</module>
			<module>mbcache</module>
			<module>usbcore</module>
			<module>usb-libusual</module>
			<module>libusual</module>
			<module>ehci-hcd</module>
			<module>uhci-hcd</module>
			<module>ohci-hcd</module>
			<module>usb-storage</module>
			<module>sd_mod</module>
			<module>nls_cp437</module>
			<module>nls_cp1250</module>
			<module>nls_iso8859-1</module>
			<module>nls_iso8859-15</module>
			<module>nls_utf8</module>
			<module>jbd</module>
			<module>crc16</module>
			<module>crc32</module>
			<module>crc7</module>
			<module>crc-ccitt</module>
			<module>crc-itu-t</module>
			<module>crc-t10dif</module>
			<!-- <module>libcrc32c</module> -->
			<module>zlib_deflate</module>
			<module>zlib_inflate</module>
			<module>scsi_mod</module>
			<module>cdrom</module>
			<module>sr_mod</module>
			<module>sg</module>
			<module>sd_mod</module>
			<module>mbcache</module>
			<module>libata</module>
			<module>pata_acpi</module>
			<module>ata_piix</module>
			<module>ata_generic</module>
			<module>isofs</module>
			<module>usbcore</module>
			<module>ehci-hcd</module>
			<module>uhci-hcd</module>
			<module>ohci-hcd</module>
			<module>usb-libusual</module>
			<module>libusual</module>
			<module>usb-storage</module>
			<module>ahci</module>
			<module>pata_amd</module>
			<module>pata_ali</module>
			<module>pata_atiixp</module>
			<module>pata_atiixp</module>
			<module>pata_cmd640</module>
			<module>pata_cmd64x</module>
			<module>pata_cs5520</module>
			<module>pata_cs5530</module>
			<module>pata_cs5535</module>
			<module>pata_cs5536</module>
			<module>pata_cypress</module>
			<module>pata_efar</module>
			<module>pata_sis</module>
			<module>pata_via</module>
			<module>pata_marvell</module>
			<module>sata_mv</module>
			<module>sata_nv</module>
			<module>sata_promise</module>
			<module>sata_qstor</module>
			<module>sata_sil</module>
			<module>sata_sil24</module>
			<module>sata_sis</module>
			<module>sata_uli</module>
			<module>sata_via</module>
			<module>sata_vsc</module>
			<!-- and again -->
			<module>ahci</module>
			<module>pata_amd</module>
			<module>pata_ali</module>
			<module>pata_atiixp</module>
			<module>pata_atiixp</module>
			<module>pata_cmd640</module>
			<module>pata_cmd64x</module>
			<module>pata_cs5520</module>
			<module>pata_cs5530</module>
			<module>pata_cs5535</module>
			<module>pata_cs5536</module>
			<module>pata_cypress</module>
			<module>pata_efar</module>
			<module>pata_sis</module>
			<module>pata_via</module>
			<module>pata_marvell</module>
			<module>sata_mv</module>
			<module>sata_nv</module>
			<module>sata_promise</module>
			<module>sata_qstor</module>
			<module>sata_sil</module>
			<module>sata_sil24</module>
			<module>sata_sis</module>
			<module>sata_uli</module>
			<module>sata_via</module>
			<module>sata_vsc</module>
			<module>sd_mod</module>
			<module>mbcache</module>
			<module>jbd</module>
			<module>ext3</module>
			<module>fat</module>
			<module>vfat</module>
			<module>ntfs</module>
			<!-- and again -->
			<module>usbcore</module>
			<module>ehci-hcd</module>
			<module>uhci-hcd</module>
			<module>ohci-hcd</module>
			<module>libusual</module>
			<module>usb-storage</module>
			<module>sd_mod</module>
			<module>fuse</module>
			<module>udf</module>
		</modlist>
		<scriptdata location="/etc/rc.d/0114-ejectcdrom.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash
		
#lesslinux provides eject
#lesslinux license BSD

PATH=/static/bin:/static/sbin:/bin:/sbin:/usr/bin:/usr/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors

case $1 in 
    start)
        if [ "$ejectonumass" -gt 0 ] ; then
	    volid=` echo "$searchiso" | awk -F '|' '{print $2}' `
	    bytecount=` echo "$searchiso" | awk -F '|' '{print $3}' `
	    ddoffset=36905
	    cddevices="` ls /dev/sr[0-9] 2> /dev/null `"
	    for cddev in $cddevices ; do 
	        ddvolid=` dd if=$cddev bs=1 skip=$ddoffset count=$bytecount 2> /dev/null `
	        [ "$volid" = "$ddvolid" ] && \
		    [ -f /var/run/lesslinux/usbfound ] && \
		    /static/bin/eject $cddev
	    done
	fi
    ;;
esac
		]]>
		</scriptdata>
		<scriptdata location="/etc/rc.d/0116-extraconfig.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash
		
#lesslinux provides extraconfig
#lesslinux license BSD

PATH=/static/bin:/static/sbin:/bin:/sbin:/usr/bin:/usr/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors

case $1 in 
    start)
      # Make it possible to dd a gzipped tarball with maximum 29kB at position 3072 bytes of the DVD
      # 1k at position 2048 bytes is reserved for license information on commercial products
      #
      # The tarball will be unpacked in the root directory, so many config files might be overwritten:
      dd if=` cat /var/run/lesslinux/install_source ` bs=1024 skip=3 count=29 | tar -C / -xvzf - 
    ;;
esac
		]]>
		</scriptdata>
		<!-- <scriptdata location="/etc/rc.d/0120-update.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash
		
#lesslinux provides update
#lesslinux verbose
#lesslinux license BSD

PATH=/static/bin:/static/sbin:/bin:/sbin:/usr/bin:/usr/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors

grep '/dev/sr' /var/run/lesslinux/install_source > /dev/null && exit 0

case $1 in 
    start)
	if [ -f /lesslinux/cdrom/${contdir}/mount.txt ] ; then
	    
	    # The small method for updating: 
	    #
	    # Find xdeltas and apply them
	    
	    if ls /lesslinux/cdrom/${contdir}/*.xd3 2>/dev/null ; then
		printf "$bold===> Found updates... Please be patient... $normal\n"
		mount -o remount,rw /lesslinux/cdrom
	        for i in ` cat /lesslinux/cdrom/${contdir}/mount.txt | awk '{print $1}' ` ; do
		    delta=` echo $i | sed 's/\.sqs/.xd3/g' `
		    if [ -f /lesslinux/cdrom/${contdir}/$delta ] ; then
		        printf "$bold===> Applying update for $i $normal\n"
			xdelta3 -d -s /lesslinux/cdrom/${contdir}/$i /lesslinux/cdrom/${contdir}/$delta /tmp/$i && \
			    rm /lesslinux/cdrom/${contdir}/$delta && \
			    rm /lesslinux/cdrom/${contdir}/$i && \
			    cp /tmp/$i /lesslinux/cdrom/${contdir}/ && \
			    rm /tmp/$i
	            fi
	        done
	    fi
	    
	    # The large method for updating:
	    #
	    # Loopback mount an ISO image
	    
	    if [ -f /lesslinux/cdrom/${contdir}/isoupd.txt ] ; then
		printf "$bold===> Found updates... Please be patient... $normal\n"
	        mount -o remount,rw /lesslinux/cdrom
		free_loop=` losetup -f `
		mkdir /lesslinux/update_iso
		mkdir /lesslinux/update_source
		update_found=0
		update_iso=""
		if [ -f /lesslinux/cdrom/update.iso ] ; then
		    update_iso=/lesslinux/cdrom/update.iso
		    losetup $free_loop /lesslinux/cdrom/update.iso
		else
		    # Try the first partition of the selected device
		    trypart=` cat /var/run/lesslinux/install_source | sed 's/2/1/g' `
		    mount -o rw $trypart /lesslinux/update_source
		    losetup $free_loop /lesslinux/update_source/update.iso
		    update_iso=/lesslinux/update_source/update.iso
		fi
		mount -t iso9660 $free_loop /lesslinux/update_iso
		thisversion=` cat /etc/lesslinux/updater/version.txt `
		thatversion=` cat /lesslinux/update_iso/${contdir}/version.txt ` 2> /dev/null
		if [ "$thisversion" = "$thatversion" ] ; then
		    if ( cd /lesslinux/update_iso/${contdir}/ ; sha1sum -c squash.sha ) ; then
		        printf "$bold===> Check of new files successful... $normal\n"
			rm /lesslinux/cdrom/${contdir}/*.sqs
		        ( cd /lesslinux/update_iso/${contdir}/ ; tar -cvf - . | tar -C /lesslinux/cdrom/${contdir} -xf - )
		        update_found=1
		    else
		        printf "$bold===> Check of new files failed... $normal\n"
			printf "$bold     Maybe drive is damaged - consider reinstallation $normal\n"
			printf "$bold     Sleeping 30 seconds $normal\n"
			sleep 30
		    fi	
		fi
		umount /lesslinux/update_iso
		losetup -d $free_loop
		if [ "$update_found" -gt 0 ] ; then
		    rm "$update_iso"
		    rm /lesslinux/cdrom/${contdir}/isoupd.txt
		fi
		mountpoint -q /lesslinux/update_source && umount /lesslinux/update_source
	    fi
	fi
    ;;
esac    

		]]>
		</scriptdata> -->
		<scriptdata location="/etc/rc.d/0135-toram.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash
		
#lesslinux provides toram
#lesslinux license BSD
#lesslinux description
# Copy ISO image to memory

PATH=/static/bin:/static/sbin:/bin:/sbin:/usr/bin:/usr/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors
. /etc/lesslinux/branding/branding.en.sh
[ -f "/etc/lesslinux/branding/branding.${lang}.sh" ] && . /etc/lesslinux/branding/branding.${lang}.sh
. /etc/rc.lang/en/messages.sh
[ -f "/etc/rc.lang/$lang/messages.sh" ] && . /etc/rc.lang/$lang/messages.sh
. /etc/rc.subr/progressbar

case $1 in
    start)
	mem_avail=` cat /proc/meminfo | grep MemTotal | awk '{print $2}' `
	copydevice=''
	contdevice=''
	isoblocks=0
	filesys=''
	sysdevice=''
	outerfs=''
	if mountpoint -q /lesslinux/isoloop ; then
		copydevice=` cat /proc/mounts | grep /lesslinux/isoloop | awk '{print $1}' `
		contdevice=` cat /proc/mounts | grep /lesslinux/cdrom | awk '{print $1}' ` 
		sysdevice=$contdevice
		isoblocks=` df -k /lesslinux/isoloop | tail -n 1 | awk '{print $2}' `
		filesys=` cat /proc/mounts | grep /lesslinux/isoloop | awk '{print $3}' `
		outerfs=` cat /proc/mounts | grep /lesslinux/cdrom   | awk '{print $3}' `
	else
		copydevice=` cat /proc/mounts | grep /lesslinux/cdrom | awk '{print $1}' `
		sysdevice=$copydevice
		isoblocks=` df -k /lesslinux/cdrom | tail -n 1 | awk '{print $2}' `
		filesys=` cat /proc/mounts | grep /lesslinux/cdrom | awk '{print $3}' `
		outerfs=` cat /proc/mounts | grep /lesslinux/cdrom | awk '{print $3}' `
	fi
	if [ "$optram" -gt 0 ] ; then
		if echo $sysdevice | grep '^/dev/sr' ; then
			echo '---> System device is on optical media, start copying to RAM'
		elif [ "$outerfs" = "ntfs" -o "$outerfs" = "fuseblk" ] ; then
			echo '---> System device is on NTFS, start copying to RAM'
		else
			echo '---> System device is not on optical media, skip copying to RAM'
			exit 1
		fi
	fi
	allowedfs=''
	for fs in udf iso9660 squashfs ; do
		[ "$fs" = "$filesys" ] && allowedfs=$filesys
	done
	[ -z "$allowedfs" ] && exit 1
	# toram=0 : never copy to RAM
	# toram=1 : always copy to RAM
	# toram=n : copy to RAM if available memory is n kilobytes larger than larger than the media
	copy_toram="false"
	if [ "$toram" -eq 1 ] && [ -z "$wgetiso" ] ; then
		copy_toram="true"
	elif [ "$toram" -gt 1 ] ; then
		ramneed=` expr $isoblocks + $toram ` 
		[ "$mem_avail" -gt "$ramneed" ] && copy_toram="true"
	fi
	if [ "$copy_toram" = "true" ] ; then
		printf "$bold===> Copying LESSLINUX ISO image to RAM $normal\n"
		echo -e '\033[9;0]\033[14;0]' > /dev/console
		copyblocks=` expr $isoblocks / 2 ` 
		mkdir -p /lesslinux/ramiso
		kblocks=`expr $isoblocks + 8192 ` 
		mount -t tmpfs -o mode=0755,size=${kblocks}k tmpfs /lesslinux/ramiso 
		if [ "$ultraquiet" -gt 1 ] ; then
			if [ "$ultraquiet" -eq 3 -a -p /splash.fifo ] ; then
				echo 0 > /splash.fifo
				fbsplash -i /etc/lesslinux/fbsplash_text.cfg -s /etc/lesslinux/branding/fbsplash/toram.ppm 
			fi
			genericpgbar 0 32 "$copying_toram" "0%" "" tty1
			largeblocks=` expr $copyblocks / 2048 ` 
			for n in ` seq 0 $largeblocks `; do
				percentage=` expr ${n}00 / $largeblocks ` 
				dd if=$copydevice of=/lesslinux/ramiso/lesslinux.iso bs=4194304 count=1 seek=$n skip=$n
				genericpgbar $percentage 32 "$copying_toram" "${percentage}%" "" tty1
				[ -p /splash.fifo ] && echo $percentage > /splash.fifo
			done
			genericpgbar 100 32 "$copying_toram" "100%" "" tty1
			[ -p /splash.fifo ] && echo 100 > /splash.fifo
		else
			dd if=$copydevice of=/lesslinux/ramiso/lesslinux.iso bs=2048 count=$copyblocks
		fi
		umount /lesslinux/isoloop || umount /lesslinux/isoloop
		umount /lesslinux/cdrom || umount /lesslinux/cdrom
		losetup -d $copydevice
		umount /lesslinux/cdrom || umount /lesslinux/cdrom
		freeloop=` losetup -f ` 
		losetup $freeloop /lesslinux/ramiso/lesslinux.iso
		mkdir -p /lesslinux/isoloop
		mount $freeloop /lesslinux/isoloop
		if [ "$ejectcd" -gt 0 ] ; then
			echo $sysdevice | grep '^/dev/sr' && eject $sysdevice 
		fi
		touch /var/run/lesslinux/cdfound
		touch /var/run/lesslinux/isoloop
		echo -n "$freeloop" > /var/run/lesslinux/install_source
		echo "bootdevice=wget" > /var/run/lesslinux/startup_vars
		echo "bootmode=loop" >> /var/run/lesslinux/startup_vars
		echo "loopfile=/lesslinux/ramiso/lesslinux.iso" >> /var/run/lesslinux/startup_vars
		echo "loopdev=$freeloop" >> /var/run/lesslinux/startup_vars
		echo "isohybrid=false" >> /var/run/lesslinux/startup_vars
	fi
    ;;
esac
	
		]]>
		</scriptdata>
		<scriptdata location="/etc/rc.d/0140-mountcontainer.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash

#lesslinux provides mountcontainer
#lesslinux patience
#lesslinux license BSD

PATH=/static/bin:/static/sbin:/bin:/sbin:/usr/bin:/usr/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors
. /etc/lesslinux/branding/branding.en.sh
[ -f "/etc/lesslinux/branding/branding.${lang}.sh" ] && . /etc/lesslinux/branding/branding.${lang}.sh
. /etc/rc.lang/en/messages.sh
[ -f "/etc/rc.lang/$lang/messages.sh" ] && . /etc/rc.lang/$lang/messages.sh
. /etc/rc.subr/progressbar
		
mem_avail=` cat /proc/meminfo | grep MemTotal | awk '{print $2}' `
mediadir=cdrom
kversion=` uname -r `
		
case $1 in
    start)
	# Remove the loop device for the modules first
        if [ -f /lesslinux/modules/${kversion}.sqs ] && mountpoint -q /lib/modules/${kversion} ; then
	    modloop=` cat /proc/mounts | grep "/lib/modules/${kversion}" | awk '{print $1}' `
	    umount "/lib/modules/${kversion}"
	    umount "/usr/lib/modules/${kversion}"
	    losetup -d ${modloop}
        fi
	# Same for firmware
	if [ -f /lesslinux/modules/firmware.sqs ] && mountpoint -q /lib/firmware ; then
	    firmloop=` cat /proc/mounts | grep "/lib/firmware" | awk '{print $1}' `
	    umount "/lib/firmware"
	    umount "/usr/lib/firmware"
	    losetup -d ${firmloop}
        fi
        if [ '!' -f  /var/run/lesslinux/cdfound ] ; then
	    printf "$bold===> Prerequisite for LESSLINUX containers not available         $failed $normal\n"
	    touch /var/run/lesslinux/boot_failed
	    exit 1
	fi
	printf "$bold===> Searching for LESSLINUX containers $normal\n"
	if [ -f /var/run/lesslinux/isoloop ] ; then
	    copy_source=/lesslinux/isoloop/$contdir
	    mediadir=isoloop
	else
	    copy_source=/lesslinux/cdrom/$contdir
	fi
	[ "$skipcheck" -lt 1 ] && run_self_test $mediadir
	[ -f /lesslinux/$mediadir/$contdir/overlay.tgz ] && \
	    ln -sf /lesslinux/$mediadir/$contdir/overlay.tgz /etc/lesslinux/branding/overlays/overlay3.tgz
	cat /lesslinux/$mediadir/$contdir/mount.txt | while read fs
	do
	    mdev -s
	    case $fs in
		'#'*|'')
			true
		;;
		fullsys.sqs*)
		    container=` echo $fs | awk '{print $1}' `
		    mkdir -p /lesslinux/fullsys
		    mount -o loop,ro /lesslinux/$mediadir/$contdir/$container /lesslinux/fullsys
		    for d in usr bin lib opt sbin srv ; do
			if [ -d /lesslinux/fullsys/$d ] ; then
				mkdir -p /$d
				mount --bind /lesslinux/fullsys/$d /$d
			else
				[ -d /lesslinux/fullsys/usr/$d ] && ln -s /usr/$d /$d
			fi
		    done
		;;
		*)
		    container=` echo $fs | awk '{print $1}' `
		    if [ -n "$container" ] ; then
		        mountpoint=` echo $fs | awk '{print $2}' `
			mkdir -p $mountpoint > /dev/null 2>&1
			if [ "$security" = "smack" ] ; then
				if [ "$container" = "opt.sqs" ] ; then
					smackopts=',smackfsdef=internet,smackfsroot=internet'
				elif [ "$container" = "usrbin.sqs" ] ; then
					smackopts=',smackfsdef=usrbin,smackfsroot=usrbin'
				elif [ "$container" = "lib.sqs" ] ; then
					[ -d /lib/firmware ] && rm -rf /lib/firmware  
					smackopts=''
				else
					smackopts=''
				fi
				mount -o loop,ro,"$smackopts" /lesslinux/$mediadir/$contdir/$container $mountpoint
			else
				mount -o loop,ro /lesslinux/$mediadir/$contdir/$container $mountpoint
			fi
		    fi
		;;
	    esac
	done
	release=` uname -r `
	modcontainer=` grep -E "^${release}"' ' /lesslinux/$mediadir/$contdir/modules.txt | awk '{print $2}' `
	# mountpoint -q /lib && mount -t tmpfs -o mode=0755 tmpfs /lib/modules
	mount -t tmpfs -o mode=0755 tmpfs /usr/lib/modules
	[ -d /usr/lib/modules/$release ] || mkdir /usr/lib/modules/$release
	if [ -f /lesslinux/$mediadir/$contdir/$modcontainer ] ; then
	    mount -o loop,ro /lesslinux/$mediadir/$contdir/$modcontainer /usr/lib/modules/$release
	    [ -f /lesslinux/modules/$release ] && rm /lesslinux/modules/$release
	else
	    free_loop=` losetup -f `
	    losetup $free_loop /lesslinux/modules/${release}.sqs
	    mount -t squashfs $free_loop /usr/lib/modules/${release}
	    free_loop=` losetup -f `
	    losetup $free_loop /lesslinux/modules/firmware.sqs
	    mount -t squashfs $free_loop /usr/lib/firmware
        fi
	for d in lib64 lib bin sbin ; do
		[ -d /${d} ] || [ -L /${d} ] || ln -sf /usr/${d} /${d} 
	done
    ;;
esac
		
# The end	]]>
		</scriptdata>
		<modlist provides="mountcontainer" hwenv="default">
			<module>loop</module>
			<module>squashfs</module>
		</modlist>
		<scriptdata location="/etc/rc.d/0141-preppartitions.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash

#lesslinux provides preppartitions
#lesslinux patience
#lesslinux license BSD

PATH=/usr/bin:/usr/sbin:/bin:/sbin:/static/bin:/static/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors
. /etc/lesslinux/branding/branding.en.sh
[ -f "/etc/lesslinux/branding/branding.${lang}.sh" ] && . /etc/lesslinux/branding/branding.${lang}.sh
. /etc/rc.lang/en/messages.sh
[ -f "/etc/rc.lang/$lang/messages.sh" ] && . /etc/rc.lang/$lang/messages.sh
. /etc/rc.subr/progressbar
		
case $1 in
    start)
	device=''
	if [ -f /var/run/lesslinux/preppartitions ] ; then
		device=`cat /var/run/lesslinux/preppartitions `
	else
		exit 0
	fi
	mkdir -p /lesslinux/boot
	mount -t vfat -o rw,iocharset=utf8 ${device}1 /lesslinux/boot
	if [ -f /lesslinux/cdrom/boot/kickstart.xd3 ]  ; then
		for f in ` cat /lesslinux/cdrom/lesslinux/boot.sha | awk '{print $2}' `; do
			cat /lesslinux/cdrom/boot/kernel/${f} >> /lesslinux/boot/boot/kickstart.raw
		done
		xdelta3 -d -s /lesslinux/boot/boot/kickstart.raw /lesslinux/cdrom/boot/kickstart.xd3 \
			/lesslinux/boot/boot/kickstart.iso && rm /lesslinux/boot/boot/kickstart.raw
	fi
	sync
	umount /lesslinux/boot || umount /lesslinux/boot 
	# Use mtools to hide some files from Windows
	sed -i "s%/dev/disk/by-label/USBDATA%${device}1%g" /etc/mtools.conf 
	for d in boot EFI loader ; do
		mattrib +r +h / X:/${d}
	done
	# Check if there is enough space behind the partition table for another ISO image
	devsize=`     parted -m -s ${device} unit b print | grep msdos | awk -F ':|B:' '{print $2}' ` 
	partend=`     parted -m -s ${device} unit b print | grep '^1'  | awk -F ':|B:' '{print $3}'  `
	isosize=`     parted -m -s ${device} unit b print | grep '^1'  | awk -F ':|B:' '{print $2}'  `
	isotwostart=` expr $devsize - $isosize - 8388608 ` 
	# Exit gracefully if size is not sufficient
	[ "$isotwostart" -lt "$partend" ] && exit 0
	# Determine the end of our new loop device by matching an 8M chunk towards the end of the device: 
	loopendblock=` expr '(' $devsize - $isosize ')' / 8388608 - 1 ` 
	# Create a loop device with correct parameters 
	freeloop=` losetup -f ` 
	losetup -o ` expr $partend + 1 ` --sizelimit ` expr $loopendblock '*' 8388608 - $partend - 1 ` $freeloop $device
	dd if=/dev/zero bs=1M count=8 of=${freeloop} 
	# Calculate numbers of blocks needed:
	# BLOB first
	blobblocks=0
	if [ "$blobsize" -gt 63 ] ; then
		blobblocks=` expr $blobsize / 8 ` 
	else
		blobblocks=1
	fi
	# Swap size
	swapblocks=0
	if [ "$swapsize" -gt 63 ] ; then
		swapblocks=` expr $swapsize / 8 ` 
	else
		swapblocks=1
	fi
	# encrypted home
	# Recalculate the possible size of the partition for the encrypted home container
	loopblocks=` expr $loopendblock - '(' $partend / 8388608 ')' ` 
	hcblocks=1
	if [ "$homecontmax" -gt 0 ] ; then
		hcmaxblocks=` expr $homecontmax / 8 ` 
		hcminblocks=` expr $homecontmin / 8 ` 
		hcpossible=` expr $loopblocks - $blobblocks - $swapblocks ` 
		if [ "$hcpossible" -gt $hcmaxblocks ] ; then
			hcblocks=$hcmaxblocks
		else
			hcblocks=$hcpossible
		fi
	fi
	
	# Create partition table: 
	parted -s "$freeloop" mklabel gpt
	
	# First partition - Swap
	swappartlabel="${brandshort}-SWAP"
	[ "$swapblocks" -lt 32 ] && swappartlabel=empty
	parted -s $freeloop unit B mkpart "${swappartlabel}" ext2 1048576 ` expr $swapblocks '*' 8388608 - 1 ` 

	# Second partition - Blob
	blobpartlabel="${brandshort}-BLOB"
	[ "$blobblocks" -lt 32 ] && blobpartlabel=empty
	if [ "$hcblocks" -lt 32 ] ; then
		parted -s $freeloop unit B mkpart "${blobpartlabel}" ext2 ` expr $swapblocks '*' 8388608 ` 100% 
	else
		parted -s $freeloop unit B mkpart "${blobpartlabel}" ext2 ` expr $swapblocks '*' 8388608 `  ` expr '(' $swapblocks + $blobblocks ')' '*' 8388608 - 1 `
		# Third partition - encrypted container
		homepartlabel="${brandshort}-HOME"
		[ "$hcblocks" -lt 32 ] && homepartlabel=empty
		parted -s $freeloop unit B mkpart "${homepartlabel}" ext2 ` expr '(' $swapblocks + $blobblocks ')' '*' 8388608 ` 100% 
	fi
	sync 
	parted -s -m $freeloop unit B print > /var/run/lesslinux/looppart.txt
	losetup -d $freeloop 
	p1start=` grep '^1' /var/run/lesslinux/looppart.txt | awk -F ':|B:' '{print $2}' `
	p1size=`  grep '^1' /var/run/lesslinux/looppart.txt | awk -F ':|B:' '{print $4}' `
	p2start=` grep '^2' /var/run/lesslinux/looppart.txt | awk -F ':|B:' '{print $2}' `
	p2size=`  grep '^2' /var/run/lesslinux/looppart.txt | awk -F ':|B:' '{print $4}' `
	p3start=` grep '^3' /var/run/lesslinux/looppart.txt | awk -F ':|B:' '{print $2}' `
	p3size=`  grep '^3' /var/run/lesslinux/looppart.txt | awk -F ':|B:' '{print $4}' `
	if [ "$swapblocks" -gt 1  ] ; then
		nextloop=` losetup -f ` 
		losetup $nextloop -o $(( $p1start + $partend + 1 )) --sizelimit $p1size $device
		if=/dev/zero bs=1M count=8 of=$nextloop
		mkfs.ext2 -F -L LessLinuxSwap $nextloop
		sync
		losetup -d $nextloop
	fi
	if [ "$blobblocks" -gt 1  ] ; then
		nextloop=` losetup -f ` 
		losetup $nextloop -o $(( $p2start + $partend + 1 )) --sizelimit $p2size $device
		if=/dev/zero bs=1M count=8 of=$nextloop
		mkfs.ext2 -F -L LessLinuxBlob $nextloop
		sync
		losetup -d $nextloop
	fi 
	if [ "$hcblocks" -gt 31  ] ; then
		nextloop=` losetup -f ` 
		losetup $nextloop -o $(( $p3start + $partend + 1 )) --sizelimit $p3size $device
		if=/dev/zero bs=1M count=8 of=$nextloop
		mkfs.ext2 -F -L LessLinuxCrypt $nextloop
		sync 
		losetup -d $nextloop
	fi 
	
	# FIXME: Write UUIDs to bootloader config! 
	exit 0
    ;;
esac
		
# The end	]]>
		</scriptdata>
		<scriptdata location="/etc/rc.d/0142-findpartitions.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash

#lesslinux provides findpartitions
#lesslinux patience
#lesslinux license BSD

PATH=/usr/bin:/usr/sbin:/bin:/sbin:/static/bin:/static/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors
. /etc/lesslinux/branding/branding.en.sh
[ -f "/etc/lesslinux/branding/branding.${lang}.sh" ] && . /etc/lesslinux/branding/branding.${lang}.sh
. /etc/rc.lang/en/messages.sh
[ -f "/etc/rc.lang/$lang/messages.sh" ] && . /etc/rc.lang/$lang/messages.sh
. /etc/rc.subr/progressbar
. /var/run/lesslinux/startup_vars
		
case $1 in
    start)
	device=''
	device=$outerdevice
	[ -z "$device" ] && exit 0
	# Check if there is enough space behind the partition table for another ISO image
	devsize=`     parted -m -s ${device} unit b print | grep msdos | awk -F ':|B:' '{print $2}' ` 
	partend=`     parted -m -s ${device} unit b print | grep '^1'  | awk -F ':|B:' '{print $3}'  `
	isosize=`     parted -m -s ${device} unit b print | grep '^1'  | awk -F ':|B:' '{print $2}'  `
	isotwostart=` expr $devsize - $isosize - 8388608 ` 
	# Determine the end of our new loop device by matching an 8M chunk towards the end of the device: 
	loopendblock=` expr '(' $devsize - $isosize ')' / 8388608 - 1 ` 
	# Create a loop device with correct parameters 
	freeloop=` losetup -f ` 
	losetup -o ` expr $partend + 1 ` --sizelimit ` expr $loopendblock '*' 8388608 - $partend - 1 ` $freeloop $device
	# Backup the partition table 
	parted -s -m $freeloop unit B print > /var/run/lesslinux/looppart.txt
	p1start=` grep '^1' /var/run/lesslinux/looppart.txt | awk -F ':|B:' '{print $2}' `
	
	if [ -z "$p1start" ] ; then
		losetup -d $freeloop
	else
		partx -a $freeloop 
	fi
    ;;
esac
		
# The end	]]>
		</scriptdata>
		<!-- <scriptdata location="/etc/rc.d/0145-debug.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash
	
#lesslinux provides debug-025
#lesslinux debug 5

PATH=/static/bin:/static/sbin:/bin:/sbin:/usr/bin:/usr/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors

now=`date '+%Y%M%d-%H%M%S' ` 

case $1 in
    start)
        startup_time=` cat /var/run/lesslinux/startup_time `
	debugdir=/lesslinux/debug
	if [ -d /lesslinux/cdrom/debug ] && touch /lesslinux/cdrom/debug/is_writable ; then
	    debugdir=/lesslinux/cdrom/debug
	elif [ -d /lesslinux/debug_device/debug ] ; then
	    debugdir=/lesslinux/debug_device/debug
	fi
	cat /proc/bus/pci/devices > ${debugdir}/${startup_time}/${now}_pcidevices.txt
	cat /proc/devices > ${debugdir}/${startup_time}/${now}_devicenodes.txt
	cat /proc/modules > ${debugdir}/${startup_time}/${now}_modules.txt
	cat /proc/mounts > ${debugdir}/${startup_time}/${now}_mounts.txt
	losetup > ${debugdir}/${startup_time}/${now}_losetup.txt
	lshw-static -xml -sanitize > ${debugdir}/${startup_time}/${now}_lshw.xml
	lshw-static -html -sanitize > ${debugdir}/${startup_time}/${now}_lshw.html
	lshw-static -short -sanitize > ${debugdir}/${startup_time}/${now}_lshw.txt
	lspci -nn > ${debugdir}/${startup_time}/${now}_lspci_nn.txt
	lspci -vv > ${debugdir}/${startup_time}/${now}_lspci_vv.txt
	lsusb -vv > ${debugdir}/${startup_time}/${now}_lsusb_vv.txt
	dmesg > ${debugdir}/${startup_time}/${now}_dmesg.txt
	sleep 2
    ;;
esac
#		]]>
		</scriptdata> -->
		<scriptdata location="/etc/rc.d/0143-swap.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash
		
#lesslinux provides swap
#lesslinux parallel
#lesslinux license BSD
#lesslinux description
# Prepare development and build environment of LessLinux

PATH=/bin:/sbin:/usr/bin:/usr/sbin:/static/bin:/static/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors
. /etc/lesslinux/branding/branding.en.sh
[ -f "/etc/lesslinux/branding/branding.${lang}.sh" ] && . /etc/lesslinux/branding/branding.${lang}.sh

format_and_mount_swap() {
	auxuuid=$1
	auxpart=$2
	[ -z "$auxpart" ] && exit 1
	swapkey=/lesslinux/cryptkeys/swap.key
	mkdir -m 0700 /lesslinux/cryptkeys
	dd if=/dev/urandom bs=1M count=4 of=${swapkey} 
	chmod 0600 ${swapkey} 
	cryptsetup luksFormat --uuid=${auxuuid} -c aes-xts-plain64 -s 512 -h sha512 --use-urandom -i 5000 -q ${auxpart} ${swapkey} 
	shortpart=` echo $auxpart | sed 's%/dev/%%g' `
	cryptsetup luksOpen --key-file ${swapkey} ${auxpart} ${shortpart} && \
		ln -s /dev/mapper/${shortpart} /dev/mapper/cryptoswap && \
		ln -s /dev/mapper/${shortpart} ${auxpart}.child 
 	rm ${swapkey} 
	mkswap /dev/mapper/${shortpart}
	swapon /dev/mapper/${shortpart}
}

case $1 in
    start)
	if [ -n "$swap" ] ; then
		printf "$bold===> Preparing swap... $normal\n"
		swappart=` blkid -U $swap `
		[ -z "$swappart" ] && exit 1 
		parttype=` blkid -o udev $swappart | grep 'ID_FS_TYPE=' | awk -F '=' '{print $2}'  ` 
		if [ "$parttype" = crypto_LUKS ] ; then
			format_and_mount_swap $swap $swappart
		elif [ "$parttype" = swap ] ; then
			swapon $swappart
		fi
	else
		swappart=` blkid -o device -t PARTLABEL="${brandshort}-SWAP" `
		[ -z "$swappart" ] && swappart=` blkid -L LessLinuxSwap `
		[ -z "$swappart" ] && exit 1 
		swapuuid=` blkid -o udev $swappart | grep 'ID_FS_UUID=' | awk -F '=' '{print $2}' ` 
		format_and_mount_swap $swapuuid $swappart
	fi
	touch /var/log/lesslinux/bootlog/swap.done
    ;;
    stop)
	swaps=` cat /proc/swaps | grep '^/' | awk '{print $1}' ` 
	for f in $swaps ; do
		swapoff $f
		cryptsetup luksClose $f
		losetup -d $f
	done
    ;;
esac
	
		]]>
		</scriptdata>
		<modlist provides="swap" hwenv="default">
			<module>dm-crypt</module>
			<module>sha256</module>
			<module>sha512</module>
			<module>aes</module>
		</modlist>
		<scriptdata location="/etc/rc.d/0144-blobpart.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash
		
#lesslinux provides blob
#lesslinux license BSD
#lesslinux description
# Prepare development and build environment of LessLinux

PATH=/bin:/sbin:/usr/bin:/usr/sbin:/static/bin:/static/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors

case $1 in
    start)
	printf "$bold===> Preparing some filesystems... $normal\n"
	bootdev=` blkid -L LessLinuxBoot ` 
	if [ -n "$bootdev" ] ; then
		mkdir -p /lesslinux/boot
		mountpoint -q /lesslinux/boot || mount -t ext4 -o ro $bootdev /lesslinux/boot
	fi
	efidev=` blkid -L LessEfiBoot `
	if [ -n "$efidev" ] ; then
		mkdir -p /lesslinux/efiboot
		mountpoint -q /lesslinux/efiboot || mount -o ro $efidev /lesslinux/efiboot
	fi
	blobdev=` blkid -L LessLinuxBlob `
	if [ -n "$blobdev" ] ; then
		mountpoint -q /lesslinux/blobpart && exit 0
		mkdir -p /lesslinux/blobpart
		fstype=` blkid -o udev "$blobdev" | grep 'FS_TYPE=ext' | awk -F '=' '{print $2}' `
		if [ "$fstype" = ext2 ] ; then
			# tune2fs -O extents,uninit_bg,dir_index ${blobdev}
			# fsck -fCVD ${blobdev}
			# fsck -fCV ${blobdev}
			# btrfs-convert ${blobdev}
			dd if=/dev/zero bs=1M count=8 of=${blobdev}
			mkfs.btrfs -f -L LessLinuxBlob ${blobdev}
			mount -t btrfs -o relatime,compress $blobdev /lesslinux/blobpart
		elif [ "$fstype" = ext4 ] ; then
			mount -t ext4 -o relatime $blobdev /lesslinux/blobpart
		else
			mount -t btrfs -o relatime,compress $blobdev /lesslinux/blobpart
		fi
		thisversion=` cat /etc/lesslinux/updater/version.txt `
		if [ -f /lesslinux/blobpart/updates/update-${thisversion}.txz ] ; then
			# Check signature first!
			# Import the key
			/usr/bin/gpg --import /etc/lesslinux/updater/updatekey.asc
			if /usr/bin/gpg --verify /lesslinux/blobpart/updates/update-${thisversion}.txz.asc ; then
				tar -C / -xf /lesslinux/blobpart/updates/update-${thisversion}.txz
			fi
		fi
	fi
    ;;
    stop)
	umount /lesslinux/boot
	umount /lesslinux/efiboot
	umount /lesslinux/blob
	umount /lesslinux/blobpart
    ;;
esac
	
		]]>
		</scriptdata>
		<scriptdata location="/etc/rc.d/0145-update.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash
		
#lesslinux provides updateoverlay1
#lesslinux license BSD
#lesslinux description
# Overwrite this script at update time

PATH=/bin:/sbin:/usr/bin:/usr/sbin:/static/bin:/static/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors

exit 0
	
		]]>
		</scriptdata>
		<scriptdata location="/etc/rc.d/0146-devel.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash
		
#lesslinux provides devel
#lesslinux license BSD
#lesslinux description
# Prepare development and build environment of LessLinux

PATH=/bin:/sbin:/usr/bin:/usr/sbin:/static/bin:/static/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors

case $1 in
    start)
	if [ -x /usr/share/lesslinux/auxiliary-scripts/prepare-lesslinux-build.sh ] ; then
		printf "$bold===> Preparing development environment... $normal\n"
		/usr/share/lesslinux/auxiliary-scripts/prepare-lesslinux-build.sh
		if [ -f /mnt/archiv/LessLinux/development_overlays.tar.gz ] ; then
			tar -C / -xzf /mnt/archiv/LessLinux/development_overlays.tar.gz
		fi
	fi
    ;;
esac
	
		]]>
		</scriptdata>
		<scriptdata location="/etc/rc.d/0148-overlay.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash
		
#lesslinux provides ovrl
#lesslinux license BSD
#lesslinux description
# Unpack overlays if found
 
# Overlays may be stored as same_filename.tgz in the same folder as an ISO
# or as overlay.tgz in the directory with the squashfs containers. If both
# exist, the overlay among the ISO overwrites files. More possibliities 
# like http://, ftp:// or tftp:// might follow soon.
#
# Please also take a look at /etc/rc.d/9999-local.sh

PATH=/static/bin:/static/sbin:/bin:/sbin:/usr/bin:/usr/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors

case $1 in
    start)
	printf "$bold===> Searching overlays... $normal\n"
	for i in 0 1 2 3 4 5 6 7 8 9 ; do
		tar -C / -xzf /etc/lesslinux/branding/overlays/overlay${i}.tgz 2> /dev/null  
	done
    ;;
esac
	
		]]>
		</scriptdata>
		<scriptdata location="/etc/rc.d/0150-localelink.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash
		
#lesslinux provides loli
#lesslinux license BSD
#lesslinux description
# Link some locale defaults

PATH=/static/bin:/static/sbin:/bin:/sbin:/usr/bin:/usr/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors

case $1 in
    start)
	printf "$bold===> Linking some localization settings... $normal\n"
	cat /etc/lesslinux/branding/filelist.txt | while read fname ; do
		[ -n "$fname" ] && [ -f "${fname}.en" ] && ln -sf "${fname}.en" "$fname"
		[ -n "$fname" ] && [ -f "${fname}.${lang}" ] && ln -sf "${fname}.${lang}" "$fname"
	done
    ;;
esac
	
		]]>
		</scriptdata>
		<scriptdata location="/etc/rc.d/0151-timezone.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash
#lesslinux provides tz
#lesslinux license BSD
#lesslinux description
# Link the correct timezone

PATH=/static/bin:/static/sbin:/bin:/sbin:/usr/bin:/usr/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors

case $1 in
    start)
	printf "$bold===> Linking timezone... $normal\n"
	if [ -n "$tz" ] && [ -f "/usr/share/zoneinfo/${tz}" ] ; then
	    cp -f /usr/share/zoneinfo/${tz} /etc/localtime
	else
	    echo "Determining timezone failed. Keep UTC."
	fi
    ;;
esac
	
		]]>
		</scriptdata>
		<scriptdata location="/etc/rc.d/0160-keymap.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash
		
#lesslinux provides keymap
#lesslinux license BSD
#lesslinux description
# Set keymap according to choice of language

PATH=/static/bin:/static/sbin:/bin:/sbin:/usr/bin:/usr/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors
		
case $1 in
    start)
	printf "$bold===> Setting keymap                                              "
	if [ -n "$keymap" ] && loadkeys "$keymap" > /dev/null 2>&1 ; then
	    printf "$success"
	else
	    printf "$failed"
	fi
    ;;
esac

# END		]]>
		</scriptdata>
		<scriptdata location="/etc/rc.d/0176-iptables.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash
		
#lesslinux provides firewall
#lesslinux license BSD
#lesslinux description
# Start iptables firewall with very simple rules

PATH=/bin:/sbin:/usr/bin:/usr/sbin:/static/bin:/static/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors

case $1 in
    start)
	printf "$bold===> Starting firewall $normal\n"
	# Module laden
	modprobe ip_tables
	modprobe ip_conntrack
	modprobe ip_conntrack_irc
	modprobe ip_conntrack_ftp

	# Tabelle flushen
	iptables -F
	iptables -t nat -F
	iptables -t mangle -F
	iptables -X
	iptables -t nat -X
	iptables -t mangle -X

	# Default-Policies setzen
	iptables -P INPUT DROP
	iptables -P OUTPUT DROP
	iptables -P FORWARD DROP

	# MY_REJECT-Chain
	iptables -N MY_REJECT

	# MY_REJECT fuellen
	iptables -A MY_REJECT -p tcp -m limit --limit 7200/h -j LOG --log-prefix "REJECT TCP "
	iptables -A MY_REJECT -p tcp -j REJECT --reject-with tcp-reset
	iptables -A MY_REJECT -p udp -m limit --limit 7200/h -j LOG --log-prefix "REJECT UDP "
	iptables -A MY_REJECT -p udp -j REJECT --reject-with icmp-port-unreachable
	iptables -A MY_REJECT -p icmp -m limit --limit 7200/h -j LOG --log-prefix "DROP ICMP "
	iptables -A MY_REJECT -p icmp -j DROP
	iptables -A MY_REJECT -m limit --limit 7200/h -j LOG --log-prefix "REJECT OTHER "
	iptables -A MY_REJECT -j REJECT --reject-with icmp-proto-unreachable

	# MY_DROP-Chain
	iptables -N MY_DROP
	iptables -A MY_DROP -m limit --limit 7200/h -j LOG --log-prefix "PORTSCAN DROP "
	iptables -A MY_DROP -j DROP

	# Alle verworfenen Pakete protokollieren
	iptables -A INPUT -m state --state INVALID -m limit --limit 7200/h -j LOG --log-prefix "INPUT INVALID "
	iptables -A OUTPUT -m state --state INVALID -m limit --limit 7200/h -j LOG --log-prefix "OUTPUT INVALID "
	iptables -A FORWARD -m state --state INVALID -m limit --limit 7200/h -j LOG --log-prefix "FORWARD INVALID "

	# Korrupte Pakete zurueckweisen
	iptables -A INPUT -m state --state INVALID -j DROP
	iptables -A OUTPUT -m state --state INVALID -j DROP
	iptables -A FORWARD -m state --state INVALID -j DROP

	# Stealth Scans etc.
	iptables -A INPUT -p tcp --tcp-flags ALL NONE -j MY_DROP
	iptables -A FORWARD -p tcp --tcp-flags ALL NONE -j MY_DROP
	iptables -A INPUT -p tcp --tcp-flags SYN,FIN SYN,FIN -j MY_DROP
	iptables -A FORWARD -p tcp --tcp-flags SYN,FIN SYN,FIN -j MY_DROP
	iptables -A INPUT -p tcp --tcp-flags SYN,RST SYN,RST -j MY_DROP
	iptables -A FORWARD -p tcp --tcp-flags SYN,RST SYN,RST -j MY_DROP
	iptables -A INPUT -p tcp --tcp-flags FIN,RST FIN,RST -j MY_DROP
	iptables -A FORWARD -p tcp --tcp-flags FIN,RST FIN,RST -j MY_DROP
	iptables -A INPUT -p tcp --tcp-flags ACK,FIN FIN -j MY_DROP
	iptables -A FORWARD -p tcp --tcp-flags ACK,FIN FIN -j MY_DROP
	iptables -A INPUT -p tcp --tcp-flags ACK,PSH PSH -j MY_DROP
	iptables -A FORWARD -p tcp --tcp-flags ACK,PSH PSH -j MY_DROP
	iptables -A INPUT -p tcp --tcp-flags ACK,URG URG -j MY_DROP
	iptables -A FORWARD -p tcp --tcp-flags ACK,URG URG -j MY_DROP

	# Loopback-Netzwerk-Kommunikation zulassen
	iptables -A INPUT -i lo -j ACCEPT
	iptables -A OUTPUT -o lo -j ACCEPT

	# Maximum Segment Size (MSS) fuer das Forwarding an PMTU anpassen
	iptables -A FORWARD -p tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu

	# Connection-Tracking aktivieren
	iptables -A OUTPUT -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
	iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

	# Default-Policies mit REJECT
	iptables -A INPUT -j MY_REJECT
	iptables -A OUTPUT -j MY_REJECT
	iptables -A FORWARD -j MY_REJECT

	# Routing
	echo 0 > /proc/sys/net/ipv4/ip_forward 2> /dev/null

	echo 1 > /proc/sys/net/ipv4/tcp_syncookies 2> /dev/null
	for i in /proc/sys/net/ipv4/conf/*; do echo 0 > $i/accept_source_route 2> /dev/null; done
	for i in /proc/sys/net/ipv4/conf/*; do echo 0 > $i/accept_redirects 2> /dev/null; done
	for i in /proc/sys/net/ipv4/conf/*; do echo 2 > $i/rp_filter 2> /dev/null; done
	for i in /proc/sys/net/ipv4/conf/*; do echo 1 > $i/log_martians 2> /dev/null; done
	for i in /proc/sys/net/ipv4/conf/*; do echo 0 > $i/bootp_relay 2> /dev/null; done
	for i in /proc/sys/net/ipv4/conf/*; do echo 0 > $i/proxy_arp 2> /dev/null; done

	echo 1 > /proc/sys/net/ipv4/icmp_ignore_bogus_error_responses 2> /dev/null
	echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts 2> /dev/null

	# Max. 500/Sekunde (5/Jiffie) senden
	echo 5 > /proc/sys/net/ipv4/icmp_ratelimit

	# Speicherallozierung und -timing fuer IP-De/-Fragmentierung
	echo 262144 > /proc/sys/net/ipv4/ipfrag_high_thresh
	echo 196608 > /proc/sys/net/ipv4/ipfrag_low_thresh
	echo 30 > /proc/sys/net/ipv4/ipfrag_time

	# TCP-FIN-Timeout zum Schutz vor DoS-Attacken setzen
	echo 30 > /proc/sys/net/ipv4/tcp_fin_timeout

	# Maximal 3 Antworten auf ein TCP-SYN
	echo 3 > /proc/sys/net/ipv4/tcp_retries1

	# TCP-Pakete maximal 15x wiederholen
	echo 15 > /proc/sys/net/ipv4/tcp_retries2
    ;;
    stop)
	printf "$bold===> Stopping firewall $normal\n"
	iptables -F
	iptables -t nat -F
	iptables -t mangle -F
	iptables -X
	# iptables -t nat -X
	iptables -t mangle -X
	# echo 0 > /proc/sys/net/ipv4/ip_forward

	# Default-Policies setzen
	iptables -P INPUT ACCEPT
	iptables -P OUTPUT ACCEPT
	iptables -P FORWARD ACCEPT
    ;;
esac

# The end       ]]>		
		</scriptdata>
		<modlist provides="xprepare" hwenv="default">
			<module>psmouse</module>
			<module>usbcore</module>
			<module>ehci-hcd</module>
			<module>uhci-hcd</module>
			<module>ohci-hcd</module>
			<module>hid</module>
			<module>usbhid</module>
		</modlist>
		<modlist provides="xprepare" hwenv="vmware">
			<module>psmouse</module>
		</modlist>
		<!-- <scriptdata location="/etc/rc.d/0189-hwinfo.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash
		
#lesslinux provides hwinfo
#lesslinux debug 2
#lesslinux license BSD

PATH=/static/bin:/static/sbin:/bin:/sbin:/usr/bin:/usr/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors

case $1 in 
    start)
	printf "$bold===> Preparing hardware information $normal\n"
	now=` date +%Y%m%d-%H%M `
	mkdir /tmp/hwinfo
        lshw-static -xml -sanitize > /tmp/hwinfo/lshw.xml
	lshw-static -html -sanitize > /tmp/hwinfo/lshw.html
	lshw-static -short -sanitize > /tmp/hwinfo/lshw.txt
	# Xvesa -listmodes 2> /tmp/hwinfo/vesamodes.txt
	cat /proc/cpuinfo > /tmp/hwinfo/cpuinfo.txt
	cat /proc/meminfo > /tmp/hwinfo/meminfo.txt
	lsmod > /tmp/hwinfo/lsmod.txt
	lspci -nn > /tmp/hwinfo/lspci.txt
	lsusb -vv > /tmp/hwinfo/lsusb.txt
	( cd /tmp && tar cjf hwinfo_${now}.tbz hwinfo )
    ;;
esac

# The end	]]>
		</scriptdata> -->
		<!-- <scriptdata location="/etc/rc.d/0400-modfix.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash
		
#lesslinux provides modfix
#lesslinux license BSD

PATH=/bin:/sbin:/usr/bin:/usr/sbin:/static/bin:/static/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors

case $1 in 
    start)
	printf "$bold===> Re-loading some modules $normal\n"
	# rt61 sometimes does not load correctly with kernel 2.6.33
	# just reload it
	# same with ath9k and iwl3945 for 2.6.34
	for mod in ath9k rt61pci iwl3945 iwlwifi iwlagn rt2800pci ; do
		if lsmod | awk '{print $1}' | grep -q "$mod" ; then
			modprobe -rv "$mod"
			modprobe -v  "$mod"
		fi
	done
    ;;
esac

# The end	]]>
		</scriptdata> -->
		<scriptdata location="/etc/rc.d/0410-lpd.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash
		
#lesslinux provides lpd
#lesslinux license BSD

PATH=/bin:/sbin:/usr/bin:/usr/sbin:/static/bin:/static/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors

case $1 in 
    start)
	if [ -n "$printers" ] ; then
		printf "$bold===> Starting LPD $normal\n"
		mkdir -p /var/spool/lpd
		for p in ` echo $printers | sed 's/|/ /g' ` ; do
			ln -sf /dev/usb/$p /var/spool/lpd/$p  
		done
		/static/bin/tcpsvd -E 0 515 /static/sbin/lpd /var/spool/lpd & 
	fi
    ;;
esac

# The end	]]>
		</scriptdata>
		<scriptdata location="/etc/rc.d/0550-xprepare.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash
		
#lesslinux provides xprepare
#lesslinux license BSD
#lesslinux description
# Prepare some modules needed by Xserver

PATH=/static/bin:/static/sbin:/bin:/sbin:/usr/bin:/usr/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors

# Allow Xorg modules to be skipped in case of defective drivers:
for i in ` cat /proc/cmdline /etc/lesslinux/cmdline /lesslinux/boot/cmdline ` ; do
   case "$i" in
     skipxmods=*)
	skipxmods=`echo "$i" | awk -F '=' '{print $2}' | sed 's/|/ /g' ` 
     ;;
   esac
done

case $1 in
    start)
	printf "$bold===> Preparing start of X-Server $normal "
	# mountpoint -q /usr/var || mount -t tmpfs -o mode=0755 tmpfs /usr/var
	# mkdir /usr/var/log/
	# mkdir -p /usr/var/run/dbus
	mkdir -p /etc/dbus-1/session.d
	mountpoint -q /usr/share/X11/xkb/compiled || mount -t tmpfs -o mode=0755 tmpfs /usr/share/X11/xkb/compiled
	if fbset > /dev/null 2>&1 && cat /proc/cmdline /etc/lesslinux/cmdline /lesslinux/boot/cmdline | grep -qv ' vga=' ; then
	    cp -f /etc/X11/xorg.conf.xorg /etc/X11/xorg.conf
	elif [ -n "$xorgconf" ] && [ -f "$xorgconf" ] ; then
	    cp -f  "$xorgconf" /etc/X11/xorg.conf
	    if [ -n "$xorgscreen" ] ; then 
	        touch /var/run/lesslinux/xconfgui_xorg
		touch /var/run/lesslinux/xconfgui_skip_monitor
	    fi
	else
	    cp -f /etc/X11/xorg.conf.xorg /etc/X11/xorg.conf
	fi
	for m in $skipxmods ; do
		if [ -f /usr/lib/xorg/modules/drivers/${m}.so ] ; then
			mount --bind /dev/null /usr/lib/xorg/modules/drivers/${m}.so
		fi
		if [ -f /usr/lib/xorg/modules/extensions/${m}.so ] ; then
			mount --bind /dev/null /usr/lib/xorg/modules/extensions/${m}.so
		fi
		if [ -f /usr/lib/xorg/modules/${m}.so ] ; then
			mount --bind /dev/null /usr/lib/xorg/modules/${m}.so
		fi
	done
	## FIXME: Make it possible to skip this Logitech fix
	## for mod in hid_logitech usbhid hid ; do
	##   /sbin/modprobe -r $mod
	## done
	## for mod in hid usbhid hid_logitech ; do
	##    /sbin/modprobe $mod
	## done
	## udevadm trigger
    ;;
    stop)
	umount /usr/var > /dev/null 2>&1
	umount /usr/share/X11/xkb/compiled > /dev/null 2>&1
    ;;
esac

# END		]]>
		</scriptdata>
		<scriptdata location="/etc/rc.d/0565-blobsearch.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash
		
#lesslinux provides blob
#lesslinux license BSD
#lesslinux description
# Search the partition containing blobs

PATH=/usr/bin:/usr/sbin:/bin:/sbin:/static/bin:/static/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors
		
case $1 in
    start)
	mkdir -p /lesslinux/blob
	for dir in cdrom toram isoloop ; do
		if [ -d "/lesslinux/${dir}/${contdir}/blob" ] ; then
			find "/lesslinux/${dir}/${contdir}/blob" -maxdepth 1 | while read fname ; do
				[ -f "$fname" -o -d "$fname" ] && \
					ln -sf "$fname" /lesslinux/blob/` basename "$fname" ` 
			done
		fi
	done
	if mountpoint -q /lesslinux/cryptpart ; then
		if [ -d /lesslinux/cryptpart/blob ] ; then
			find "/lesslinux/cryptpart/blob" -maxdepth 1 | grep -v '/lesslinux/cryptpart/blob$' | while read fname ; do
				[ -f "$fname" -o -d "$fname" ] && \
					ln -sf "$fname" /lesslinux/blob/` basename "$fname" ` 
			done
		fi
	fi
	if  mountpoint -q /lesslinux/blobpart ; then
		find "/lesslinux/blobpart" -maxdepth 1 | grep -v '/lesslinux/blobpart$' | while read fname ; do
			[ -f "$fname" -o -d "$fname" ] && \
					ln -sf "$fname" /lesslinux/blob/` basename "$fname" ` 
		done
	fi
    ;;
esac
]]>
		</scriptdata>
		<scriptdata location="/etc/rc.d/0192-alsaprepare.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash
		
#lesslinux provides sound1
#lesslinux license BSD
#lesslinux description
# Load some alsa modules

PATH=/bin:/sbin:/usr/bin:/usr/sbin:/static/bin:/static/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors
		
case $1 in
    start)
	printf "$bold===> Preparing sound $normal"
	# Load modules
	for i in snd-hda-intel snd_pcm_oss snd_mixer_oss snd_hda_codec snd_pcm snd_timer \
	    snd_hda_codec_realtek snd_hda_codec_via snd_hda_codec_idt snd_hda_codec_analog \
	    snd_hda_codec_cmedia snd_hda_codec_nvhdmi snd_hda_codec_intelhdmi \
	    snd_hda_codec_conexant snd_hda_codec_si3054 snd_hda_codec_cirrus \
	    snd_hda_codec_atihdmi snd_hda_codec_ca0110 ; do
	    modprobe -v $i
	done
	sleep 1
	udevadm control --reload-rules
	udevadm trigger --verbose --subsystem-match sound 
    ;;
esac

# END		]]>
		</scriptdata>
		<scriptdata location="/etc/rc.d/0650-alsaprepare.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash
		
#lesslinux provides sound2
#lesslinux license BSD
#lesslinux description
# Load some alsa modules

PATH=/bin:/sbin:/usr/bin:/usr/sbin:/static/bin:/static/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors
		
case $1 in
    start)
	printf "$bold===> Preparing sound $normal"
	udevadm control --reload-rules
	udevadm trigger --verbose --subsystem-match sound 
    ;;
esac

# END		]]>
		</scriptdata>
		<scriptdata location="/etc/rc.d/0520-rfkill.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash
		
#lesslinux provides rfkill
#lesslinux license BSD
#lesslinux description

PATH=/bin:/sbin:/usr/bin:/usr/sbin:/static/bin:/static/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors
		
case $1 in
    start)
	printf "$bold===> Checking rfkill $normal"
	[ -c /dev/rfkill ] && rfkill unblock all
    ;;
esac

# END		]]>
		</scriptdata>
		<scriptdata location="/etc/rc.d/0650-ntpd.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash
		
#lesslinux provides ntpd
#lesslinux license BSD
#lesslinux description

PATH=/bin:/sbin:/usr/bin:/usr/sbin:/static/bin:/static/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors
		
case $1 in
    start)
	printf "$bold===> Setting clock $normal"
	/static/sbin/ntpd -q -p ptbtime1.ptb.de
    ;;
esac

# END		]]>
		</scriptdata>
		<scriptdata location="/etc/rc.d/9998-update.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash
		
#lesslinux provides updateoverlay2
#lesslinux license BSD
#lesslinux description
# Overwrite this script at update time

PATH=/bin:/sbin:/usr/bin:/usr/sbin:/static/bin:/static/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors

exit 0
	
		]]>
		</scriptdata>
		<scriptdata location="/etc/rc.d/9999-local.sh" mode="0755" group="0" owner="0">
		<![CDATA[#!/static/bin/ash
		
#lesslinux provides local
#lesslinux license BSD
#lesslinux description
# Run local startup scripts
# 
# Overlays may be stored as same_filename.tgz in the same folder as an ISO
# or as overlay.tgz in the directory with the squashfs containers. If both
# exist, the overlay among the ISO overwrites files. More possibliities 
# like http://, ftp:// or tftp:// might follow soon.
#
# Please also take a look at /etc/rc.d/0148-overlay.sh
#
# Since the init process already knows all scripts in /etc/rc.d, scripts
# to this folder added with an overlay will not be executed. For now, 
# overwrite this script in your overlay, treat this as a template.
# A better possibility in form of an /etc/rc.local.d/ might follow.

PATH=/usr/bin:/usr/sbin:/bin:/sbin:/static/bin:/static/sbin
export PATH

. /etc/rc.defaults
. /etc/rc.subr/extractbootparams
. /etc/rc.subr/colors

case $1 in
    start)
	# printf "$bold===> Starting locals scripts $normal\n"
	exit 0
    ;;
    stop)
	# printf "$bold===> Stopping locals scripts $normal\n"
	exit 0
    ;;
esac
	
		]]>
		</scriptdata>
	</scripts>
	<package name="cross-busybox-musl-amd64" version="1.34.1" allowfail="yes">
		<sources>
			<file>
				<pkg sha1="1c79e0eb88281bf4f734ab934a2d9f1d1b00de60">busybox-1.7.2-smack-static-ulibc-i686.tar.gz</pkg>
				<mirror>http://distfiles.lesslinux.org/busybox/</mirror>
			</file>
			<!-- <file>        
				<pkg sha1="1aa6bb245cc1fd7ddd954137844235fd0e42b458">surfer-20091026.tgz</pkg>
				<mirror>http://distfiles.lesslinux.org/</mirror>
			</file>
			<file>
				<pkg sha1="4b68431d95106288d21f43db97c516900d524176">desktop-cb-20090713.jpg</pkg>
				<mirror>http://distfiles.lesslinux.org/</mirror>
			</file>
			<file>
				<pkg sha1="b795e19b88381434eb64c03beeff39e510d6d5f0">desktop-cb-20090713.png</pkg>
				<mirror>http://distfiles.lesslinux.org/</mirror>
			</file> -->
			<!-- <file>                              
				<pkg sha1="4d38ec9ca0645103e0b863afc91d2f51d6c6a197">xdelta3.0z-static-ulibc-i686.tar.gz</pkg>
				<mirror>http://distfiles.lesslinux.org/</mirror>
			</file> -->
			<!-- <file>
				<pkg sha1="590d2a791d57a5e826a1ad1fe380263ebab60594">xdelta3.0y-static-ulibc-i686.tar.gz</pkg>
				<mirror>http://distfiles.lesslinux.org/</mirror>
			</file> -->
			<!-- <file>                                                                                                                                     
				<pkg sha1="1a8b97675f3f0332250497c131560164e17a1c50">module-init-tools-3.16-static-glibc-i686.tar.bz2</pkg>
				<mirror>http://distfiles.lesslinux.org/</mirror>
			</file> -->
			<!-- <file>                                                                            
				<pkg sha1="903eab507ecc83df4dd07d15382052c0186a6936">parted-2.4-static-glibc-i686.tar.bz2</pkg>
				<mirror>http://distfiles.lesslinux.org/</mirror>
			</file> -->
			<!-- <file>                                             
				<pkg sha1="1aeac67de93b0a2b6618e198c670d19d355b6e4a">syslinux-4.03-static-uclibc-i686.tar.bz2</pkg>
				<mirror>http://distfiles.lesslinux.org/</mirror>
			</file> -->
			<!-- <file>    
				<pkg sha1="09d057b51548a14c3c6cb1e20b12305f3992aab4">kexec-tools-2.0.2-static-uclibc-i686.tar.bz2</pkg>
				<mirror>http://distfiles.lesslinux.org/</mirror>
			</file> -->
		</sources>
		<unpack>
		<![CDATA[ 
		# tar xjf ${CHROOT}/usr/share/staticstuff/busybox-static-musl-i686-${PKGVERSION}.tar.bz2
		tar xjf ${CHROOT}/usr/share/staticstuff/busybox-static-musl-amd64-${PKGVERSION}.tar.bz2
		# tar xzf ${SRCDIR}/${PKGNAME}-1.7.2-smack-static-ulibc-i686.tar.gz
		]]>
		</unpack>
		<install>
		<![CDATA[ 
		rsync -avHP busybox-${PKGVERSION}/_install/ ${INITRAMFS}/static/
		# rsync -avHP ${PKGNAME}-1.7.2-smack-static-ulibc-i686/_install/bin/busybox ${INITRAMFS}/static/bin/busybox_smack
		]]>
		</install>
	</package>
<!-- the end -->
</llpackages>
